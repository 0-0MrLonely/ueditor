/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['core/htmlparser.js']) {
  _$jscoverage['core/htmlparser.js'] = [];
  _$jscoverage['core/htmlparser.js'][3] = 0;
  _$jscoverage['core/htmlparser.js'][4] = 0;
  _$jscoverage['core/htmlparser.js'][6] = 0;
  _$jscoverage['core/htmlparser.js'][11] = 0;
  _$jscoverage['core/htmlparser.js'][14] = 0;
  _$jscoverage['core/htmlparser.js'][33] = 0;
  _$jscoverage['core/htmlparser.js'][34] = 0;
  _$jscoverage['core/htmlparser.js'][35] = 0;
  _$jscoverage['core/htmlparser.js'][36] = 0;
  _$jscoverage['core/htmlparser.js'][37] = 0;
  _$jscoverage['core/htmlparser.js'][38] = 0;
  _$jscoverage['core/htmlparser.js'][41] = 0;
  _$jscoverage['core/htmlparser.js'][45] = 0;
  _$jscoverage['core/htmlparser.js'][46] = 0;
  _$jscoverage['core/htmlparser.js'][47] = 0;
  _$jscoverage['core/htmlparser.js'][48] = 0;
  _$jscoverage['core/htmlparser.js'][49] = 0;
  _$jscoverage['core/htmlparser.js'][50] = 0;
  _$jscoverage['core/htmlparser.js'][51] = 0;
  _$jscoverage['core/htmlparser.js'][52] = 0;
  _$jscoverage['core/htmlparser.js'][53] = 0;
  _$jscoverage['core/htmlparser.js'][55] = 0;
  _$jscoverage['core/htmlparser.js'][57] = 0;
  _$jscoverage['core/htmlparser.js'][58] = 0;
  _$jscoverage['core/htmlparser.js'][62] = 0;
  _$jscoverage['core/htmlparser.js'][70] = 0;
  _$jscoverage['core/htmlparser.js'][71] = 0;
  _$jscoverage['core/htmlparser.js'][72] = 0;
  _$jscoverage['core/htmlparser.js'][73] = 0;
  _$jscoverage['core/htmlparser.js'][75] = 0;
  _$jscoverage['core/htmlparser.js'][78] = 0;
  _$jscoverage['core/htmlparser.js'][80] = 0;
  _$jscoverage['core/htmlparser.js'][83] = 0;
  _$jscoverage['core/htmlparser.js'][84] = 0;
  _$jscoverage['core/htmlparser.js'][91] = 0;
  _$jscoverage['core/htmlparser.js'][93] = 0;
  _$jscoverage['core/htmlparser.js'][97] = 0;
  _$jscoverage['core/htmlparser.js'][98] = 0;
  _$jscoverage['core/htmlparser.js'][99] = 0;
  _$jscoverage['core/htmlparser.js'][100] = 0;
  _$jscoverage['core/htmlparser.js'][102] = 0;
  _$jscoverage['core/htmlparser.js'][104] = 0;
  _$jscoverage['core/htmlparser.js'][106] = 0;
  _$jscoverage['core/htmlparser.js'][108] = 0;
  _$jscoverage['core/htmlparser.js'][109] = 0;
  _$jscoverage['core/htmlparser.js'][110] = 0;
  _$jscoverage['core/htmlparser.js'][113] = 0;
  _$jscoverage['core/htmlparser.js'][114] = 0;
  _$jscoverage['core/htmlparser.js'][116] = 0;
  _$jscoverage['core/htmlparser.js'][118] = 0;
  _$jscoverage['core/htmlparser.js'][123] = 0;
  _$jscoverage['core/htmlparser.js'][124] = 0;
  _$jscoverage['core/htmlparser.js'][126] = 0;
}
_$jscoverage['core/htmlparser.js'].source = ["<span class=\"c\">//html&#23383;&#31526;&#20018;&#36716;&#25442;&#25104;uNode&#33410;&#28857;</span>","<span class=\"c\">//by zhanyi</span>","<span class=\"k\">var</span> htmlparser <span class=\"k\">=</span> UE<span class=\"k\">.</span>htmlparser <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>htmlstr<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> reg <span class=\"k\">=</span> <span class=\"k\">new</span> RegExp<span class=\"k\">(</span>domUtils<span class=\"k\">.</span>fillChar<span class=\"k\">,</span> <span class=\"s\">'g'</span><span class=\"k\">);</span>","    <span class=\"c\">//ie&#19979;&#21462;&#24471;&#30340;html&#21487;&#33021;&#20250;&#26377;\\n&#23384;&#22312;&#65292;&#35201;&#21435;&#25481;&#65292;&#22312;&#22788;&#29702;replace(/[\\t\\r\\n]*/g,'');&#20195;&#30721;&#39640;&#37327;&#30340;\\n&#19981;&#33021;&#21435;&#38500;</span>","    htmlstr <span class=\"k\">=</span> htmlstr<span class=\"k\">.</span>replace<span class=\"k\">(</span>reg<span class=\"k\">,</span> <span class=\"s\">''</span><span class=\"k\">)</span>","        <span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/(?:^[ \\t\\r\\n]*?&lt;)/</span><span class=\"k\">,</span> <span class=\"s\">'&lt;'</span><span class=\"k\">)</span>","        <span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/(?:&gt;[ \\t\\r\\n]*?$)/</span><span class=\"k\">,</span> <span class=\"s\">'&gt;'</span><span class=\"k\">)</span>","        <span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/&gt;(?:[ \\t\\r\\n]*)/g</span><span class=\"k\">,</span> <span class=\"s\">'&gt;'</span><span class=\"k\">).</span>replace<span class=\"k\">(</span><span class=\"s\">/(?:[ \\t\\r\\n]*)&lt;/g</span><span class=\"k\">,</span> <span class=\"s\">'&lt;'</span><span class=\"k\">);</span>","","    <span class=\"k\">var</span> re_tag <span class=\"k\">=</span> <span class=\"s\">/&lt;(?:(?:\\/([^&gt;]+)&gt;)|(?:!--([\\S|\\s]*?)--&gt;)|(?:([^\\s\\/&gt;]+)\\s*((?:(?:\"[^\"]*\")|(?:'[^']*')|[^\"'&lt;&gt;])*)\\/?&gt;))/g</span><span class=\"k\">,</span>","        re_attr <span class=\"k\">=</span> <span class=\"s\">/([\\w\\-:.]+)(?:(?:\\s*=\\s*(?:(?:\"([^\"]*)\")|(?:'([^']*)')|([^\\s&gt;]+)))|(?=\\s|$))/g</span><span class=\"k\">;</span>","","    <span class=\"k\">var</span> uNode <span class=\"k\">=</span> UE<span class=\"k\">.</span>uNode<span class=\"k\">,</span>","        needParentNode <span class=\"k\">=</span> <span class=\"k\">{</span>","            <span class=\"s\">'td'</span><span class=\"k\">:</span><span class=\"s\">'tr'</span><span class=\"k\">,</span>","            <span class=\"s\">'tr'</span><span class=\"k\">:[</span><span class=\"s\">'tbody'</span><span class=\"k\">,</span><span class=\"s\">'thead'</span><span class=\"k\">,</span><span class=\"s\">'tfoot'</span><span class=\"k\">],</span>","            <span class=\"s\">'tbody'</span><span class=\"k\">:</span><span class=\"s\">'table'</span><span class=\"k\">,</span>","            <span class=\"s\">'th'</span><span class=\"k\">:</span><span class=\"s\">'tr'</span><span class=\"k\">,</span>","            <span class=\"s\">'thead'</span><span class=\"k\">:</span><span class=\"s\">'table'</span><span class=\"k\">,</span>","            <span class=\"s\">'tfoot'</span><span class=\"k\">:</span><span class=\"s\">'table'</span><span class=\"k\">,</span>","            <span class=\"s\">'caption'</span><span class=\"k\">:</span><span class=\"s\">'table'</span><span class=\"k\">,</span>","            <span class=\"s\">'li'</span><span class=\"k\">:[</span><span class=\"s\">'ul'</span><span class=\"k\">,</span> <span class=\"s\">'ol'</span><span class=\"k\">],</span>","            <span class=\"s\">'dt'</span><span class=\"k\">:</span><span class=\"s\">'dl'</span><span class=\"k\">,</span>","            <span class=\"s\">'dd'</span><span class=\"k\">:</span><span class=\"s\">'dl'</span><span class=\"k\">,</span>","            <span class=\"s\">'option'</span><span class=\"k\">:</span><span class=\"s\">'select'</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        needChild <span class=\"k\">=</span> <span class=\"k\">{</span>","            <span class=\"s\">'ol'</span><span class=\"k\">:</span><span class=\"s\">'li'</span><span class=\"k\">,</span>","            <span class=\"s\">'ul'</span><span class=\"k\">:</span><span class=\"s\">'li'</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","","    <span class=\"k\">function</span> text<span class=\"k\">(</span>parent<span class=\"k\">,</span> data<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>needChild<span class=\"k\">[</span>parent<span class=\"k\">.</span>tagName<span class=\"k\">])</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> tmpNode <span class=\"k\">=</span> uNode<span class=\"k\">.</span>createElement<span class=\"k\">(</span>needChild<span class=\"k\">[</span>parent<span class=\"k\">.</span>tagName<span class=\"k\">]);</span>","            parent<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>tmpNode<span class=\"k\">);</span>","            tmpNode<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>uNode<span class=\"k\">.</span>createText<span class=\"k\">(</span>data<span class=\"k\">));</span>","            parent <span class=\"k\">=</span> tmpNode<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>","","            parent<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>uNode<span class=\"k\">.</span>createText<span class=\"k\">(</span>data<span class=\"k\">));</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> element<span class=\"k\">(</span>parent<span class=\"k\">,</span> tagName<span class=\"k\">,</span> htmlattr<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> needParentTag<span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>needParentTag <span class=\"k\">=</span> needParentNode<span class=\"k\">[</span>tagName<span class=\"k\">])</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> tmpParent <span class=\"k\">=</span> parent<span class=\"k\">,</span>hasParent<span class=\"k\">;</span>","            <span class=\"k\">while</span><span class=\"k\">(</span>tmpParent<span class=\"k\">.</span>type <span class=\"k\">!=</span> <span class=\"s\">'root'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>utils<span class=\"k\">.</span>isArray<span class=\"k\">(</span>needParentTag<span class=\"k\">)</span> <span class=\"k\">?</span> utils<span class=\"k\">.</span>indexOf<span class=\"k\">(</span>needParentTag<span class=\"k\">,</span> tmpParent<span class=\"k\">.</span>tagName<span class=\"k\">)</span> <span class=\"k\">!=</span> <span class=\"k\">-</span><span class=\"s\">1</span> <span class=\"k\">:</span> needParentTag <span class=\"k\">==</span> tmpParent<span class=\"k\">.</span>tagName<span class=\"k\">)</span><span class=\"k\">{</span>","                    parent <span class=\"k\">=</span> tmpParent<span class=\"k\">;</span>","                    hasParent <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                    <span class=\"k\">break</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","                tmpParent <span class=\"k\">=</span> tmpParent<span class=\"k\">.</span>parentNode<span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">if</span><span class=\"k\">(!</span>hasParent<span class=\"k\">)</span><span class=\"k\">{</span>","                parent <span class=\"k\">=</span> element<span class=\"k\">(</span>parent<span class=\"k\">,</span> utils<span class=\"k\">.</span>isArray<span class=\"k\">(</span>needParentTag<span class=\"k\">)</span> <span class=\"k\">?</span> needParentTag<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">:</span> needParentTag<span class=\"k\">)</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">var</span> elm <span class=\"k\">=</span> <span class=\"k\">new</span> uNode<span class=\"k\">(</span><span class=\"k\">{</span>","            parentNode<span class=\"k\">:</span>parent<span class=\"k\">,</span>","            type<span class=\"k\">:</span><span class=\"s\">'element'</span><span class=\"k\">,</span>","            tagName<span class=\"k\">:</span>tagName<span class=\"k\">.</span>toLowerCase<span class=\"k\">(),</span>","            <span class=\"c\">//&#26159;&#33258;&#38381;&#21512;&#30340;&#22788;&#29702;&#19968;&#19979;</span>","            children<span class=\"k\">:</span>dtd<span class=\"k\">.</span>$empty<span class=\"k\">[</span>tagName<span class=\"k\">]</span> <span class=\"k\">?</span> <span class=\"k\">null</span> <span class=\"k\">:</span> <span class=\"k\">[]</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","        <span class=\"c\">//&#22914;&#26524;&#23646;&#24615;&#23384;&#22312;&#65292;&#22788;&#29702;&#23646;&#24615;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>htmlattr<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> attrs <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">,</span> match<span class=\"k\">;</span>","            <span class=\"k\">while</span> <span class=\"k\">(</span>match <span class=\"k\">=</span> re_attr<span class=\"k\">.</span>exec<span class=\"k\">(</span>htmlattr<span class=\"k\">))</span> <span class=\"k\">{</span>","                attrs<span class=\"k\">[</span>match<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">].</span>toLowerCase<span class=\"k\">()]</span> <span class=\"k\">=</span> match<span class=\"k\">[</span><span class=\"s\">2</span><span class=\"k\">]</span> <span class=\"k\">||</span> match<span class=\"k\">[</span><span class=\"s\">3</span><span class=\"k\">]</span> <span class=\"k\">||</span> match<span class=\"k\">[</span><span class=\"s\">4</span><span class=\"k\">]</span>","            <span class=\"k\">}</span>","            elm<span class=\"k\">.</span>attrs <span class=\"k\">=</span> attrs<span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        parent<span class=\"k\">.</span>children<span class=\"k\">.</span>push<span class=\"k\">(</span>elm<span class=\"k\">);</span>","        <span class=\"c\">//&#22914;&#26524;&#26159;&#33258;&#38381;&#21512;&#33410;&#28857;&#36820;&#22238;&#29238;&#20146;&#33410;&#28857;</span>","        <span class=\"k\">return</span>  dtd<span class=\"k\">.</span>$empty<span class=\"k\">[</span>tagName<span class=\"k\">]</span> <span class=\"k\">?</span> parent <span class=\"k\">:</span> elm","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> comment<span class=\"k\">(</span>parent<span class=\"k\">,</span> data<span class=\"k\">)</span> <span class=\"k\">{</span>","        parent<span class=\"k\">.</span>children<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">new</span> uNode<span class=\"k\">(</span><span class=\"k\">{</span>","            type<span class=\"k\">:</span><span class=\"s\">'comment'</span><span class=\"k\">,</span>","            data<span class=\"k\">:</span>data<span class=\"k\">,</span>","            parentNode<span class=\"k\">:</span>parent","        <span class=\"k\">}</span><span class=\"k\">));</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">var</span> match<span class=\"k\">,</span> currentIndex <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> nextIndex <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","    <span class=\"c\">//&#35774;&#32622;&#26681;&#33410;&#28857;</span>","    <span class=\"k\">var</span> root <span class=\"k\">=</span> <span class=\"k\">new</span> uNode<span class=\"k\">(</span><span class=\"k\">{</span>","        type<span class=\"k\">:</span><span class=\"s\">'root'</span><span class=\"k\">,</span>","        children<span class=\"k\">:[]</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">var</span> currentParent <span class=\"k\">=</span> root<span class=\"k\">;</span>","    <span class=\"k\">while</span> <span class=\"k\">(</span>match <span class=\"k\">=</span> re_tag<span class=\"k\">.</span>exec<span class=\"k\">(</span>htmlstr<span class=\"k\">))</span> <span class=\"k\">{</span>","        currentIndex <span class=\"k\">=</span> match<span class=\"k\">.</span>index<span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>currentIndex <span class=\"k\">&gt;</span> nextIndex<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"c\">//text node</span>","            text<span class=\"k\">(</span>currentParent<span class=\"k\">,</span> htmlstr<span class=\"k\">.</span>slice<span class=\"k\">(</span>nextIndex<span class=\"k\">,</span> currentIndex<span class=\"k\">));</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>match<span class=\"k\">[</span><span class=\"s\">3</span><span class=\"k\">])</span> <span class=\"k\">{</span>","            <span class=\"c\">//start tag</span>","            currentParent <span class=\"k\">=</span> element<span class=\"k\">(</span>currentParent<span class=\"k\">,</span> match<span class=\"k\">[</span><span class=\"s\">3</span><span class=\"k\">].</span>toLowerCase<span class=\"k\">(),</span> match<span class=\"k\">[</span><span class=\"s\">4</span><span class=\"k\">]);</span>","","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>match<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">])</span> <span class=\"k\">{</span>","            <span class=\"k\">while</span><span class=\"k\">(</span>currentParent<span class=\"k\">.</span>type <span class=\"k\">==</span> <span class=\"s\">'element'</span> <span class=\"k\">&amp;&amp;</span> currentParent<span class=\"k\">.</span>tagName <span class=\"k\">!=</span> match<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">].</span>toLowerCase<span class=\"k\">())</span><span class=\"k\">{</span>","                currentParent <span class=\"k\">=</span> currentParent<span class=\"k\">.</span>parentNode<span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"c\">//end tag</span>","            currentParent <span class=\"k\">=</span> currentParent<span class=\"k\">.</span>parentNode<span class=\"k\">;</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>match<span class=\"k\">[</span><span class=\"s\">2</span><span class=\"k\">])</span> <span class=\"k\">{</span>","            <span class=\"c\">//comment</span>","            comment<span class=\"k\">(</span>currentParent<span class=\"k\">,</span> match<span class=\"k\">[</span><span class=\"s\">2</span><span class=\"k\">])</span>","        <span class=\"k\">}</span>","        nextIndex <span class=\"k\">=</span> re_tag<span class=\"k\">.</span>lastIndex<span class=\"k\">;</span>","","    <span class=\"k\">}</span>","    <span class=\"c\">//&#22914;&#26524;&#32467;&#26463;&#26159;&#25991;&#26412;&#65292;&#23601;&#26377;&#21487;&#33021;&#20002;&#25481;&#65292;&#25152;&#20197;&#36825;&#37324;&#25163;&#21160;&#21028;&#26029;&#19968;&#19979;</span>","    <span class=\"c\">//&#20363;&#22914; &lt;li&gt;sdfsdfsdf&lt;li&gt;sdfsdfsdfsdf</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>nextIndex <span class=\"k\">&lt;</span> htmlstr<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","        text<span class=\"k\">(</span>currentParent<span class=\"k\">,</span> htmlstr<span class=\"k\">.</span>slice<span class=\"k\">(</span>nextIndex<span class=\"k\">));</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> root<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>"];
_$jscoverage['core/htmlparser.js'][3]++;
var htmlparser = (UE.htmlparser = (function (htmlstr) {
  _$jscoverage['core/htmlparser.js'][4]++;
  var reg = new RegExp(domUtils.fillChar, "g");
  _$jscoverage['core/htmlparser.js'][6]++;
  htmlstr = htmlstr.replace(reg, "").replace(/(?:^[ \t\r\n]*?<)/, "<").replace(/(?:>[ \t\r\n]*?$)/, ">").replace(/>(?:[ \t\r\n]*)/g, ">").replace(/(?:[ \t\r\n]*)</g, "<");
  _$jscoverage['core/htmlparser.js'][11]++;
  var re_tag = /<(?:(?:\/([^>]+)>)|(?:!--([\S|\s]*?)-->)|(?:([^\s\/>]+)\s*((?:(?:"[^"]*")|(?:'[^']*')|[^"'<>])*)\/?>))/g, re_attr = /([\w\-:.]+)(?:(?:\s*=\s*(?:(?:"([^"]*)")|(?:'([^']*)')|([^\s>]+)))|(?=\s|$))/g;
  _$jscoverage['core/htmlparser.js'][14]++;
  var uNode = UE.uNode, needParentNode = {"td": "tr", "tr": ["tbody", "thead", "tfoot"], "tbody": "table", "th": "tr", "thead": "table", "tfoot": "table", "caption": "table", "li": ["ul", "ol"], "dt": "dl", "dd": "dl", "option": "select"}, needChild = {"ol": "li", "ul": "li"};
  _$jscoverage['core/htmlparser.js'][33]++;
  function text(parent, data) {
    _$jscoverage['core/htmlparser.js'][34]++;
    if (needChild[parent.tagName]) {
      _$jscoverage['core/htmlparser.js'][35]++;
      var tmpNode = uNode.createElement(needChild[parent.tagName]);
      _$jscoverage['core/htmlparser.js'][36]++;
      parent.appendChild(tmpNode);
      _$jscoverage['core/htmlparser.js'][37]++;
      tmpNode.appendChild(uNode.createText(data));
      _$jscoverage['core/htmlparser.js'][38]++;
      parent = tmpNode;
    }
    else {
      _$jscoverage['core/htmlparser.js'][41]++;
      parent.appendChild(uNode.createText(data));
    }
}
  _$jscoverage['core/htmlparser.js'][45]++;
  function element(parent, tagName, htmlattr) {
    _$jscoverage['core/htmlparser.js'][46]++;
    var needParentTag;
    _$jscoverage['core/htmlparser.js'][47]++;
    if ((needParentTag = needParentNode[tagName])) {
      _$jscoverage['core/htmlparser.js'][48]++;
      var tmpParent = parent, hasParent;
      _$jscoverage['core/htmlparser.js'][49]++;
      while ((tmpParent.type != "root")) {
        _$jscoverage['core/htmlparser.js'][50]++;
        if ((utils.isArray(needParentTag)? (utils.indexOf(needParentTag, tmpParent.tagName) != -1): (needParentTag == tmpParent.tagName))) {
          _$jscoverage['core/htmlparser.js'][51]++;
          parent = tmpParent;
          _$jscoverage['core/htmlparser.js'][52]++;
          hasParent = true;
          _$jscoverage['core/htmlparser.js'][53]++;
          break;
        }
        _$jscoverage['core/htmlparser.js'][55]++;
        tmpParent = tmpParent.parentNode;
}
      _$jscoverage['core/htmlparser.js'][57]++;
      if ((! hasParent)) {
        _$jscoverage['core/htmlparser.js'][58]++;
        parent = element(parent, (utils.isArray(needParentTag)? needParentTag[0]: needParentTag));
      }
    }
    _$jscoverage['core/htmlparser.js'][62]++;
    var elm = new uNode({parentNode: parent, type: "element", tagName: tagName.toLowerCase(), children: (dtd.$empty[tagName]? null: [])});
    _$jscoverage['core/htmlparser.js'][70]++;
    if (htmlattr) {
      _$jscoverage['core/htmlparser.js'][71]++;
      var attrs = {}, match;
      _$jscoverage['core/htmlparser.js'][72]++;
      while ((match = re_attr.exec(htmlattr))) {
        _$jscoverage['core/htmlparser.js'][73]++;
        attrs[match[1].toLowerCase()] = (match[2] || match[3] || match[4]);
}
      _$jscoverage['core/htmlparser.js'][75]++;
      elm.attrs = attrs;
    }
    _$jscoverage['core/htmlparser.js'][78]++;
    parent.children.push(elm);
    _$jscoverage['core/htmlparser.js'][80]++;
    return (dtd.$empty[tagName]? parent: elm);
}
  _$jscoverage['core/htmlparser.js'][83]++;
  function comment(parent, data) {
    _$jscoverage['core/htmlparser.js'][84]++;
    parent.children.push(new uNode({type: "comment", data: data, parentNode: parent}));
}
  _$jscoverage['core/htmlparser.js'][91]++;
  var match, currentIndex = 0, nextIndex = 0;
  _$jscoverage['core/htmlparser.js'][93]++;
  var root = new uNode({type: "root", children: []});
  _$jscoverage['core/htmlparser.js'][97]++;
  var currentParent = root;
  _$jscoverage['core/htmlparser.js'][98]++;
  while ((match = re_tag.exec(htmlstr))) {
    _$jscoverage['core/htmlparser.js'][99]++;
    currentIndex = match.index;
    _$jscoverage['core/htmlparser.js'][100]++;
    if ((currentIndex > nextIndex)) {
      _$jscoverage['core/htmlparser.js'][102]++;
      text(currentParent, htmlstr.slice(nextIndex, currentIndex));
    }
    _$jscoverage['core/htmlparser.js'][104]++;
    if (match[3]) {
      _$jscoverage['core/htmlparser.js'][106]++;
      currentParent = element(currentParent, match[3].toLowerCase(), match[4]);
    }
    else {
      _$jscoverage['core/htmlparser.js'][108]++;
      if (match[1]) {
        _$jscoverage['core/htmlparser.js'][109]++;
        while (((currentParent.type == "element") && (currentParent.tagName != match[1].toLowerCase()))) {
          _$jscoverage['core/htmlparser.js'][110]++;
          currentParent = currentParent.parentNode;
}
        _$jscoverage['core/htmlparser.js'][113]++;
        currentParent = currentParent.parentNode;
      }
      else {
        _$jscoverage['core/htmlparser.js'][114]++;
        if (match[2]) {
          _$jscoverage['core/htmlparser.js'][116]++;
          comment(currentParent, match[2]);
        }
      }
    }
    _$jscoverage['core/htmlparser.js'][118]++;
    nextIndex = re_tag.lastIndex;
}
  _$jscoverage['core/htmlparser.js'][123]++;
  if ((nextIndex < htmlstr.length)) {
    _$jscoverage['core/htmlparser.js'][124]++;
    text(currentParent, htmlstr.slice(nextIndex));
  }
  _$jscoverage['core/htmlparser.js'][126]++;
  return root;
}));
