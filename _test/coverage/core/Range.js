/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['core/Range.js']) {
  _$jscoverage['core/Range.js'] = [];
  _$jscoverage['core/Range.js'][15] = 0;
  _$jscoverage['core/Range.js'][16] = 0;
  _$jscoverage['core/Range.js'][24] = 0;
  _$jscoverage['core/Range.js'][25] = 0;
  _$jscoverage['core/Range.js'][31] = 0;
  _$jscoverage['core/Range.js'][32] = 0;
  _$jscoverage['core/Range.js'][34] = 0;
  _$jscoverage['core/Range.js'][36] = 0;
  _$jscoverage['core/Range.js'][37] = 0;
  _$jscoverage['core/Range.js'][38] = 0;
  _$jscoverage['core/Range.js'][40] = 0;
  _$jscoverage['core/Range.js'][41] = 0;
  _$jscoverage['core/Range.js'][42] = 0;
  _$jscoverage['core/Range.js'][43] = 0;
  _$jscoverage['core/Range.js'][44] = 0;
  _$jscoverage['core/Range.js'][47] = 0;
  _$jscoverage['core/Range.js'][48] = 0;
  _$jscoverage['core/Range.js'][49] = 0;
  _$jscoverage['core/Range.js'][50] = 0;
  _$jscoverage['core/Range.js'][53] = 0;
  _$jscoverage['core/Range.js'][54] = 0;
  _$jscoverage['core/Range.js'][57] = 0;
  _$jscoverage['core/Range.js'][60] = 0;
  _$jscoverage['core/Range.js'][67] = 0;
  _$jscoverage['core/Range.js'][68] = 0;
  _$jscoverage['core/Range.js'][70] = 0;
  _$jscoverage['core/Range.js'][71] = 0;
  _$jscoverage['core/Range.js'][73] = 0;
  _$jscoverage['core/Range.js'][74] = 0;
  _$jscoverage['core/Range.js'][76] = 0;
  _$jscoverage['core/Range.js'][77] = 0;
  _$jscoverage['core/Range.js'][78] = 0;
  _$jscoverage['core/Range.js'][80] = 0;
  _$jscoverage['core/Range.js'][82] = 0;
  _$jscoverage['core/Range.js'][84] = 0;
  _$jscoverage['core/Range.js'][85] = 0;
  _$jscoverage['core/Range.js'][87] = 0;
  _$jscoverage['core/Range.js'][88] = 0;
  _$jscoverage['core/Range.js'][89] = 0;
  _$jscoverage['core/Range.js'][90] = 0;
  _$jscoverage['core/Range.js'][91] = 0;
  _$jscoverage['core/Range.js'][92] = 0;
  _$jscoverage['core/Range.js'][94] = 0;
  _$jscoverage['core/Range.js'][95] = 0;
  _$jscoverage['core/Range.js'][98] = 0;
  _$jscoverage['core/Range.js'][102] = 0;
  _$jscoverage['core/Range.js'][103] = 0;
  _$jscoverage['core/Range.js'][105] = 0;
  _$jscoverage['core/Range.js'][106] = 0;
  _$jscoverage['core/Range.js'][107] = 0;
  _$jscoverage['core/Range.js'][109] = 0;
  _$jscoverage['core/Range.js'][110] = 0;
  _$jscoverage['core/Range.js'][111] = 0;
  _$jscoverage['core/Range.js'][113] = 0;
  _$jscoverage['core/Range.js'][115] = 0;
  _$jscoverage['core/Range.js'][116] = 0;
  _$jscoverage['core/Range.js'][117] = 0;
  _$jscoverage['core/Range.js'][118] = 0;
  _$jscoverage['core/Range.js'][120] = 0;
  _$jscoverage['core/Range.js'][121] = 0;
  _$jscoverage['core/Range.js'][122] = 0;
  _$jscoverage['core/Range.js'][123] = 0;
  _$jscoverage['core/Range.js'][124] = 0;
  _$jscoverage['core/Range.js'][126] = 0;
  _$jscoverage['core/Range.js'][127] = 0;
  _$jscoverage['core/Range.js'][131] = 0;
  _$jscoverage['core/Range.js'][132] = 0;
  _$jscoverage['core/Range.js'][135] = 0;
  _$jscoverage['core/Range.js'][136] = 0;
  _$jscoverage['core/Range.js'][137] = 0;
  _$jscoverage['core/Range.js'][138] = 0;
  _$jscoverage['core/Range.js'][140] = 0;
  _$jscoverage['core/Range.js'][141] = 0;
  _$jscoverage['core/Range.js'][142] = 0;
  _$jscoverage['core/Range.js'][145] = 0;
  _$jscoverage['core/Range.js'][147] = 0;
  _$jscoverage['core/Range.js'][148] = 0;
  _$jscoverage['core/Range.js'][150] = 0;
  _$jscoverage['core/Range.js'][151] = 0;
  _$jscoverage['core/Range.js'][152] = 0;
  _$jscoverage['core/Range.js'][166] = 0;
  _$jscoverage['core/Range.js'][167] = 0;
  _$jscoverage['core/Range.js'][168] = 0;
  _$jscoverage['core/Range.js'][172] = 0;
  _$jscoverage['core/Range.js'][173] = 0;
  _$jscoverage['core/Range.js'][181] = 0;
  _$jscoverage['core/Range.js'][182] = 0;
  _$jscoverage['core/Range.js'][183] = 0;
  _$jscoverage['core/Range.js'][184] = 0;
  _$jscoverage['core/Range.js'][185] = 0;
  _$jscoverage['core/Range.js'][186] = 0;
  _$jscoverage['core/Range.js'][187] = 0;
  _$jscoverage['core/Range.js'][191] = 0;
  _$jscoverage['core/Range.js'][192] = 0;
  _$jscoverage['core/Range.js'][193] = 0;
  _$jscoverage['core/Range.js'][196] = 0;
  _$jscoverage['core/Range.js'][208] = 0;
  _$jscoverage['core/Range.js'][209] = 0;
  _$jscoverage['core/Range.js'][210] = 0;
  _$jscoverage['core/Range.js'][211] = 0;
  _$jscoverage['core/Range.js'][212] = 0;
  _$jscoverage['core/Range.js'][213] = 0;
  _$jscoverage['core/Range.js'][214] = 0;
  _$jscoverage['core/Range.js'][218] = 0;
  _$jscoverage['core/Range.js'][225] = 0;
  _$jscoverage['core/Range.js'][244] = 0;
  _$jscoverage['core/Range.js'][245] = 0;
  _$jscoverage['core/Range.js'][246] = 0;
  _$jscoverage['core/Range.js'][248] = 0;
  _$jscoverage['core/Range.js'][249] = 0;
  _$jscoverage['core/Range.js'][250] = 0;
  _$jscoverage['core/Range.js'][251] = 0;
  _$jscoverage['core/Range.js'][252] = 0;
  _$jscoverage['core/Range.js'][255] = 0;
  _$jscoverage['core/Range.js'][277] = 0;
  _$jscoverage['core/Range.js'][286] = 0;
  _$jscoverage['core/Range.js'][295] = 0;
  _$jscoverage['core/Range.js'][308] = 0;
  _$jscoverage['core/Range.js'][321] = 0;
  _$jscoverage['core/Range.js'][334] = 0;
  _$jscoverage['core/Range.js'][347] = 0;
  _$jscoverage['core/Range.js'][355] = 0;
  _$jscoverage['core/Range.js'][363] = 0;
  _$jscoverage['core/Range.js'][371] = 0;
  _$jscoverage['core/Range.js'][379] = 0;
  _$jscoverage['core/Range.js'][388] = 0;
  _$jscoverage['core/Range.js'][404] = 0;
  _$jscoverage['core/Range.js'][413] = 0;
  _$jscoverage['core/Range.js'][414] = 0;
  _$jscoverage['core/Range.js'][425] = 0;
  _$jscoverage['core/Range.js'][426] = 0;
  _$jscoverage['core/Range.js'][427] = 0;
  _$jscoverage['core/Range.js'][428] = 0;
  _$jscoverage['core/Range.js'][430] = 0;
  _$jscoverage['core/Range.js'][431] = 0;
  _$jscoverage['core/Range.js'][433] = 0;
  _$jscoverage['core/Range.js'][434] = 0;
  _$jscoverage['core/Range.js'][448] = 0;
  _$jscoverage['core/Range.js'][450] = 0;
  _$jscoverage['core/Range.js'][451] = 0;
  _$jscoverage['core/Range.js'][453] = 0;
  _$jscoverage['core/Range.js'][456] = 0;
  _$jscoverage['core/Range.js'][458] = 0;
  _$jscoverage['core/Range.js'][459] = 0;
  _$jscoverage['core/Range.js'][461] = 0;
  _$jscoverage['core/Range.js'][462] = 0;
  _$jscoverage['core/Range.js'][466] = 0;
  _$jscoverage['core/Range.js'][469] = 0;
  _$jscoverage['core/Range.js'][493] = 0;
  _$jscoverage['core/Range.js'][496] = 0;
  _$jscoverage['core/Range.js'][497] = 0;
  _$jscoverage['core/Range.js'][498] = 0;
  _$jscoverage['core/Range.js'][499] = 0;
  _$jscoverage['core/Range.js'][500] = 0;
  _$jscoverage['core/Range.js'][503] = 0;
  _$jscoverage['core/Range.js'][505] = 0;
  _$jscoverage['core/Range.js'][525] = 0;
  _$jscoverage['core/Range.js'][526] = 0;
  _$jscoverage['core/Range.js'][530] = 0;
  _$jscoverage['core/Range.js'][531] = 0;
  _$jscoverage['core/Range.js'][532] = 0;
  _$jscoverage['core/Range.js'][534] = 0;
  _$jscoverage['core/Range.js'][535] = 0;
  _$jscoverage['core/Range.js'][537] = 0;
  _$jscoverage['core/Range.js'][539] = 0;
  _$jscoverage['core/Range.js'][540] = 0;
  _$jscoverage['core/Range.js'][541] = 0;
  _$jscoverage['core/Range.js'][542] = 0;
  _$jscoverage['core/Range.js'][544] = 0;
  _$jscoverage['core/Range.js'][547] = 0;
  _$jscoverage['core/Range.js'][548] = 0;
  _$jscoverage['core/Range.js'][551] = 0;
  _$jscoverage['core/Range.js'][552] = 0;
  _$jscoverage['core/Range.js'][553] = 0;
  _$jscoverage['core/Range.js'][554] = 0;
  _$jscoverage['core/Range.js'][555] = 0;
  _$jscoverage['core/Range.js'][556] = 0;
  _$jscoverage['core/Range.js'][558] = 0;
  _$jscoverage['core/Range.js'][559] = 0;
  _$jscoverage['core/Range.js'][563] = 0;
  _$jscoverage['core/Range.js'][582] = 0;
  _$jscoverage['core/Range.js'][583] = 0;
  _$jscoverage['core/Range.js'][585] = 0;
  _$jscoverage['core/Range.js'][586] = 0;
  _$jscoverage['core/Range.js'][587] = 0;
  _$jscoverage['core/Range.js'][588] = 0;
  _$jscoverage['core/Range.js'][590] = 0;
  _$jscoverage['core/Range.js'][591] = 0;
  _$jscoverage['core/Range.js'][592] = 0;
  _$jscoverage['core/Range.js'][598] = 0;
  _$jscoverage['core/Range.js'][599] = 0;
  _$jscoverage['core/Range.js'][600] = 0;
  _$jscoverage['core/Range.js'][602] = 0;
  _$jscoverage['core/Range.js'][618] = 0;
  _$jscoverage['core/Range.js'][619] = 0;
  _$jscoverage['core/Range.js'][620] = 0;
  _$jscoverage['core/Range.js'][621] = 0;
  _$jscoverage['core/Range.js'][623] = 0;
  _$jscoverage['core/Range.js'][624] = 0;
  _$jscoverage['core/Range.js'][626] = 0;
  _$jscoverage['core/Range.js'][627] = 0;
  _$jscoverage['core/Range.js'][628] = 0;
  _$jscoverage['core/Range.js'][630] = 0;
  _$jscoverage['core/Range.js'][632] = 0;
  _$jscoverage['core/Range.js'][633] = 0;
  _$jscoverage['core/Range.js'][635] = 0;
  _$jscoverage['core/Range.js'][643] = 0;
  _$jscoverage['core/Range.js'][651] = 0;
  _$jscoverage['core/Range.js'][653] = 0;
  _$jscoverage['core/Range.js'][654] = 0;
  _$jscoverage['core/Range.js'][655] = 0;
  _$jscoverage['core/Range.js'][657] = 0;
  _$jscoverage['core/Range.js'][658] = 0;
  _$jscoverage['core/Range.js'][659] = 0;
  _$jscoverage['core/Range.js'][661] = 0;
  _$jscoverage['core/Range.js'][662] = 0;
  _$jscoverage['core/Range.js'][663] = 0;
  _$jscoverage['core/Range.js'][665] = 0;
  _$jscoverage['core/Range.js'][666] = 0;
  _$jscoverage['core/Range.js'][678] = 0;
  _$jscoverage['core/Range.js'][680] = 0;
  _$jscoverage['core/Range.js'][681] = 0;
  _$jscoverage['core/Range.js'][682] = 0;
  _$jscoverage['core/Range.js'][683] = 0;
  _$jscoverage['core/Range.js'][684] = 0;
  _$jscoverage['core/Range.js'][686] = 0;
  _$jscoverage['core/Range.js'][688] = 0;
  _$jscoverage['core/Range.js'][698] = 0;
  _$jscoverage['core/Range.js'][700] = 0;
  _$jscoverage['core/Range.js'][701] = 0;
  _$jscoverage['core/Range.js'][702] = 0;
  _$jscoverage['core/Range.js'][703] = 0;
  _$jscoverage['core/Range.js'][704] = 0;
  _$jscoverage['core/Range.js'][706] = 0;
  _$jscoverage['core/Range.js'][707] = 0;
  _$jscoverage['core/Range.js'][710] = 0;
  _$jscoverage['core/Range.js'][712] = 0;
  _$jscoverage['core/Range.js'][713] = 0;
  _$jscoverage['core/Range.js'][714] = 0;
  _$jscoverage['core/Range.js'][715] = 0;
  _$jscoverage['core/Range.js'][716] = 0;
  _$jscoverage['core/Range.js'][718] = 0;
  _$jscoverage['core/Range.js'][719] = 0;
  _$jscoverage['core/Range.js'][721] = 0;
  _$jscoverage['core/Range.js'][722] = 0;
  _$jscoverage['core/Range.js'][724] = 0;
  _$jscoverage['core/Range.js'][725] = 0;
  _$jscoverage['core/Range.js'][726] = 0;
  _$jscoverage['core/Range.js'][727] = 0;
  _$jscoverage['core/Range.js'][729] = 0;
  _$jscoverage['core/Range.js'][731] = 0;
  _$jscoverage['core/Range.js'][733] = 0;
  _$jscoverage['core/Range.js'][735] = 0;
  _$jscoverage['core/Range.js'][736] = 0;
  _$jscoverage['core/Range.js'][737] = 0;
  _$jscoverage['core/Range.js'][738] = 0;
  _$jscoverage['core/Range.js'][739] = 0;
  _$jscoverage['core/Range.js'][741] = 0;
  _$jscoverage['core/Range.js'][742] = 0;
  _$jscoverage['core/Range.js'][744] = 0;
  _$jscoverage['core/Range.js'][745] = 0;
  _$jscoverage['core/Range.js'][747] = 0;
  _$jscoverage['core/Range.js'][748] = 0;
  _$jscoverage['core/Range.js'][750] = 0;
  _$jscoverage['core/Range.js'][754] = 0;
  _$jscoverage['core/Range.js'][755] = 0;
  _$jscoverage['core/Range.js'][756] = 0;
  _$jscoverage['core/Range.js'][757] = 0;
  _$jscoverage['core/Range.js'][759] = 0;
  _$jscoverage['core/Range.js'][760] = 0;
  _$jscoverage['core/Range.js'][762] = 0;
  _$jscoverage['core/Range.js'][764] = 0;
  _$jscoverage['core/Range.js'][765] = 0;
  _$jscoverage['core/Range.js'][766] = 0;
  _$jscoverage['core/Range.js'][768] = 0;
  _$jscoverage['core/Range.js'][769] = 0;
  _$jscoverage['core/Range.js'][771] = 0;
  _$jscoverage['core/Range.js'][774] = 0;
  _$jscoverage['core/Range.js'][785] = 0;
  _$jscoverage['core/Range.js'][786] = 0;
  _$jscoverage['core/Range.js'][789] = 0;
  _$jscoverage['core/Range.js'][791] = 0;
  _$jscoverage['core/Range.js'][792] = 0;
  _$jscoverage['core/Range.js'][795] = 0;
  _$jscoverage['core/Range.js'][808] = 0;
  _$jscoverage['core/Range.js'][809] = 0;
  _$jscoverage['core/Range.js'][811] = 0;
  _$jscoverage['core/Range.js'][813] = 0;
  _$jscoverage['core/Range.js'][816] = 0;
  _$jscoverage['core/Range.js'][822] = 0;
  _$jscoverage['core/Range.js'][823] = 0;
  _$jscoverage['core/Range.js'][824] = 0;
  _$jscoverage['core/Range.js'][825] = 0;
  _$jscoverage['core/Range.js'][826] = 0;
  _$jscoverage['core/Range.js'][827] = 0;
  _$jscoverage['core/Range.js'][828] = 0;
  _$jscoverage['core/Range.js'][829] = 0;
  _$jscoverage['core/Range.js'][832] = 0;
  _$jscoverage['core/Range.js'][833] = 0;
  _$jscoverage['core/Range.js'][834] = 0;
  _$jscoverage['core/Range.js'][835] = 0;
  _$jscoverage['core/Range.js'][836] = 0;
  _$jscoverage['core/Range.js'][837] = 0;
  _$jscoverage['core/Range.js'][838] = 0;
  _$jscoverage['core/Range.js'][840] = 0;
  _$jscoverage['core/Range.js'][842] = 0;
  _$jscoverage['core/Range.js'][844] = 0;
  _$jscoverage['core/Range.js'][845] = 0;
  _$jscoverage['core/Range.js'][847] = 0;
  _$jscoverage['core/Range.js'][848] = 0;
  _$jscoverage['core/Range.js'][850] = 0;
  _$jscoverage['core/Range.js'][851] = 0;
  _$jscoverage['core/Range.js'][852] = 0;
  _$jscoverage['core/Range.js'][853] = 0;
  _$jscoverage['core/Range.js'][854] = 0;
  _$jscoverage['core/Range.js'][856] = 0;
  _$jscoverage['core/Range.js'][857] = 0;
  _$jscoverage['core/Range.js'][860] = 0;
  _$jscoverage['core/Range.js'][861] = 0;
  _$jscoverage['core/Range.js'][862] = 0;
  _$jscoverage['core/Range.js'][863] = 0;
  _$jscoverage['core/Range.js'][864] = 0;
  _$jscoverage['core/Range.js'][867] = 0;
  _$jscoverage['core/Range.js'][870] = 0;
  _$jscoverage['core/Range.js'][880] = 0;
  _$jscoverage['core/Range.js'][881] = 0;
  _$jscoverage['core/Range.js'][882] = 0;
  _$jscoverage['core/Range.js'][883] = 0;
  _$jscoverage['core/Range.js'][884] = 0;
  _$jscoverage['core/Range.js'][885] = 0;
  _$jscoverage['core/Range.js'][886] = 0;
  _$jscoverage['core/Range.js'][887] = 0;
  _$jscoverage['core/Range.js'][889] = 0;
  _$jscoverage['core/Range.js'][890] = 0;
  _$jscoverage['core/Range.js'][891] = 0;
  _$jscoverage['core/Range.js'][894] = 0;
  _$jscoverage['core/Range.js'][896] = 0;
  _$jscoverage['core/Range.js'][897] = 0;
  _$jscoverage['core/Range.js'][898] = 0;
  _$jscoverage['core/Range.js'][899] = 0;
  _$jscoverage['core/Range.js'][901] = 0;
  _$jscoverage['core/Range.js'][902] = 0;
  _$jscoverage['core/Range.js'][903] = 0;
  _$jscoverage['core/Range.js'][906] = 0;
  _$jscoverage['core/Range.js'][908] = 0;
  _$jscoverage['core/Range.js'][911] = 0;
  _$jscoverage['core/Range.js'][912] = 0;
  _$jscoverage['core/Range.js'][913] = 0;
  _$jscoverage['core/Range.js'][914] = 0;
  _$jscoverage['core/Range.js'][915] = 0;
  _$jscoverage['core/Range.js'][916] = 0;
  _$jscoverage['core/Range.js'][918] = 0;
  _$jscoverage['core/Range.js'][919] = 0;
  _$jscoverage['core/Range.js'][920] = 0;
  _$jscoverage['core/Range.js'][921] = 0;
  _$jscoverage['core/Range.js'][922] = 0;
  _$jscoverage['core/Range.js'][923] = 0;
  _$jscoverage['core/Range.js'][925] = 0;
  _$jscoverage['core/Range.js'][926] = 0;
  _$jscoverage['core/Range.js'][928] = 0;
  _$jscoverage['core/Range.js'][929] = 0;
  _$jscoverage['core/Range.js'][930] = 0;
  _$jscoverage['core/Range.js'][932] = 0;
  _$jscoverage['core/Range.js'][933] = 0;
  _$jscoverage['core/Range.js'][935] = 0;
  _$jscoverage['core/Range.js'][937] = 0;
  _$jscoverage['core/Range.js'][947] = 0;
  _$jscoverage['core/Range.js'][948] = 0;
  _$jscoverage['core/Range.js'][949] = 0;
  _$jscoverage['core/Range.js'][950] = 0;
  _$jscoverage['core/Range.js'][951] = 0;
  _$jscoverage['core/Range.js'][952] = 0;
  _$jscoverage['core/Range.js'][953] = 0;
  _$jscoverage['core/Range.js'][957] = 0;
  _$jscoverage['core/Range.js'][965] = 0;
  _$jscoverage['core/Range.js'][966] = 0;
  _$jscoverage['core/Range.js'][967] = 0;
  _$jscoverage['core/Range.js'][968] = 0;
  _$jscoverage['core/Range.js'][969] = 0;
  _$jscoverage['core/Range.js'][970] = 0;
  _$jscoverage['core/Range.js'][971] = 0;
  _$jscoverage['core/Range.js'][972] = 0;
  _$jscoverage['core/Range.js'][973] = 0;
  _$jscoverage['core/Range.js'][975] = 0;
  _$jscoverage['core/Range.js'][977] = 0;
  _$jscoverage['core/Range.js'][980] = 0;
  _$jscoverage['core/Range.js'][981] = 0;
  _$jscoverage['core/Range.js'][982] = 0;
  _$jscoverage['core/Range.js'][983] = 0;
  _$jscoverage['core/Range.js'][984] = 0;
  _$jscoverage['core/Range.js'][985] = 0;
  _$jscoverage['core/Range.js'][986] = 0;
  _$jscoverage['core/Range.js'][987] = 0;
  _$jscoverage['core/Range.js'][989] = 0;
  _$jscoverage['core/Range.js'][991] = 0;
  _$jscoverage['core/Range.js'][993] = 0;
  _$jscoverage['core/Range.js'][994] = 0;
  _$jscoverage['core/Range.js'][995] = 0;
  _$jscoverage['core/Range.js'][997] = 0;
  _$jscoverage['core/Range.js'][998] = 0;
  _$jscoverage['core/Range.js'][999] = 0;
  _$jscoverage['core/Range.js'][1000] = 0;
  _$jscoverage['core/Range.js'][1001] = 0;
  _$jscoverage['core/Range.js'][1002] = 0;
  _$jscoverage['core/Range.js'][1005] = 0;
  _$jscoverage['core/Range.js'][1006] = 0;
  _$jscoverage['core/Range.js'][1008] = 0;
  _$jscoverage['core/Range.js'][1009] = 0;
  _$jscoverage['core/Range.js'][1012] = 0;
  _$jscoverage['core/Range.js'][1014] = 0;
  _$jscoverage['core/Range.js'][1016] = 0;
  _$jscoverage['core/Range.js'][1017] = 0;
  _$jscoverage['core/Range.js'][1018] = 0;
  _$jscoverage['core/Range.js'][1021] = 0;
  _$jscoverage['core/Range.js'][1022] = 0;
  _$jscoverage['core/Range.js'][1024] = 0;
  _$jscoverage['core/Range.js'][1029] = 0;
  _$jscoverage['core/Range.js'][1030] = 0;
  _$jscoverage['core/Range.js'][1031] = 0;
  _$jscoverage['core/Range.js'][1034] = 0;
  _$jscoverage['core/Range.js'][1046] = 0;
  _$jscoverage['core/Range.js'][1047] = 0;
  _$jscoverage['core/Range.js'][1048] = 0;
  _$jscoverage['core/Range.js'][1051] = 0;
  _$jscoverage['core/Range.js'][1058] = 0;
  _$jscoverage['core/Range.js'][1060] = 0;
  _$jscoverage['core/Range.js'][1061] = 0;
  _$jscoverage['core/Range.js'][1062] = 0;
  _$jscoverage['core/Range.js'][1063] = 0;
  _$jscoverage['core/Range.js'][1064] = 0;
  _$jscoverage['core/Range.js'][1065] = 0;
  _$jscoverage['core/Range.js'][1068] = 0;
  _$jscoverage['core/Range.js'][1069] = 0;
  _$jscoverage['core/Range.js'][1070] = 0;
  _$jscoverage['core/Range.js'][1071] = 0;
  _$jscoverage['core/Range.js'][1073] = 0;
  _$jscoverage['core/Range.js'][1074] = 0;
  _$jscoverage['core/Range.js'][1075] = 0;
  _$jscoverage['core/Range.js'][1079] = 0;
  _$jscoverage['core/Range.js'][1080] = 0;
  _$jscoverage['core/Range.js'][1081] = 0;
  _$jscoverage['core/Range.js'][1083] = 0;
  _$jscoverage['core/Range.js'][1086] = 0;
  _$jscoverage['core/Range.js'][1091] = 0;
  _$jscoverage['core/Range.js'][1092] = 0;
  _$jscoverage['core/Range.js'][1093] = 0;
  _$jscoverage['core/Range.js'][1094] = 0;
  _$jscoverage['core/Range.js'][1096] = 0;
  _$jscoverage['core/Range.js'][1104] = 0;
  _$jscoverage['core/Range.js'][1105] = 0;
  _$jscoverage['core/Range.js'][1108] = 0;
  _$jscoverage['core/Range.js'][1109] = 0;
  _$jscoverage['core/Range.js'][1110] = 0;
  _$jscoverage['core/Range.js'][1111] = 0;
  _$jscoverage['core/Range.js'][1112] = 0;
  _$jscoverage['core/Range.js'][1115] = 0;
  _$jscoverage['core/Range.js'][1116] = 0;
  _$jscoverage['core/Range.js'][1119] = 0;
  _$jscoverage['core/Range.js'][1121] = 0;
  _$jscoverage['core/Range.js'][1124] = 0;
  _$jscoverage['core/Range.js'][1126] = 0;
  _$jscoverage['core/Range.js'][1127] = 0;
  _$jscoverage['core/Range.js'][1128] = 0;
  _$jscoverage['core/Range.js'][1130] = 0;
  _$jscoverage['core/Range.js'][1131] = 0;
  _$jscoverage['core/Range.js'][1133] = 0;
  _$jscoverage['core/Range.js'][1135] = 0;
  _$jscoverage['core/Range.js'][1136] = 0;
  _$jscoverage['core/Range.js'][1137] = 0;
  _$jscoverage['core/Range.js'][1138] = 0;
  _$jscoverage['core/Range.js'][1139] = 0;
  _$jscoverage['core/Range.js'][1140] = 0;
  _$jscoverage['core/Range.js'][1142] = 0;
  _$jscoverage['core/Range.js'][1145] = 0;
  _$jscoverage['core/Range.js'][1147] = 0;
  _$jscoverage['core/Range.js'][1148] = 0;
  _$jscoverage['core/Range.js'][1149] = 0;
  _$jscoverage['core/Range.js'][1151] = 0;
  _$jscoverage['core/Range.js'][1152] = 0;
  _$jscoverage['core/Range.js'][1153] = 0;
  _$jscoverage['core/Range.js'][1154] = 0;
  _$jscoverage['core/Range.js'][1155] = 0;
  _$jscoverage['core/Range.js'][1156] = 0;
  _$jscoverage['core/Range.js'][1158] = 0;
  _$jscoverage['core/Range.js'][1159] = 0;
  _$jscoverage['core/Range.js'][1160] = 0;
  _$jscoverage['core/Range.js'][1161] = 0;
  _$jscoverage['core/Range.js'][1164] = 0;
  _$jscoverage['core/Range.js'][1171] = 0;
  _$jscoverage['core/Range.js'][1173] = 0;
  _$jscoverage['core/Range.js'][1174] = 0;
  _$jscoverage['core/Range.js'][1176] = 0;
  _$jscoverage['core/Range.js'][1177] = 0;
  _$jscoverage['core/Range.js'][1179] = 0;
  _$jscoverage['core/Range.js'][1180] = 0;
  _$jscoverage['core/Range.js'][1181] = 0;
  _$jscoverage['core/Range.js'][1183] = 0;
  _$jscoverage['core/Range.js'][1186] = 0;
  _$jscoverage['core/Range.js'][1187] = 0;
  _$jscoverage['core/Range.js'][1188] = 0;
  _$jscoverage['core/Range.js'][1190] = 0;
  _$jscoverage['core/Range.js'][1191] = 0;
  _$jscoverage['core/Range.js'][1192] = 0;
  _$jscoverage['core/Range.js'][1193] = 0;
  _$jscoverage['core/Range.js'][1194] = 0;
  _$jscoverage['core/Range.js'][1195] = 0;
  _$jscoverage['core/Range.js'][1196] = 0;
  _$jscoverage['core/Range.js'][1199] = 0;
  _$jscoverage['core/Range.js'][1200] = 0;
  _$jscoverage['core/Range.js'][1201] = 0;
  _$jscoverage['core/Range.js'][1203] = 0;
  _$jscoverage['core/Range.js'][1206] = 0;
  _$jscoverage['core/Range.js'][1207] = 0;
  _$jscoverage['core/Range.js'][1209] = 0;
  _$jscoverage['core/Range.js'][1213] = 0;
  _$jscoverage['core/Range.js'][1214] = 0;
  _$jscoverage['core/Range.js'][1215] = 0;
  _$jscoverage['core/Range.js'][1218] = 0;
  _$jscoverage['core/Range.js'][1219] = 0;
  _$jscoverage['core/Range.js'][1220] = 0;
  _$jscoverage['core/Range.js'][1221] = 0;
  _$jscoverage['core/Range.js'][1224] = 0;
  _$jscoverage['core/Range.js'][1228] = 0;
  _$jscoverage['core/Range.js'][1229] = 0;
  _$jscoverage['core/Range.js'][1230] = 0;
  _$jscoverage['core/Range.js'][1233] = 0;
  _$jscoverage['core/Range.js'][1234] = 0;
  _$jscoverage['core/Range.js'][1235] = 0;
  _$jscoverage['core/Range.js'][1236] = 0;
  _$jscoverage['core/Range.js'][1238] = 0;
}
_$jscoverage['core/Range.js'].source = ["<span class=\"c\">///import editor.js</span>","<span class=\"c\">///import core/utils.js</span>","<span class=\"c\">///import core/browser.js</span>","<span class=\"c\">///import core/dom/dom.js</span>","<span class=\"c\">///import core/dom/dtd.js</span>","<span class=\"c\">///import core/dom/domUtils.js</span>","<span class=\"c\">/**</span>","<span class=\"c\"> * @file</span>","<span class=\"c\"> * @name UE.dom.Range</span>","<span class=\"c\"> * @anthor zhanyi</span>","<span class=\"c\"> * @short Range</span>","<span class=\"c\"> * @import editor.js,core/utils.js,core/browser.js,core/dom/domUtils.js,core/dom/dtd.js</span>","<span class=\"c\"> * @desc Range&#33539;&#22260;&#23454;&#29616;&#31867;&#65292;&#26412;&#31867;&#26159;UEditor&#24213;&#23618;&#26680;&#24515;&#31867;&#65292;&#32479;&#19968;w3cRange&#21644;ieRange&#20043;&#38388;&#30340;&#24046;&#24322;&#65292;&#21253;&#25324;&#25509;&#21475;&#21644;&#23646;&#24615;</span>","<span class=\"c\"> */</span>","<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> guid <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span>","        fillChar <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>fillChar<span class=\"k\">,</span>","        fillData<span class=\"k\">;</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * &#26356;&#26032;range&#30340;collapse&#29366;&#24577;</span>","<span class=\"c\">     * @param  {Range}   range    range&#23545;&#35937;</span>","<span class=\"c\">     */</span>","    <span class=\"k\">function</span> updateCollapse<span class=\"k\">(</span>range<span class=\"k\">)</span> <span class=\"k\">{</span>","        range<span class=\"k\">.</span>collapsed <span class=\"k\">=</span>","            range<span class=\"k\">.</span>startContainer <span class=\"k\">&amp;&amp;</span> range<span class=\"k\">.</span>endContainer <span class=\"k\">&amp;&amp;</span>","                range<span class=\"k\">.</span>startContainer <span class=\"k\">===</span> range<span class=\"k\">.</span>endContainer <span class=\"k\">&amp;&amp;</span>","                range<span class=\"k\">.</span>startOffset <span class=\"k\">==</span> range<span class=\"k\">.</span>endOffset<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> selectOneNode<span class=\"k\">(</span>rng<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">!</span>rng<span class=\"k\">.</span>collapsed <span class=\"k\">&amp;&amp;</span> rng<span class=\"k\">.</span>startContainer<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">1</span> <span class=\"k\">&amp;&amp;</span> rng<span class=\"k\">.</span>startContainer <span class=\"k\">===</span> rng<span class=\"k\">.</span>endContainer <span class=\"k\">&amp;&amp;</span> rng<span class=\"k\">.</span>endOffset <span class=\"k\">-</span> rng<span class=\"k\">.</span>startOffset <span class=\"k\">==</span> <span class=\"s\">1</span>","    <span class=\"k\">}</span>","    <span class=\"k\">function</span> setEndPoint<span class=\"k\">(</span>toStart<span class=\"k\">,</span> node<span class=\"k\">,</span> offset<span class=\"k\">,</span> range<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">//&#22914;&#26524;node&#26159;&#33258;&#38381;&#21512;&#26631;&#31614;&#35201;&#22788;&#29702;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>node<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">1</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>dtd<span class=\"k\">.</span>$empty<span class=\"k\">[</span>node<span class=\"k\">.</span>tagName<span class=\"k\">]</span> <span class=\"k\">||</span> dtd<span class=\"k\">.</span>$nonChild<span class=\"k\">[</span>node<span class=\"k\">.</span>tagName<span class=\"k\">]))</span> <span class=\"k\">{</span>","            offset <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>getNodeIndex<span class=\"k\">(</span>node<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"k\">(</span>toStart <span class=\"k\">?</span> <span class=\"s\">0</span> <span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">);</span>","            node <span class=\"k\">=</span> node<span class=\"k\">.</span>parentNode<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>toStart<span class=\"k\">)</span> <span class=\"k\">{</span>","            range<span class=\"k\">.</span>startContainer <span class=\"k\">=</span> node<span class=\"k\">;</span>","            range<span class=\"k\">.</span>startOffset <span class=\"k\">=</span> offset<span class=\"k\">;</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span>range<span class=\"k\">.</span>endContainer<span class=\"k\">)</span> <span class=\"k\">{</span>","                range<span class=\"k\">.</span>collapse<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            range<span class=\"k\">.</span>endContainer <span class=\"k\">=</span> node<span class=\"k\">;</span>","            range<span class=\"k\">.</span>endOffset <span class=\"k\">=</span> offset<span class=\"k\">;</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span>range<span class=\"k\">.</span>startContainer<span class=\"k\">)</span> <span class=\"k\">{</span>","                range<span class=\"k\">.</span>collapse<span class=\"k\">(</span><span class=\"k\">false</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        updateCollapse<span class=\"k\">(</span>range<span class=\"k\">);</span>","        <span class=\"k\">return</span> range<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> execContentsAction<span class=\"k\">(</span>range<span class=\"k\">,</span> action<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">//&#35843;&#25972;&#36793;&#30028;</span>","        <span class=\"c\">//range.includeBookmark();</span>","        <span class=\"k\">var</span> start <span class=\"k\">=</span> range<span class=\"k\">.</span>startContainer<span class=\"k\">,</span>","            end <span class=\"k\">=</span> range<span class=\"k\">.</span>endContainer<span class=\"k\">,</span>","            startOffset <span class=\"k\">=</span> range<span class=\"k\">.</span>startOffset<span class=\"k\">,</span>","            endOffset <span class=\"k\">=</span> range<span class=\"k\">.</span>endOffset<span class=\"k\">,</span>","            doc <span class=\"k\">=</span> range<span class=\"k\">.</span>document<span class=\"k\">,</span>","            frag <span class=\"k\">=</span> doc<span class=\"k\">.</span>createDocumentFragment<span class=\"k\">(),</span>","            tmpStart<span class=\"k\">,</span> tmpEnd<span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>start<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            start <span class=\"k\">=</span> start<span class=\"k\">.</span>childNodes<span class=\"k\">[</span>startOffset<span class=\"k\">]</span> <span class=\"k\">||</span> <span class=\"k\">(</span>tmpStart <span class=\"k\">=</span> start<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>doc<span class=\"k\">.</span>createTextNode<span class=\"k\">(</span><span class=\"s\">''</span><span class=\"k\">)));</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>end<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            end <span class=\"k\">=</span> end<span class=\"k\">.</span>childNodes<span class=\"k\">[</span>endOffset<span class=\"k\">]</span> <span class=\"k\">||</span> <span class=\"k\">(</span>tmpEnd <span class=\"k\">=</span> end<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>doc<span class=\"k\">.</span>createTextNode<span class=\"k\">(</span><span class=\"s\">''</span><span class=\"k\">)));</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>start <span class=\"k\">===</span> end <span class=\"k\">&amp;&amp;</span> start<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">3</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            frag<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>doc<span class=\"k\">.</span>createTextNode<span class=\"k\">(</span>start<span class=\"k\">.</span>substringData<span class=\"k\">(</span>startOffset<span class=\"k\">,</span> endOffset <span class=\"k\">-</span> startOffset<span class=\"k\">)));</span>","            <span class=\"c\">//is not clone</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>action<span class=\"k\">)</span> <span class=\"k\">{</span>","                start<span class=\"k\">.</span>deleteData<span class=\"k\">(</span>startOffset<span class=\"k\">,</span> endOffset <span class=\"k\">-</span> startOffset<span class=\"k\">);</span>","                range<span class=\"k\">.</span>collapse<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> frag<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">var</span> current<span class=\"k\">,</span> currentLevel<span class=\"k\">,</span> clone <span class=\"k\">=</span> frag<span class=\"k\">,</span>","            startParents <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>findParents<span class=\"k\">(</span>start<span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">),</span> endParents <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>findParents<span class=\"k\">(</span>end<span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">);</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> startParents<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">==</span> endParents<span class=\"k\">[</span>i<span class=\"k\">];)</span> <span class=\"k\">{</span>","            i<span class=\"k\">++;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> j <span class=\"k\">=</span> i<span class=\"k\">,</span> si<span class=\"k\">;</span> si <span class=\"k\">=</span> startParents<span class=\"k\">[</span>j<span class=\"k\">];</span> j<span class=\"k\">++)</span> <span class=\"k\">{</span>","            current <span class=\"k\">=</span> si<span class=\"k\">.</span>nextSibling<span class=\"k\">;</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>si <span class=\"k\">==</span> start<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(!</span>tmpStart<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>range<span class=\"k\">.</span>startContainer<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">3</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        clone<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>doc<span class=\"k\">.</span>createTextNode<span class=\"k\">(</span>start<span class=\"k\">.</span>nodeValue<span class=\"k\">.</span>slice<span class=\"k\">(</span>startOffset<span class=\"k\">)));</span>","                        <span class=\"c\">//is not clone</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span>action<span class=\"k\">)</span> <span class=\"k\">{</span>","                            start<span class=\"k\">.</span>deleteData<span class=\"k\">(</span>startOffset<span class=\"k\">,</span> start<span class=\"k\">.</span>nodeValue<span class=\"k\">.</span>length <span class=\"k\">-</span> startOffset<span class=\"k\">);</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        clone<span class=\"k\">.</span>appendChild<span class=\"k\">(!</span>action <span class=\"k\">?</span> start<span class=\"k\">.</span>cloneNode<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">)</span> <span class=\"k\">:</span> start<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                currentLevel <span class=\"k\">=</span> si<span class=\"k\">.</span>cloneNode<span class=\"k\">(</span><span class=\"k\">false</span><span class=\"k\">);</span>","                clone<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>currentLevel<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">while</span> <span class=\"k\">(</span>current<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>current <span class=\"k\">===</span> end <span class=\"k\">||</span> current <span class=\"k\">===</span> endParents<span class=\"k\">[</span>j<span class=\"k\">])</span> <span class=\"k\">{</span>","                    <span class=\"k\">break</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","                si <span class=\"k\">=</span> current<span class=\"k\">.</span>nextSibling<span class=\"k\">;</span>","                clone<span class=\"k\">.</span>appendChild<span class=\"k\">(!</span>action <span class=\"k\">?</span> current<span class=\"k\">.</span>cloneNode<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">)</span> <span class=\"k\">:</span> current<span class=\"k\">);</span>","                current <span class=\"k\">=</span> si<span class=\"k\">;</span>","            <span class=\"k\">}</span>","            clone <span class=\"k\">=</span> currentLevel<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        clone <span class=\"k\">=</span> frag<span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>startParents<span class=\"k\">[</span>i<span class=\"k\">])</span> <span class=\"k\">{</span>","            clone<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>startParents<span class=\"k\">[</span>i <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">].</span>cloneNode<span class=\"k\">(</span><span class=\"k\">false</span><span class=\"k\">));</span>","            clone <span class=\"k\">=</span> clone<span class=\"k\">.</span>firstChild<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> j <span class=\"k\">=</span> i<span class=\"k\">,</span> ei<span class=\"k\">;</span> ei <span class=\"k\">=</span> endParents<span class=\"k\">[</span>j<span class=\"k\">];</span> j<span class=\"k\">++)</span> <span class=\"k\">{</span>","            current <span class=\"k\">=</span> ei<span class=\"k\">.</span>previousSibling<span class=\"k\">;</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>ei <span class=\"k\">==</span> end<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(!</span>tmpEnd <span class=\"k\">&amp;&amp;</span> range<span class=\"k\">.</span>endContainer<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">3</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    clone<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>doc<span class=\"k\">.</span>createTextNode<span class=\"k\">(</span>end<span class=\"k\">.</span>substringData<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> endOffset<span class=\"k\">)));</span>","                    <span class=\"c\">//is not clone</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>action<span class=\"k\">)</span> <span class=\"k\">{</span>","                        end<span class=\"k\">.</span>deleteData<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> endOffset<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                currentLevel <span class=\"k\">=</span> ei<span class=\"k\">.</span>cloneNode<span class=\"k\">(</span><span class=\"k\">false</span><span class=\"k\">);</span>","                clone<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>currentLevel<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"c\">//&#22914;&#26524;&#20004;&#31471;&#21516;&#32423;&#65292;&#21491;&#36793;&#31532;&#19968;&#27425;&#24050;&#32463;&#34987;&#24320;&#22987;&#20570;&#20102;</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>j <span class=\"k\">!=</span> i <span class=\"k\">||</span> <span class=\"k\">!</span>startParents<span class=\"k\">[</span>i<span class=\"k\">])</span> <span class=\"k\">{</span>","                <span class=\"k\">while</span> <span class=\"k\">(</span>current<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>current <span class=\"k\">===</span> start<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">break</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    ei <span class=\"k\">=</span> current<span class=\"k\">.</span>previousSibling<span class=\"k\">;</span>","                    clone<span class=\"k\">.</span>insertBefore<span class=\"k\">(!</span>action <span class=\"k\">?</span> current<span class=\"k\">.</span>cloneNode<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">)</span> <span class=\"k\">:</span> current<span class=\"k\">,</span> clone<span class=\"k\">.</span>firstChild<span class=\"k\">);</span>","                    current <span class=\"k\">=</span> ei<span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            clone <span class=\"k\">=</span> currentLevel<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>action<span class=\"k\">)</span> <span class=\"k\">{</span>","            range<span class=\"k\">.</span>setStartBefore<span class=\"k\">(!</span>endParents<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">?</span> endParents<span class=\"k\">[</span>i <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">:</span> <span class=\"k\">!</span>startParents<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">?</span> startParents<span class=\"k\">[</span>i <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">:</span> endParents<span class=\"k\">[</span>i<span class=\"k\">]).</span>collapse<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","        tmpStart <span class=\"k\">&amp;&amp;</span> domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>tmpStart<span class=\"k\">);</span>","        tmpEnd <span class=\"k\">&amp;&amp;</span> domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>tmpEnd<span class=\"k\">);</span>","        <span class=\"k\">return</span> frag<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * @name Range</span>","<span class=\"c\">     * @grammar new UE.dom.Range(document)  =&gt; Range &#23454;&#20363;</span>","<span class=\"c\">     * @desc &#21019;&#24314;&#19968;&#20010;&#36319;document&#32465;&#23450;&#30340;&#31354;&#30340;Range&#23454;&#20363;</span>","<span class=\"c\">     * - ***startContainer*** &#24320;&#22987;&#36793;&#30028;&#30340;&#23481;&#22120;&#33410;&#28857;,&#21487;&#20197;&#26159;elementNode&#25110;&#32773;&#26159;textNode</span>","<span class=\"c\">     * - ***startOffset*** &#23481;&#22120;&#33410;&#28857;&#20013;&#30340;&#20559;&#31227;&#37327;&#65292;&#22914;&#26524;&#26159;elementNode&#23601;&#26159;childNodes&#20013;&#30340;&#31532;&#20960;&#20010;&#65292;&#22914;&#26524;&#26159;textNode&#23601;&#26159;nodeValue&#30340;&#31532;&#20960;&#20010;&#23383;&#31526;</span>","<span class=\"c\">     * - ***endContainer*** &#32467;&#26463;&#36793;&#30028;&#30340;&#23481;&#22120;&#33410;&#28857;,&#21487;&#20197;&#26159;elementNode&#25110;&#32773;&#26159;textNode</span>","<span class=\"c\">     * - ***endOffset*** &#23481;&#22120;&#33410;&#28857;&#20013;&#30340;&#20559;&#31227;&#37327;&#65292;&#22914;&#26524;&#26159;elementNode&#23601;&#26159;childNodes&#20013;&#30340;&#31532;&#20960;&#20010;&#65292;&#22914;&#26524;&#26159;textNode&#23601;&#26159;nodeValue&#30340;&#31532;&#20960;&#20010;&#23383;&#31526;</span>","<span class=\"c\">     * - ***document*** &#36319;range&#20851;&#32852;&#30340;document&#23545;&#35937;</span>","<span class=\"c\">     * - ***collapsed*** &#26159;&#21542;&#26159;&#38381;&#21512;&#29366;&#24577;</span>","<span class=\"c\">     */</span>","    <span class=\"k\">var</span> Range <span class=\"k\">=</span> dom<span class=\"k\">.</span>Range <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>document<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> me <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","        me<span class=\"k\">.</span>startContainer <span class=\"k\">=</span>","            me<span class=\"k\">.</span>startOffset <span class=\"k\">=</span>","                me<span class=\"k\">.</span>endContainer <span class=\"k\">=</span>","                    me<span class=\"k\">.</span>endOffset <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        me<span class=\"k\">.</span>document <span class=\"k\">=</span> document<span class=\"k\">;</span>","        me<span class=\"k\">.</span>collapsed <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * &#21024;&#38500;fillData</span>","<span class=\"c\">     * @param doc</span>","<span class=\"c\">     * @param excludeNode</span>","<span class=\"c\">     */</span>","    <span class=\"k\">function</span> removeFillData<span class=\"k\">(</span>doc<span class=\"k\">,</span> excludeNode<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">try</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>fillData <span class=\"k\">&amp;&amp;</span> domUtils<span class=\"k\">.</span>inDoc<span class=\"k\">(</span>fillData<span class=\"k\">,</span> doc<span class=\"k\">))</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(!</span>fillData<span class=\"k\">.</span>nodeValue<span class=\"k\">.</span>replace<span class=\"k\">(</span>fillCharReg<span class=\"k\">,</span> <span class=\"s\">''</span><span class=\"k\">).</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> tmpNode <span class=\"k\">=</span> fillData<span class=\"k\">.</span>parentNode<span class=\"k\">;</span>","                    domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>fillData<span class=\"k\">);</span>","                    <span class=\"k\">while</span> <span class=\"k\">(</span>tmpNode <span class=\"k\">&amp;&amp;</span> domUtils<span class=\"k\">.</span>isEmptyInlineElement<span class=\"k\">(</span>tmpNode<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span>","                        <span class=\"c\">//safari&#30340;contains&#26377;bug</span>","                        <span class=\"k\">(</span>browser<span class=\"k\">.</span>safari <span class=\"k\">?</span> <span class=\"k\">!(</span>domUtils<span class=\"k\">.</span>getPosition<span class=\"k\">(</span>tmpNode<span class=\"k\">,</span>excludeNode<span class=\"k\">)</span> <span class=\"k\">&amp;</span> domUtils<span class=\"k\">.</span>POSITION_CONTAINS<span class=\"k\">)</span> <span class=\"k\">:</span> <span class=\"k\">!</span>tmpNode<span class=\"k\">.</span>contains<span class=\"k\">(</span>excludeNode<span class=\"k\">))</span>","                        <span class=\"k\">)</span> <span class=\"k\">{</span>","                        fillData <span class=\"k\">=</span> tmpNode<span class=\"k\">.</span>parentNode<span class=\"k\">;</span>","                        domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>tmpNode<span class=\"k\">);</span>","                        tmpNode <span class=\"k\">=</span> fillData<span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    fillData<span class=\"k\">.</span>nodeValue <span class=\"k\">=</span> fillData<span class=\"k\">.</span>nodeValue<span class=\"k\">.</span>replace<span class=\"k\">(</span>fillCharReg<span class=\"k\">,</span> <span class=\"s\">''</span><span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @param node</span>","<span class=\"c\">     * @param dir</span>","<span class=\"c\">     */</span>","    <span class=\"k\">function</span> mergeSibling<span class=\"k\">(</span>node<span class=\"k\">,</span> dir<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> tmpNode<span class=\"k\">;</span>","        node <span class=\"k\">=</span> node<span class=\"k\">[</span>dir<span class=\"k\">];</span>","        <span class=\"k\">while</span> <span class=\"k\">(</span>node <span class=\"k\">&amp;&amp;</span> domUtils<span class=\"k\">.</span>isFillChar<span class=\"k\">(</span>node<span class=\"k\">))</span> <span class=\"k\">{</span>","            tmpNode <span class=\"k\">=</span> node<span class=\"k\">[</span>dir<span class=\"k\">];</span>","            domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>node<span class=\"k\">);</span>","            node <span class=\"k\">=</span> tmpNode<span class=\"k\">;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    Range<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * @name cloneContents</span>","<span class=\"c\">         * @grammar range.cloneContents()  =&gt; DocumentFragment</span>","<span class=\"c\">         * @desc &#20811;&#38534;&#36873;&#20013;&#30340;&#20869;&#23481;&#21040;&#19968;&#20010;fragment&#37324;&#65292;&#22914;&#26524;&#36873;&#21306;&#26159;&#31354;&#30340;&#23558;&#36820;&#22238;null</span>","<span class=\"c\">         */</span>","        cloneContents<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>collapsed <span class=\"k\">?</span> <span class=\"k\">null</span> <span class=\"k\">:</span> execContentsAction<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * @name deleteContents</span>","<span class=\"c\">         * @grammar range.deleteContents()  =&gt; Range</span>","<span class=\"c\">         * @desc &#21024;&#38500;&#24403;&#21069;&#36873;&#21306;&#33539;&#22260;&#20013;&#30340;&#25152;&#26377;&#20869;&#23481;&#24182;&#36820;&#22238;range&#23454;&#20363;&#65292;&#36825;&#26102;&#30340;range&#24050;&#32463;&#21464;&#25104;&#20102;&#38381;&#21512;&#29366;&#24577;</span>","<span class=\"c\">         * @example</span>","<span class=\"c\">         * DOM Element :</span>","<span class=\"c\">         * &lt;b&gt;x&lt;i&gt;x[x&lt;i&gt;xx]x&lt;/b&gt;</span>","<span class=\"c\">         * //&#25191;&#34892;&#26041;&#27861;&#21518;</span>","<span class=\"c\">         * &lt;b&gt;x&lt;i&gt;x&lt;i&gt;|x&lt;/b&gt;</span>","<span class=\"c\">         * &#27880;&#24847;range&#25913;&#21464;&#20102;</span>","<span class=\"c\">         * range.startContainer =&gt; b</span>","<span class=\"c\">         * range.startOffset  =&gt; 2</span>","<span class=\"c\">         * range.endContainer =&gt; b</span>","<span class=\"c\">         * range.endOffset =&gt; 2</span>","<span class=\"c\">         * range.collapsed =&gt; true</span>","<span class=\"c\">         */</span>","        deleteContents<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> txt<span class=\"k\">;</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>collapsed<span class=\"k\">)</span> <span class=\"k\">{</span>","                execContentsAction<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>browser<span class=\"k\">.</span>webkit<span class=\"k\">)</span> <span class=\"k\">{</span>","                txt <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>startContainer<span class=\"k\">;</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>txt<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">3</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>txt<span class=\"k\">.</span>nodeValue<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>setStartBefore<span class=\"k\">(</span>txt<span class=\"k\">).</span>collapse<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","                    domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>txt<span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * @name extractContents</span>","<span class=\"c\">         * @grammar range.extractContents()  =&gt; DocumentFragment</span>","<span class=\"c\">         * @desc &#23558;&#24403;&#21069;&#30340;&#20869;&#23481;&#25918;&#21040;&#19968;&#20010;fragment&#37324;&#24182;&#36820;&#22238;&#36825;&#20010;fragment&#65292;&#36825;&#26102;&#30340;range&#24050;&#32463;&#21464;&#25104;&#20102;&#38381;&#21512;&#29366;&#24577;</span>","<span class=\"c\">         * @example</span>","<span class=\"c\">         * DOM Element :</span>","<span class=\"c\">         * &lt;b&gt;x&lt;i&gt;x[x&lt;i&gt;xx]x&lt;/b&gt;</span>","<span class=\"c\">         * //&#25191;&#34892;&#26041;&#27861;&#21518;</span>","<span class=\"c\">         * &#36820;&#22238;&#30340;fragment&#37324;&#30340; dom&#32467;&#26500;&#26159;</span>","<span class=\"c\">         * &lt;i&gt;x&lt;i&gt;xx</span>","<span class=\"c\">         * dom&#26641;&#19978;&#30340;&#32467;&#26500;&#26159;</span>","<span class=\"c\">         * &lt;b&gt;x&lt;i&gt;x&lt;i&gt;|x&lt;/b&gt;</span>","<span class=\"c\">         * &#27880;&#24847;range&#25913;&#21464;&#20102;</span>","<span class=\"c\">         * range.startContainer =&gt; b</span>","<span class=\"c\">         * range.startOffset  =&gt; 2</span>","<span class=\"c\">         * range.endContainer =&gt; b</span>","<span class=\"c\">         * range.endOffset =&gt; 2</span>","<span class=\"c\">         * range.collapsed =&gt; true</span>","<span class=\"c\">         */</span>","        extractContents<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>collapsed <span class=\"k\">?</span> <span class=\"k\">null</span> <span class=\"k\">:</span> execContentsAction<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> <span class=\"s\">2</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * @name  setStart</span>","<span class=\"c\">         * @grammar range.setStart(node,offset)  =&gt; Range</span>","<span class=\"c\">         * @desc    &#35774;&#32622;range&#30340;&#24320;&#22987;&#20301;&#32622;&#20301;&#20110;node&#33410;&#28857;&#20869;&#65292;&#20559;&#31227;&#37327;&#20026;offset</span>","<span class=\"c\">         * &#22914;&#26524;node&#26159;elementNode&#37027;offset&#25351;&#30340;&#26159;childNodes&#20013;&#30340;&#31532;&#20960;&#20010;&#65292;&#22914;&#26524;&#26159;textNode&#37027;offset&#25351;&#30340;&#26159;nodeValue&#30340;&#31532;&#20960;&#20010;&#23383;&#31526;</span>","<span class=\"c\">         */</span>","        setStart<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>node<span class=\"k\">,</span> offset<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> setEndPoint<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">,</span> node<span class=\"k\">,</span> offset<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#35774;&#32622;range&#30340;&#32467;&#26463;&#20301;&#32622;&#20301;&#20110;node&#33410;&#28857;&#65292;&#20559;&#31227;&#37327;&#20026;offset</span>","<span class=\"c\">         * &#22914;&#26524;node&#26159;elementNode&#37027;offset&#25351;&#30340;&#26159;childNodes&#20013;&#30340;&#31532;&#20960;&#20010;&#65292;&#22914;&#26524;&#26159;textNode&#37027;offset&#25351;&#30340;&#26159;nodeValue&#30340;&#31532;&#20960;&#20010;&#23383;&#31526;</span>","<span class=\"c\">         * @name  setEnd</span>","<span class=\"c\">         * @grammar range.setEnd(node,offset)  =&gt; Range</span>","<span class=\"c\">         */</span>","        setEnd<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>node<span class=\"k\">,</span> offset<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> setEndPoint<span class=\"k\">(</span><span class=\"k\">false</span><span class=\"k\">,</span> node<span class=\"k\">,</span> offset<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#23558;Range&#24320;&#22987;&#20301;&#32622;&#35774;&#32622;&#21040;node&#33410;&#28857;&#20043;&#21518;</span>","<span class=\"c\">         * @name  setStartAfter</span>","<span class=\"c\">         * @grammar range.setStartAfter(node)  =&gt; Range</span>","<span class=\"c\">         * @example</span>","<span class=\"c\">         * &lt;b&gt;xx&lt;i&gt;x|x&lt;/i&gt;x&lt;/b&gt;</span>","<span class=\"c\">         * &#25191;&#34892;setStartAfter(i)&#21518;</span>","<span class=\"c\">         * range.startContainer =&gt;b</span>","<span class=\"c\">         * range.startOffset =&gt;2</span>","<span class=\"c\">         */</span>","        setStartAfter<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>node<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>setStart<span class=\"k\">(</span>node<span class=\"k\">.</span>parentNode<span class=\"k\">,</span> domUtils<span class=\"k\">.</span>getNodeIndex<span class=\"k\">(</span>node<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#23558;Range&#24320;&#22987;&#20301;&#32622;&#35774;&#32622;&#21040;node&#33410;&#28857;&#20043;&#21069;</span>","<span class=\"c\">         * @name  setStartBefore</span>","<span class=\"c\">         * @grammar range.setStartBefore(node)  =&gt; Range</span>","<span class=\"c\">         * @example</span>","<span class=\"c\">         * &lt;b&gt;xx&lt;i&gt;x|x&lt;/i&gt;x&lt;/b&gt;</span>","<span class=\"c\">         * &#25191;&#34892;setStartBefore(i)&#21518;</span>","<span class=\"c\">         * range.startContainer =&gt;b</span>","<span class=\"c\">         * range.startOffset =&gt;1</span>","<span class=\"c\">         */</span>","        setStartBefore<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>node<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>setStart<span class=\"k\">(</span>node<span class=\"k\">.</span>parentNode<span class=\"k\">,</span> domUtils<span class=\"k\">.</span>getNodeIndex<span class=\"k\">(</span>node<span class=\"k\">));</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#23558;Range&#32467;&#26463;&#20301;&#32622;&#35774;&#32622;&#21040;node&#33410;&#28857;&#20043;&#21518;</span>","<span class=\"c\">         * @name  setEndAfter</span>","<span class=\"c\">         * @grammar range.setEndAfter(node)  =&gt; Range</span>","<span class=\"c\">         * @example</span>","<span class=\"c\">         * &lt;b&gt;xx&lt;i&gt;x|x&lt;/i&gt;x&lt;/b&gt;</span>","<span class=\"c\">         * setEndAfter(i)&#21518;</span>","<span class=\"c\">         * range.endContainer =&gt;b</span>","<span class=\"c\">         * range.endtOffset =&gt;2</span>","<span class=\"c\">         */</span>","        setEndAfter<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>node<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>setEnd<span class=\"k\">(</span>node<span class=\"k\">.</span>parentNode<span class=\"k\">,</span> domUtils<span class=\"k\">.</span>getNodeIndex<span class=\"k\">(</span>node<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#23558;Range&#32467;&#26463;&#20301;&#32622;&#35774;&#32622;&#21040;node&#33410;&#28857;&#20043;&#21069;</span>","<span class=\"c\">         * @name  setEndBefore</span>","<span class=\"c\">         * @grammar range.setEndBefore(node)  =&gt; Range</span>","<span class=\"c\">         * @example</span>","<span class=\"c\">         * &lt;b&gt;xx&lt;i&gt;x|x&lt;/i&gt;x&lt;/b&gt;</span>","<span class=\"c\">         * &#25191;&#34892;setEndBefore(i)&#21518;</span>","<span class=\"c\">         * range.endContainer =&gt;b</span>","<span class=\"c\">         * range.endtOffset =&gt;1</span>","<span class=\"c\">         */</span>","        setEndBefore<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>node<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>setEnd<span class=\"k\">(</span>node<span class=\"k\">.</span>parentNode<span class=\"k\">,</span> domUtils<span class=\"k\">.</span>getNodeIndex<span class=\"k\">(</span>node<span class=\"k\">));</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#23558;Range&#24320;&#22987;&#20301;&#32622;&#35774;&#32622;&#21040;node&#33410;&#28857;&#20869;&#30340;&#24320;&#22987;&#20301;&#32622;</span>","<span class=\"c\">         * @name  setStartAtFirst</span>","<span class=\"c\">         * @grammar range.setStartAtFirst(node)  =&gt; Range</span>","<span class=\"c\">         */</span>","        setStartAtFirst<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>node<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>setStart<span class=\"k\">(</span>node<span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#23558;Range&#24320;&#22987;&#20301;&#32622;&#35774;&#32622;&#21040;node&#33410;&#28857;&#20869;&#30340;&#32467;&#26463;&#20301;&#32622;</span>","<span class=\"c\">         * @name  setStartAtLast</span>","<span class=\"c\">         * @grammar range.setStartAtLast(node)  =&gt; Range</span>","<span class=\"c\">         */</span>","        setStartAtLast<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>node<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>setStart<span class=\"k\">(</span>node<span class=\"k\">,</span> node<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">3</span> <span class=\"k\">?</span> node<span class=\"k\">.</span>nodeValue<span class=\"k\">.</span>length <span class=\"k\">:</span> node<span class=\"k\">.</span>childNodes<span class=\"k\">.</span>length<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#23558;Range&#32467;&#26463;&#20301;&#32622;&#35774;&#32622;&#21040;node&#33410;&#28857;&#20869;&#30340;&#24320;&#22987;&#20301;&#32622;</span>","<span class=\"c\">         * @name  setEndAtFirst</span>","<span class=\"c\">         * @grammar range.setEndAtFirst(node)  =&gt; Range</span>","<span class=\"c\">         */</span>","        setEndAtFirst<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>node<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>setEnd<span class=\"k\">(</span>node<span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#23558;Range&#32467;&#26463;&#20301;&#32622;&#35774;&#32622;&#21040;node&#33410;&#28857;&#20869;&#30340;&#32467;&#26463;&#20301;&#32622;</span>","<span class=\"c\">         * @name  setEndAtLast</span>","<span class=\"c\">         * @grammar range.setEndAtLast(node)  =&gt; Range</span>","<span class=\"c\">         */</span>","        setEndAtLast<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>node<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>setEnd<span class=\"k\">(</span>node<span class=\"k\">,</span> node<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">3</span> <span class=\"k\">?</span> node<span class=\"k\">.</span>nodeValue<span class=\"k\">.</span>length <span class=\"k\">:</span> node<span class=\"k\">.</span>childNodes<span class=\"k\">.</span>length<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#36873;&#20013;&#23436;&#25972;&#30340;&#25351;&#23450;&#33410;&#28857;,&#24182;&#36820;&#22238;&#21253;&#21547;&#35813;&#33410;&#28857;&#30340;range</span>","<span class=\"c\">         * @name  selectNode</span>","<span class=\"c\">         * @grammar range.selectNode(node)  =&gt; Range</span>","<span class=\"c\">         */</span>","        selectNode<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>node<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>setStartBefore<span class=\"k\">(</span>node<span class=\"k\">).</span>setEndAfter<span class=\"k\">(</span>node<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#36873;&#20013;node&#20869;&#37096;&#30340;&#25152;&#26377;&#33410;&#28857;&#65292;&#24182;&#36820;&#22238;&#23545;&#24212;&#30340;range</span>","<span class=\"c\">         * @name selectNodeContents</span>","<span class=\"c\">         * @grammar range.selectNodeContents(node)  =&gt; Range</span>","<span class=\"c\">         * @example</span>","<span class=\"c\">         * &lt;b&gt;xx[x&lt;i&gt;xxx&lt;/i&gt;]xxx&lt;/b&gt;</span>","<span class=\"c\">         * &#25191;&#34892;&#21518;</span>","<span class=\"c\">         * &lt;b&gt;[xxx&lt;i&gt;xxx&lt;/i&gt;xxx]&lt;/b&gt;</span>","<span class=\"c\">         * range.startContainer =&gt;b</span>","<span class=\"c\">         * range.startOffset =&gt;0</span>","<span class=\"c\">         * range.endContainer =&gt;b</span>","<span class=\"c\">         * range.endOffset =&gt;3</span>","<span class=\"c\">         */</span>","        selectNodeContents<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>node<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>setStart<span class=\"k\">(</span>node<span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">).</span>setEndAtLast<span class=\"k\">(</span>node<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#20811;&#38534;&#19968;&#20010;&#26032;&#30340;range&#23545;&#35937;</span>","<span class=\"c\">         * @name  cloneRange</span>","<span class=\"c\">         * @grammar range.cloneRange() =&gt; Range</span>","<span class=\"c\">         */</span>","        cloneRange<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> me <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","            <span class=\"k\">return</span> <span class=\"k\">new</span> Range<span class=\"k\">(</span>me<span class=\"k\">.</span>document<span class=\"k\">).</span>setStart<span class=\"k\">(</span>me<span class=\"k\">.</span>startContainer<span class=\"k\">,</span> me<span class=\"k\">.</span>startOffset<span class=\"k\">).</span>setEnd<span class=\"k\">(</span>me<span class=\"k\">.</span>endContainer<span class=\"k\">,</span> me<span class=\"k\">.</span>endOffset<span class=\"k\">);</span>","","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#35753;&#36873;&#21306;&#38381;&#21512;&#21040;&#23614;&#37096;&#65292;&#33509;toStart&#20026;&#30495;&#65292;&#21017;&#38381;&#21512;&#21040;&#22836;&#37096;</span>","<span class=\"c\">         * @name  collapse</span>","<span class=\"c\">         * @grammar range.collapse() =&gt; Range</span>","<span class=\"c\">         * @grammar range.collapse(true) =&gt; Range   //&#38381;&#21512;&#36873;&#21306;&#21040;&#22836;&#37096;</span>","<span class=\"c\">         */</span>","        collapse<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>toStart<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> me <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>toStart<span class=\"k\">)</span> <span class=\"k\">{</span>","                me<span class=\"k\">.</span>endContainer <span class=\"k\">=</span> me<span class=\"k\">.</span>startContainer<span class=\"k\">;</span>","                me<span class=\"k\">.</span>endOffset <span class=\"k\">=</span> me<span class=\"k\">.</span>startOffset<span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                me<span class=\"k\">.</span>startContainer <span class=\"k\">=</span> me<span class=\"k\">.</span>endContainer<span class=\"k\">;</span>","                me<span class=\"k\">.</span>startOffset <span class=\"k\">=</span> me<span class=\"k\">.</span>endOffset<span class=\"k\">;</span>","            <span class=\"k\">}</span>","            me<span class=\"k\">.</span>collapsed <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            <span class=\"k\">return</span> me<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#35843;&#25972;range&#30340;&#36793;&#30028;&#65292;&#20351;&#20854;\"&#25910;&#32553;\"&#21040;&#26368;&#23567;&#30340;&#20301;&#32622;</span>","<span class=\"c\">         * @name  shrinkBoundary</span>","<span class=\"c\">         * @grammar range.shrinkBoundary()  =&gt; Range  //range&#24320;&#22987;&#20301;&#32622;&#21644;&#32467;&#26463;&#20301;&#32622;&#37117;&#35843;&#25972;&#65292;&#21442;&#35265;&lt;code&gt;&lt;a href=\"#adjustmentboundary\"&gt;adjustmentBoundary&lt;/a&gt;&lt;/code&gt;</span>","<span class=\"c\">         * @grammar range.shrinkBoundary(true)  =&gt; Range  //&#20165;&#35843;&#25972;&#24320;&#22987;&#20301;&#32622;&#65292;&#24573;&#30053;&#32467;&#26463;&#20301;&#32622;</span>","<span class=\"c\">         * @example</span>","<span class=\"c\">         * &lt;b&gt;xx[&lt;/b&gt;xxxxx] ==&gt; &lt;b&gt;xx&lt;/b&gt;[xxxxx]</span>","<span class=\"c\">         * &lt;b&gt;x[xx&lt;/b&gt;&lt;i&gt;]xxx&lt;/i&gt; ==&gt; &lt;b&gt;x[xx]&lt;/b&gt;&lt;i&gt;xxx&lt;/i&gt;</span>","<span class=\"c\">         * [&lt;b&gt;&lt;i&gt;xxxx&lt;/i&gt;xxxxxxx&lt;/b&gt;] ==&gt; &lt;b&gt;&lt;i&gt;[xxxx&lt;/i&gt;xxxxxxx]&lt;/b&gt;</span>","<span class=\"c\">         */</span>","        shrinkBoundary<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>ignoreEnd<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> me <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">,</span> child<span class=\"k\">,</span>","                collapsed <span class=\"k\">=</span> me<span class=\"k\">.</span>collapsed<span class=\"k\">;</span>","            <span class=\"k\">function</span> check<span class=\"k\">(</span>node<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">return</span> node<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">1</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>domUtils<span class=\"k\">.</span>isBookmarkNode<span class=\"k\">(</span>node<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>dtd<span class=\"k\">.</span>$empty<span class=\"k\">[</span>node<span class=\"k\">.</span>tagName<span class=\"k\">]</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>dtd<span class=\"k\">.</span>$nonChild<span class=\"k\">[</span>node<span class=\"k\">.</span>tagName<span class=\"k\">]</span>","            <span class=\"k\">}</span>","            <span class=\"k\">while</span> <span class=\"k\">(</span>me<span class=\"k\">.</span>startContainer<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">1</span> <span class=\"c\">//&#26159;element</span>","                <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>child <span class=\"k\">=</span> me<span class=\"k\">.</span>startContainer<span class=\"k\">.</span>childNodes<span class=\"k\">[</span>me<span class=\"k\">.</span>startOffset<span class=\"k\">])</span> <span class=\"c\">//&#23376;&#33410;&#28857;&#20063;&#26159;element</span>","                <span class=\"k\">&amp;&amp;</span> check<span class=\"k\">(</span>child<span class=\"k\">))</span> <span class=\"k\">{</span>","                me<span class=\"k\">.</span>setStart<span class=\"k\">(</span>child<span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>collapsed<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> me<span class=\"k\">.</span>collapse<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span>ignoreEnd<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">while</span> <span class=\"k\">(</span>me<span class=\"k\">.</span>endContainer<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">1</span><span class=\"c\">//&#26159;element</span>","                    <span class=\"k\">&amp;&amp;</span> me<span class=\"k\">.</span>endOffset <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"c\">//&#22914;&#26524;&#26159;&#31354;&#20803;&#32032;&#23601;&#36864;&#20986; endOffset=0&#37027;&#20040;endOffst-1&#20026;&#36127;&#20540;&#65292;childNodes[endOffset]&#25253;&#38169;</span>","                    <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>child <span class=\"k\">=</span> me<span class=\"k\">.</span>endContainer<span class=\"k\">.</span>childNodes<span class=\"k\">[</span>me<span class=\"k\">.</span>endOffset <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">])</span> <span class=\"c\">//&#23376;&#33410;&#28857;&#20063;&#26159;element</span>","                    <span class=\"k\">&amp;&amp;</span> check<span class=\"k\">(</span>child<span class=\"k\">))</span> <span class=\"k\">{</span>","                    me<span class=\"k\">.</span>setEnd<span class=\"k\">(</span>child<span class=\"k\">,</span> child<span class=\"k\">.</span>childNodes<span class=\"k\">.</span>length<span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> me<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#33719;&#21462;&#24403;&#21069;range&#25152;&#22312;&#20301;&#32622;&#30340;&#20844;&#20849;&#31062;&#20808;&#33410;&#28857;&#65292;&#24403;&#21069;range&#20301;&#32622;&#21487;&#20197;&#20301;&#20110;&#25991;&#26412;&#33410;&#28857;&#20869;&#65292;&#20063;&#21487;&#20197;&#21253;&#21547;&#25972;&#20010;&#20803;&#32032;&#33410;&#28857;&#65292;&#20063;&#21487;&#20197;&#20301;&#20110;&#20004;&#20010;&#33410;&#28857;&#20043;&#38388;</span>","<span class=\"c\">         * @name  getCommonAncestor</span>","<span class=\"c\">         * @grammar range.getCommonAncestor([includeSelf, ignoreTextNode])  =&gt; Element</span>","<span class=\"c\">         * @example</span>","<span class=\"c\">         * &lt;b&gt;xx[xx&lt;i&gt;xx]x&lt;/i&gt;xxx&lt;/b&gt; ==&gt;getCommonAncestor() ==&gt; b</span>","<span class=\"c\">         * &lt;b&gt;[&lt;img/&gt;]&lt;/b&gt;</span>","<span class=\"c\">         * range.startContainer ==&gt; b</span>","<span class=\"c\">         * range.startOffset ==&gt; 0</span>","<span class=\"c\">         * range.endContainer ==&gt; b</span>","<span class=\"c\">         * range.endOffset ==&gt; 1</span>","<span class=\"c\">         * range.getCommonAncestor() ==&gt; b</span>","<span class=\"c\">         * range.getCommonAncestor(true) ==&gt; img</span>","<span class=\"c\">         * &lt;b&gt;xxx|xx&lt;/b&gt;</span>","<span class=\"c\">         * range.startContainer ==&gt; textNode</span>","<span class=\"c\">         * range.startOffset ==&gt; 3</span>","<span class=\"c\">         * range.endContainer ==&gt; textNode</span>","<span class=\"c\">         * range.endOffset ==&gt; 3</span>","<span class=\"c\">         * range.getCommonAncestor() ==&gt; textNode</span>","<span class=\"c\">         * range.getCommonAncestor(null,true) ==&gt; b</span>","<span class=\"c\">         */</span>","        getCommonAncestor<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>includeSelf<span class=\"k\">,</span> ignoreTextNode<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> me <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">,</span>","                start <span class=\"k\">=</span> me<span class=\"k\">.</span>startContainer<span class=\"k\">,</span>","                end <span class=\"k\">=</span> me<span class=\"k\">.</span>endContainer<span class=\"k\">;</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>start <span class=\"k\">===</span> end<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>includeSelf <span class=\"k\">&amp;&amp;</span> selectOneNode<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">))</span> <span class=\"k\">{</span>","                    start <span class=\"k\">=</span> start<span class=\"k\">.</span>childNodes<span class=\"k\">[</span>me<span class=\"k\">.</span>startOffset<span class=\"k\">];</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>start<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">1</span><span class=\"k\">)</span>","                        <span class=\"k\">return</span> start<span class=\"k\">;</span>","                <span class=\"k\">}</span>","                <span class=\"c\">//&#21482;&#26377;&#22312;&#19978;&#26469;&#23601;&#30456;&#31561;&#30340;&#24773;&#20917;&#19979;&#25165;&#20250;&#20986;&#29616;&#26159;&#25991;&#26412;&#30340;&#24773;&#20917;</span>","                <span class=\"k\">return</span> ignoreTextNode <span class=\"k\">&amp;&amp;</span> start<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">3</span> <span class=\"k\">?</span> start<span class=\"k\">.</span>parentNode <span class=\"k\">:</span> start<span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> domUtils<span class=\"k\">.</span>getCommonAncestor<span class=\"k\">(</span>start<span class=\"k\">,</span> end<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#35843;&#25972;&#36793;&#30028;&#23481;&#22120;&#65292;&#22914;&#26524;&#26159;textNode,&#23601;&#35843;&#25972;&#21040;elementNode&#19978;</span>","<span class=\"c\">         * @name trimBoundary</span>","<span class=\"c\">         * @grammar range.trimBoundary([ignoreEnd])  =&gt; Range //true&#24573;&#30053;&#32467;&#26463;&#36793;&#30028;</span>","<span class=\"c\">         * @example</span>","<span class=\"c\">         * DOM Element :</span>","<span class=\"c\">         * &lt;b&gt;|xxx&lt;/b&gt;</span>","<span class=\"c\">         * startContainer = xxx; startOffset = 0</span>","<span class=\"c\">         * //&#25191;&#34892;&#21518;&#26412;&#26041;&#27861;&#21518;</span>","<span class=\"c\">         * startContainer = &lt;b&gt;;  startOffset = 0</span>","<span class=\"c\">         * @example</span>","<span class=\"c\">         * Dom Element :</span>","<span class=\"c\">         * &lt;b&gt;xx|x&lt;/b&gt;</span>","<span class=\"c\">         * startContainer = xxx;  startOffset = 2</span>","<span class=\"c\">         * //&#25191;&#34892;&#26412;&#26041;&#27861;&#21518;&#65292;xxx&#34987;&#23454;&#23454;&#22312;&#22312;&#22320;&#20999;&#20998;&#25104;&#20004;&#20010;TextNode</span>","<span class=\"c\">         * startContainer = &lt;b&gt;; startOffset = 1</span>","<span class=\"c\">         */</span>","        trimBoundary<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>ignoreEnd<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>txtToElmBoundary<span class=\"k\">();</span>","            <span class=\"k\">var</span> start <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>startContainer<span class=\"k\">,</span>","                offset <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>startOffset<span class=\"k\">,</span>","                collapsed <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>collapsed<span class=\"k\">,</span>","                end <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>endContainer<span class=\"k\">;</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>start<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">3</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>offset <span class=\"k\">==</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>setStartBefore<span class=\"k\">(</span>start<span class=\"k\">);</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>offset <span class=\"k\">&gt;=</span> start<span class=\"k\">.</span>nodeValue<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">this</span><span class=\"k\">.</span>setStartAfter<span class=\"k\">(</span>start<span class=\"k\">);</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        <span class=\"k\">var</span> textNode <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>split<span class=\"k\">(</span>start<span class=\"k\">,</span> offset<span class=\"k\">);</span>","                        <span class=\"c\">//&#36319;&#26032;&#32467;&#26463;&#36793;&#30028;</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span>start <span class=\"k\">===</span> end<span class=\"k\">)</span> <span class=\"k\">{</span>","                            <span class=\"k\">this</span><span class=\"k\">.</span>setEnd<span class=\"k\">(</span>textNode<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>endOffset <span class=\"k\">-</span> offset<span class=\"k\">);</span>","                        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>start<span class=\"k\">.</span>parentNode <span class=\"k\">===</span> end<span class=\"k\">)</span> <span class=\"k\">{</span>","                            <span class=\"k\">this</span><span class=\"k\">.</span>endOffset <span class=\"k\">+=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                        <span class=\"k\">this</span><span class=\"k\">.</span>setStartBefore<span class=\"k\">(</span>textNode<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>collapsed<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>collapse<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span>ignoreEnd<span class=\"k\">)</span> <span class=\"k\">{</span>","                offset <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>endOffset<span class=\"k\">;</span>","                end <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>endContainer<span class=\"k\">;</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>end<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">3</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>offset <span class=\"k\">==</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">this</span><span class=\"k\">.</span>setEndBefore<span class=\"k\">(</span>end<span class=\"k\">);</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        offset <span class=\"k\">&lt;</span> end<span class=\"k\">.</span>nodeValue<span class=\"k\">.</span>length <span class=\"k\">&amp;&amp;</span> domUtils<span class=\"k\">.</span>split<span class=\"k\">(</span>end<span class=\"k\">,</span> offset<span class=\"k\">);</span>","                        <span class=\"k\">this</span><span class=\"k\">.</span>setEndAfter<span class=\"k\">(</span>end<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#22914;&#26524;&#36873;&#21306;&#22312;&#25991;&#26412;&#30340;&#36793;&#30028;&#19978;&#65292;&#23601;&#25193;&#23637;&#36873;&#21306;&#21040;&#25991;&#26412;&#30340;&#29238;&#33410;&#28857;&#19978;</span>","<span class=\"c\">         * @name  txtToElmBoundary</span>","<span class=\"c\">         * @example</span>","<span class=\"c\">         * Dom Element :</span>","<span class=\"c\">         * &lt;b&gt; |xxx&lt;/b&gt;</span>","<span class=\"c\">         * startContainer = xxx;  startOffset = 0</span>","<span class=\"c\">         * //&#26412;&#26041;&#27861;&#25191;&#34892;&#21518;</span>","<span class=\"c\">         * startContainer = &lt;b&gt;; startOffset = 0</span>","<span class=\"c\">         * @example</span>","<span class=\"c\">         * Dom Element :</span>","<span class=\"c\">         * &lt;b&gt; xxx| &lt;/b&gt;</span>","<span class=\"c\">         * startContainer = xxx; startOffset = 3</span>","<span class=\"c\">         * //&#26412;&#26041;&#27861;&#25191;&#34892;&#21518;</span>","<span class=\"c\">         * startContainer = &lt;b&gt;; startOffset = 1</span>","<span class=\"c\">         */</span>","        txtToElmBoundary<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">function</span> adjust<span class=\"k\">(</span>r<span class=\"k\">,</span> c<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> container <span class=\"k\">=</span> r<span class=\"k\">[</span>c <span class=\"k\">+</span> <span class=\"s\">'Container'</span><span class=\"k\">],</span>","                    offset <span class=\"k\">=</span> r<span class=\"k\">[</span>c <span class=\"k\">+</span> <span class=\"s\">'Offset'</span><span class=\"k\">];</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>container<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">3</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(!</span>offset<span class=\"k\">)</span> <span class=\"k\">{</span>","                        r<span class=\"k\">[</span><span class=\"s\">'set'</span> <span class=\"k\">+</span> c<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/(\\w)/</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>a<span class=\"k\">)</span> <span class=\"k\">{</span>","                            <span class=\"k\">return</span> a<span class=\"k\">.</span>toUpperCase<span class=\"k\">();</span>","                        <span class=\"k\">}</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">'Before'</span><span class=\"k\">](</span>container<span class=\"k\">);</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>offset <span class=\"k\">&gt;=</span> container<span class=\"k\">.</span>nodeValue<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","                        r<span class=\"k\">[</span><span class=\"s\">'set'</span> <span class=\"k\">+</span> c<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/(\\w)/</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>a<span class=\"k\">)</span> <span class=\"k\">{</span>","                            <span class=\"k\">return</span> a<span class=\"k\">.</span>toUpperCase<span class=\"k\">();</span>","                        <span class=\"k\">}</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">'After'</span> <span class=\"k\">](</span>container<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>collapsed<span class=\"k\">)</span> <span class=\"k\">{</span>","                adjust<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> <span class=\"s\">'start'</span><span class=\"k\">);</span>","                adjust<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> <span class=\"s\">'end'</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#22312;&#24403;&#21069;&#36873;&#21306;&#30340;&#24320;&#22987;&#20301;&#32622;&#21069;&#25554;&#20837;&#19968;&#20010;&#33410;&#28857;&#25110;&#32773;fragment&#65292;range&#30340;&#24320;&#22987;&#20301;&#32622;&#20250;&#22312;&#25554;&#20837;&#33410;&#28857;&#30340;&#21069;&#36793;</span>","<span class=\"c\">         * @name  insertNode</span>","<span class=\"c\">         * @grammar range.insertNode(node)  =&gt; Range //node&#21487;&#20197;&#26159;textNode,elementNode,fragment</span>","<span class=\"c\">         * @example</span>","<span class=\"c\">         * Range :</span>","<span class=\"c\">         * xxx[x&lt;p&gt;xxxx&lt;/p&gt;xxxx]x&lt;p&gt;sdfsdf&lt;/p&gt;</span>","<span class=\"c\">         * &#24453;&#25554;&#20837;Node :</span>","<span class=\"c\">         * &lt;p&gt;ssss&lt;/p&gt;</span>","<span class=\"c\">         * &#25191;&#34892;&#26412;&#26041;&#27861;&#21518;&#30340;Range :</span>","<span class=\"c\">         * xxx[&lt;p&gt;ssss&lt;/p&gt;x&lt;p&gt;xxxx&lt;/p&gt;xxxx]x&lt;p&gt;sdfsdf&lt;/p&gt;</span>","<span class=\"c\">         */</span>","        insertNode<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>node<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> first <span class=\"k\">=</span> node<span class=\"k\">,</span> length <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>node<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">11</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                first <span class=\"k\">=</span> node<span class=\"k\">.</span>firstChild<span class=\"k\">;</span>","                length <span class=\"k\">=</span> node<span class=\"k\">.</span>childNodes<span class=\"k\">.</span>length<span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>trimBoundary<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","            <span class=\"k\">var</span> start <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>startContainer<span class=\"k\">,</span>","                offset <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>startOffset<span class=\"k\">;</span>","            <span class=\"k\">var</span> nextNode <span class=\"k\">=</span> start<span class=\"k\">.</span>childNodes<span class=\"k\">[</span> offset <span class=\"k\">];</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>nextNode<span class=\"k\">)</span> <span class=\"k\">{</span>","                start<span class=\"k\">.</span>insertBefore<span class=\"k\">(</span>node<span class=\"k\">,</span> nextNode<span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                start<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>node<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>first<span class=\"k\">.</span>parentNode <span class=\"k\">===</span> <span class=\"k\">this</span><span class=\"k\">.</span>endContainer<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>endOffset <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>endOffset <span class=\"k\">+</span> length<span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>setStartBefore<span class=\"k\">(</span>first<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#35774;&#32622;&#20809;&#26631;&#38381;&#21512;&#20301;&#32622;,toEnd&#35774;&#32622;&#20026;true&#26102;&#20809;&#26631;&#23558;&#38381;&#21512;&#21040;&#36873;&#21306;&#30340;&#32467;&#23614;</span>","<span class=\"c\">         * @name  setCursor</span>","<span class=\"c\">         * @grammar range.setCursor([toEnd])  =&gt;  Range   //toEnd&#20026;true&#26102;&#65292;&#20809;&#26631;&#38381;&#21512;&#21040;&#36873;&#21306;&#30340;&#26411;&#23614;</span>","<span class=\"c\">         */</span>","        setCursor<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>toEnd<span class=\"k\">,</span> noFillData<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>collapse<span class=\"k\">(!</span>toEnd<span class=\"k\">).</span>select<span class=\"k\">(</span>noFillData<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#21019;&#24314;&#24403;&#21069;range&#30340;&#19968;&#20010;&#20070;&#31614;&#65292;&#35760;&#24405;&#19979;&#24403;&#21069;range&#30340;&#20301;&#32622;&#65292;&#26041;&#20415;&#24403;dom&#26641;&#25913;&#21464;&#26102;&#65292;&#36824;&#33021;&#25214;&#22238;&#21407;&#26469;&#30340;&#36873;&#21306;&#20301;&#32622;</span>","<span class=\"c\">         * @name createBookmark</span>","<span class=\"c\">         * @grammar range.createBookmark([serialize])  =&gt; Object  //{start:&#24320;&#22987;&#26631;&#35760;,end:&#32467;&#26463;&#26631;&#35760;,id:serialize} serialize&#20026;&#30495;&#26102;&#65292;&#24320;&#22987;&#32467;&#26463;&#26631;&#35760;&#26159;&#25554;&#20837;&#33410;&#28857;&#30340;id&#65292;&#21542;&#21017;&#26159;&#25554;&#20837;&#33410;&#28857;&#30340;&#24341;&#29992;</span>","<span class=\"c\">         */</span>","        createBookmark<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>serialize<span class=\"k\">,</span> same<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> endNode<span class=\"k\">,</span>","                startNode <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">'span'</span><span class=\"k\">);</span>","            startNode<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText <span class=\"k\">=</span> <span class=\"s\">'display:none;line-height:0px;'</span><span class=\"k\">;</span>","            startNode<span class=\"k\">.</span>appendChild<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>document<span class=\"k\">.</span>createTextNode<span class=\"k\">(</span><span class=\"s\">'</span><span class=\"t\">\\u</span><span class=\"s\">200D'</span><span class=\"k\">));</span>","            startNode<span class=\"k\">.</span>id <span class=\"k\">=</span> <span class=\"s\">'_baidu_bookmark_start_'</span> <span class=\"k\">+</span> <span class=\"k\">(</span>same <span class=\"k\">?</span> <span class=\"s\">''</span> <span class=\"k\">:</span> guid<span class=\"k\">++);</span>","","            <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>collapsed<span class=\"k\">)</span> <span class=\"k\">{</span>","                endNode <span class=\"k\">=</span> startNode<span class=\"k\">.</span>cloneNode<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","                endNode<span class=\"k\">.</span>id <span class=\"k\">=</span> <span class=\"s\">'_baidu_bookmark_end_'</span> <span class=\"k\">+</span> <span class=\"k\">(</span>same <span class=\"k\">?</span> <span class=\"s\">''</span> <span class=\"k\">:</span> guid<span class=\"k\">++);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>insertNode<span class=\"k\">(</span>startNode<span class=\"k\">);</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>endNode<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>collapse<span class=\"k\">().</span>insertNode<span class=\"k\">(</span>endNode<span class=\"k\">).</span>setEndBefore<span class=\"k\">(</span>endNode<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>setStartAfter<span class=\"k\">(</span>startNode<span class=\"k\">);</span>","            <span class=\"k\">return</span> <span class=\"k\">{</span>","                start<span class=\"k\">:</span>serialize <span class=\"k\">?</span> startNode<span class=\"k\">.</span>id <span class=\"k\">:</span> startNode<span class=\"k\">,</span>","                end<span class=\"k\">:</span>endNode <span class=\"k\">?</span> serialize <span class=\"k\">?</span> endNode<span class=\"k\">.</span>id <span class=\"k\">:</span> endNode <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","                id<span class=\"k\">:</span>serialize","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         *  &#31227;&#21160;&#36793;&#30028;&#21040;&#20070;&#31614;&#20301;&#32622;&#65292;&#24182;&#21024;&#38500;&#25554;&#20837;&#30340;&#20070;&#31614;&#33410;&#28857;</span>","<span class=\"c\">         *  @name  moveToBookmark</span>","<span class=\"c\">         *  @grammar range.moveToBookmark(bookmark)  =&gt; Range //&#35753;&#24403;&#21069;&#30340;range&#36873;&#21040;&#32473;&#23450;bookmark&#30340;&#20301;&#32622;,bookmark&#23545;&#35937;&#26159;&#30001;range.createBookmark&#21019;&#24314;&#30340;</span>","<span class=\"c\">         */</span>","        moveToBookmark<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>bookmark<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> start <span class=\"k\">=</span> bookmark<span class=\"k\">.</span>id <span class=\"k\">?</span> <span class=\"k\">this</span><span class=\"k\">.</span>document<span class=\"k\">.</span>getElementById<span class=\"k\">(</span>bookmark<span class=\"k\">.</span>start<span class=\"k\">)</span> <span class=\"k\">:</span> bookmark<span class=\"k\">.</span>start<span class=\"k\">,</span>","                end <span class=\"k\">=</span> bookmark<span class=\"k\">.</span>end <span class=\"k\">&amp;&amp;</span> bookmark<span class=\"k\">.</span>id <span class=\"k\">?</span> <span class=\"k\">this</span><span class=\"k\">.</span>document<span class=\"k\">.</span>getElementById<span class=\"k\">(</span>bookmark<span class=\"k\">.</span>end<span class=\"k\">)</span> <span class=\"k\">:</span> bookmark<span class=\"k\">.</span>end<span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>setStartBefore<span class=\"k\">(</span>start<span class=\"k\">);</span>","            domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>start<span class=\"k\">);</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>end<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>setEndBefore<span class=\"k\">(</span>end<span class=\"k\">);</span>","                domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>end<span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>collapse<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#35843;&#25972;range&#30340;&#36793;&#30028;&#65292;&#20351;&#20854;\"&#25918;&#22823;\"&#21040;&#26368;&#36817;&#30340;&#29238;block&#33410;&#28857;</span>","<span class=\"c\">         * @name  enlarge</span>","<span class=\"c\">         * @grammar range.enlarge()  =&gt;  Range</span>","<span class=\"c\">         * @example</span>","<span class=\"c\">         * &lt;p&gt;&lt;span&gt;xxx&lt;/span&gt;&lt;b&gt;x[x&lt;/b&gt;xxxxx]&lt;/p&gt;&lt;p&gt;xxx&lt;/p&gt; ==&gt; [&lt;p&gt;&lt;span&gt;xxx&lt;/span&gt;&lt;b&gt;xx&lt;/b&gt;xxxxx&lt;/p&gt;]&lt;p&gt;xxx&lt;/p&gt;</span>","<span class=\"c\">         */</span>","        enlarge<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>toBlock<span class=\"k\">,</span> stopFn<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> isBody <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>isBody<span class=\"k\">,</span>","                pre<span class=\"k\">,</span> node<span class=\"k\">,</span> tmp <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>document<span class=\"k\">.</span>createTextNode<span class=\"k\">(</span><span class=\"s\">''</span><span class=\"k\">);</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>toBlock<span class=\"k\">)</span> <span class=\"k\">{</span>","                node <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>startContainer<span class=\"k\">;</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>node<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>node<span class=\"k\">.</span>childNodes<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>startOffset<span class=\"k\">])</span> <span class=\"k\">{</span>","                        pre <span class=\"k\">=</span> node <span class=\"k\">=</span> node<span class=\"k\">.</span>childNodes<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>startOffset<span class=\"k\">]</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        node<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>tmp<span class=\"k\">);</span>","                        pre <span class=\"k\">=</span> node <span class=\"k\">=</span> tmp<span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    pre <span class=\"k\">=</span> node<span class=\"k\">;</span>","                <span class=\"k\">}</span>","                <span class=\"k\">while</span> <span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>domUtils<span class=\"k\">.</span>isBlockElm<span class=\"k\">(</span>node<span class=\"k\">))</span> <span class=\"k\">{</span>","                        node <span class=\"k\">=</span> pre<span class=\"k\">;</span>","                        <span class=\"k\">while</span> <span class=\"k\">((</span>pre <span class=\"k\">=</span> node<span class=\"k\">.</span>previousSibling<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>domUtils<span class=\"k\">.</span>isBlockElm<span class=\"k\">(</span>pre<span class=\"k\">))</span> <span class=\"k\">{</span>","                            node <span class=\"k\">=</span> pre<span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                        <span class=\"k\">this</span><span class=\"k\">.</span>setStartBefore<span class=\"k\">(</span>node<span class=\"k\">);</span>","                        <span class=\"k\">break</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    pre <span class=\"k\">=</span> node<span class=\"k\">;</span>","                    node <span class=\"k\">=</span> node<span class=\"k\">.</span>parentNode<span class=\"k\">;</span>","                <span class=\"k\">}</span>","                node <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>endContainer<span class=\"k\">;</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>node<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>pre <span class=\"k\">=</span> node<span class=\"k\">.</span>childNodes<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>endOffset<span class=\"k\">])</span> <span class=\"k\">{</span>","                        node<span class=\"k\">.</span>insertBefore<span class=\"k\">(</span>tmp<span class=\"k\">,</span> pre<span class=\"k\">);</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        node<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>tmp<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                    pre <span class=\"k\">=</span> node <span class=\"k\">=</span> tmp<span class=\"k\">;</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    pre <span class=\"k\">=</span> node<span class=\"k\">;</span>","                <span class=\"k\">}</span>","                <span class=\"k\">while</span> <span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>domUtils<span class=\"k\">.</span>isBlockElm<span class=\"k\">(</span>node<span class=\"k\">))</span> <span class=\"k\">{</span>","                        node <span class=\"k\">=</span> pre<span class=\"k\">;</span>","                        <span class=\"k\">while</span> <span class=\"k\">((</span>pre <span class=\"k\">=</span> node<span class=\"k\">.</span>nextSibling<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>domUtils<span class=\"k\">.</span>isBlockElm<span class=\"k\">(</span>pre<span class=\"k\">))</span> <span class=\"k\">{</span>","                            node <span class=\"k\">=</span> pre<span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                        <span class=\"k\">this</span><span class=\"k\">.</span>setEndAfter<span class=\"k\">(</span>node<span class=\"k\">);</span>","                        <span class=\"k\">break</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    pre <span class=\"k\">=</span> node<span class=\"k\">;</span>","                    node <span class=\"k\">=</span> node<span class=\"k\">.</span>parentNode<span class=\"k\">;</span>","                <span class=\"k\">}</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>tmp<span class=\"k\">.</span>parentNode <span class=\"k\">===</span> <span class=\"k\">this</span><span class=\"k\">.</span>endContainer<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>endOffset<span class=\"k\">--;</span>","                <span class=\"k\">}</span>","                domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>tmp<span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// &#25193;&#23637;&#36793;&#30028;&#21040;&#26368;&#22823;</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>collapsed<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">while</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>startOffset <span class=\"k\">==</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>stopFn <span class=\"k\">&amp;&amp;</span> stopFn<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>startContainer<span class=\"k\">))</span> <span class=\"k\">{</span>","                        <span class=\"k\">break</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>isBody<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>startContainer<span class=\"k\">))</span> <span class=\"k\">{</span>","                        <span class=\"k\">break</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>setStartBefore<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>startContainer<span class=\"k\">);</span>","                <span class=\"k\">}</span>","                <span class=\"k\">while</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>endOffset <span class=\"k\">==</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>endContainer<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">1</span> <span class=\"k\">?</span> <span class=\"k\">this</span><span class=\"k\">.</span>endContainer<span class=\"k\">.</span>childNodes<span class=\"k\">.</span>length <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>endContainer<span class=\"k\">.</span>nodeValue<span class=\"k\">.</span>length<span class=\"k\">))</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>stopFn <span class=\"k\">&amp;&amp;</span> stopFn<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>endContainer<span class=\"k\">))</span> <span class=\"k\">{</span>","                        <span class=\"k\">break</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>isBody<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>endContainer<span class=\"k\">))</span> <span class=\"k\">{</span>","                        <span class=\"k\">break</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>setEndAfter<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>endContainer<span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#35843;&#25972;Range&#30340;&#36793;&#30028;&#65292;&#20351;&#20854;\"&#32553;&#23567;\"&#21040;&#26368;&#21512;&#36866;&#30340;&#20301;&#32622;</span>","<span class=\"c\">         * @name adjustmentBoundary</span>","<span class=\"c\">         * @grammar range.adjustmentBoundary() =&gt; Range   //&#21442;&#35265;&lt;code&gt;&lt;a href=\"#shrinkboundary\"&gt;shrinkBoundary&lt;/a&gt;&lt;/code&gt;</span>","<span class=\"c\">         * @example</span>","<span class=\"c\">         * &lt;b&gt;xx[&lt;/b&gt;xxxxx] ==&gt; &lt;b&gt;xx&lt;/b&gt;[xxxxx]</span>","<span class=\"c\">         * &lt;b&gt;x[xx&lt;/b&gt;&lt;i&gt;]xxx&lt;/i&gt; ==&gt; &lt;b&gt;x[xx&lt;/b&gt;]&lt;i&gt;xxx&lt;/i&gt;</span>","<span class=\"c\">         */</span>","        adjustmentBoundary<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>collapsed<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">while</span> <span class=\"k\">(!</span>domUtils<span class=\"k\">.</span>isBody<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>startContainer<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>startOffset <span class=\"k\">==</span> <span class=\"k\">this</span><span class=\"k\">.</span>startContainer<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>startContainer<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">3</span> <span class=\"k\">?</span> <span class=\"s\">'nodeValue'</span> <span class=\"k\">:</span> <span class=\"s\">'childNodes'</span><span class=\"k\">].</span>length","                    <span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>setStartAfter<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>startContainer<span class=\"k\">);</span>","                <span class=\"k\">}</span>","                <span class=\"k\">while</span> <span class=\"k\">(!</span>domUtils<span class=\"k\">.</span>isBody<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>endContainer<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>endOffset<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>setEndBefore<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>endContainer<span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#32473;range&#36873;&#21306;&#20013;&#30340;&#20869;&#23481;&#28155;&#21152;&#32473;&#23450;&#30340;&#26631;&#31614;&#65292;&#20027;&#35201;&#29992;&#20110;inline&#26631;&#31614;</span>","<span class=\"c\">         * @name applyInlineStyle</span>","<span class=\"c\">         * @grammar range.applyInlineStyle(tagName)        =&gt;  Range    //tagName&#20026;&#38656;&#35201;&#28155;&#21152;&#30340;&#26679;&#24335;&#26631;&#31614;&#21517;</span>","<span class=\"c\">         * @grammar range.applyInlineStyle(tagName,attrs)  =&gt;  Range    //attrs&#20026;&#23646;&#24615;json&#23545;&#35937;</span>","<span class=\"c\">         * @desc</span>","<span class=\"c\">         * &lt;code type=\"html\"&gt;&lt;p&gt;xxxx[xxxx]x&lt;/p&gt;  ==&gt;  range.applyInlineStyle(\"strong\")  ==&gt;  &lt;p&gt;xxxx[&lt;strong&gt;xxxx&lt;/strong&gt;]x&lt;/p&gt;</span>","<span class=\"c\">         * &lt;p&gt;xx[dd&lt;strong&gt;yyyy&lt;/strong&gt;]x&lt;/p&gt;  ==&gt;  range.applyInlineStyle(\"strong\")  ==&gt;  &lt;p&gt;xx[&lt;strong&gt;ddyyyy&lt;/strong&gt;]x&lt;/p&gt;</span>","<span class=\"c\">         * &lt;p&gt;xxxx[xxxx]x&lt;/p&gt;  ==&gt;  range.applyInlineStyle(\"strong\",{\"style\":\"font-size:12px\"})  ==&gt;  &lt;p&gt;xxxx[&lt;strong style=\"font-size:12px\"&gt;xxxx&lt;/strong&gt;]x&lt;/p&gt;&lt;/code&gt;</span>","<span class=\"c\">         */</span>","        applyInlineStyle<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>tagName<span class=\"k\">,</span> attrs<span class=\"k\">,</span> list<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>collapsed<span class=\"k\">)</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>trimBoundary<span class=\"k\">().</span>enlarge<span class=\"k\">(</span><span class=\"k\">false</span><span class=\"k\">,</span>","                <span class=\"k\">function</span> <span class=\"k\">(</span>node<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> node<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">1</span> <span class=\"k\">&amp;&amp;</span> domUtils<span class=\"k\">.</span>isBlockElm<span class=\"k\">(</span>node<span class=\"k\">)</span>","                <span class=\"k\">}</span><span class=\"k\">).</span>adjustmentBoundary<span class=\"k\">();</span>","            <span class=\"k\">var</span> bookmark <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>createBookmark<span class=\"k\">(),</span>","                end <span class=\"k\">=</span> bookmark<span class=\"k\">.</span>end<span class=\"k\">,</span>","                filterFn <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>node<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> node<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">1</span> <span class=\"k\">?</span> node<span class=\"k\">.</span>tagName<span class=\"k\">.</span>toLowerCase<span class=\"k\">()</span> <span class=\"k\">!=</span> <span class=\"s\">'br'</span> <span class=\"k\">:</span> <span class=\"k\">!</span>domUtils<span class=\"k\">.</span>isWhitespace<span class=\"k\">(</span>node<span class=\"k\">);</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                current <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>getNextDomNode<span class=\"k\">(</span>bookmark<span class=\"k\">.</span>start<span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">,</span> filterFn<span class=\"k\">),</span>","                node<span class=\"k\">,</span>","                pre<span class=\"k\">,</span>","                range <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>cloneRange<span class=\"k\">();</span>","            <span class=\"k\">while</span> <span class=\"k\">(</span>current <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>domUtils<span class=\"k\">.</span>getPosition<span class=\"k\">(</span>current<span class=\"k\">,</span> end<span class=\"k\">)</span> <span class=\"k\">&amp;</span> domUtils<span class=\"k\">.</span>POSITION_PRECEDING<span class=\"k\">))</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>current<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">3</span> <span class=\"k\">||</span> dtd<span class=\"k\">[</span>tagName<span class=\"k\">][</span>current<span class=\"k\">.</span>tagName<span class=\"k\">])</span> <span class=\"k\">{</span>","                    range<span class=\"k\">.</span>setStartBefore<span class=\"k\">(</span>current<span class=\"k\">);</span>","                    node <span class=\"k\">=</span> current<span class=\"k\">;</span>","                    <span class=\"k\">while</span> <span class=\"k\">(</span>node <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>node<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">3</span> <span class=\"k\">||</span> dtd<span class=\"k\">[</span>tagName<span class=\"k\">][</span>node<span class=\"k\">.</span>tagName<span class=\"k\">])</span> <span class=\"k\">&amp;&amp;</span> node <span class=\"k\">!==</span> end<span class=\"k\">)</span> <span class=\"k\">{</span>","                        pre <span class=\"k\">=</span> node<span class=\"k\">;</span>","                        node <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>getNextDomNode<span class=\"k\">(</span>node<span class=\"k\">,</span> node<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>parent<span class=\"k\">)</span> <span class=\"k\">{</span>","                            <span class=\"k\">return</span> dtd<span class=\"k\">[</span>tagName<span class=\"k\">][</span>parent<span class=\"k\">.</span>tagName<span class=\"k\">];</span>","                        <span class=\"k\">}</span><span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                    <span class=\"k\">var</span> frag <span class=\"k\">=</span> range<span class=\"k\">.</span>setEndAfter<span class=\"k\">(</span>pre<span class=\"k\">).</span>extractContents<span class=\"k\">(),</span> elm<span class=\"k\">;</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>list <span class=\"k\">&amp;&amp;</span> list<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">var</span> level<span class=\"k\">,</span> top<span class=\"k\">;</span>","                        top <span class=\"k\">=</span> level <span class=\"k\">=</span> list<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>cloneNode<span class=\"k\">(</span><span class=\"k\">false</span><span class=\"k\">);</span>","                        <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">,</span> ci<span class=\"k\">;</span> ci <span class=\"k\">=</span> list<span class=\"k\">[</span>i<span class=\"k\">++];)</span> <span class=\"k\">{</span>","                            level<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>ci<span class=\"k\">.</span>cloneNode<span class=\"k\">(</span><span class=\"k\">false</span><span class=\"k\">));</span>","                            level <span class=\"k\">=</span> level<span class=\"k\">.</span>firstChild<span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                        elm <span class=\"k\">=</span> level<span class=\"k\">;</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        elm <span class=\"k\">=</span> range<span class=\"k\">.</span>document<span class=\"k\">.</span>createElement<span class=\"k\">(</span>tagName<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>attrs<span class=\"k\">)</span> <span class=\"k\">{</span>","                        domUtils<span class=\"k\">.</span>setAttributes<span class=\"k\">(</span>elm<span class=\"k\">,</span> attrs<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                    elm<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>frag<span class=\"k\">);</span>","                    range<span class=\"k\">.</span>insertNode<span class=\"k\">(</span>list <span class=\"k\">?</span> top <span class=\"k\">:</span> elm<span class=\"k\">);</span>","                    <span class=\"c\">//&#22788;&#29702;&#19979;&#28369;&#32447;&#22312;a&#19978;&#30340;&#24773;&#20917;</span>","                    <span class=\"k\">var</span> aNode<span class=\"k\">;</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>tagName <span class=\"k\">==</span> <span class=\"s\">'span'</span> <span class=\"k\">&amp;&amp;</span> attrs<span class=\"k\">.</span>style <span class=\"k\">&amp;&amp;</span> <span class=\"s\">/text\\-decoration/</span><span class=\"k\">.</span>test<span class=\"k\">(</span>attrs<span class=\"k\">.</span>style<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>aNode <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>findParentByTagName<span class=\"k\">(</span>elm<span class=\"k\">,</span> <span class=\"s\">'a'</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">)))</span> <span class=\"k\">{</span>","                        domUtils<span class=\"k\">.</span>setAttributes<span class=\"k\">(</span>aNode<span class=\"k\">,</span> attrs<span class=\"k\">);</span>","                        domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>elm<span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">);</span>","                        elm <span class=\"k\">=</span> aNode<span class=\"k\">;</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        domUtils<span class=\"k\">.</span>mergeSibling<span class=\"k\">(</span>elm<span class=\"k\">);</span>","                        domUtils<span class=\"k\">.</span>clearEmptySibling<span class=\"k\">(</span>elm<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                    <span class=\"c\">//&#21435;&#38500;&#23376;&#33410;&#28857;&#30456;&#21516;&#30340;</span>","                    domUtils<span class=\"k\">.</span>mergeChild<span class=\"k\">(</span>elm<span class=\"k\">,</span> attrs<span class=\"k\">);</span>","                    current <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>getNextDomNode<span class=\"k\">(</span>elm<span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">,</span> filterFn<span class=\"k\">);</span>","                    domUtils<span class=\"k\">.</span>mergeToParent<span class=\"k\">(</span>elm<span class=\"k\">);</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>node <span class=\"k\">===</span> end<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">break</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    current <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>getNextDomNode<span class=\"k\">(</span>current<span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> filterFn<span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>moveToBookmark<span class=\"k\">(</span>bookmark<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#23545;&#24403;&#21069;range&#36873;&#20013;&#30340;&#33410;&#28857;&#65292;&#21435;&#25481;&#32473;&#23450;&#30340;&#26631;&#31614;&#33410;&#28857;&#65292;&#20294;&#26631;&#31614;&#20013;&#30340;&#20869;&#23481;&#20445;&#30041;&#65292;&#20027;&#35201;&#29992;&#20110;&#22788;&#29702;inline&#20803;&#32032;</span>","<span class=\"c\">         * @name removeInlineStyle</span>","<span class=\"c\">         * @grammar range.removeInlineStyle(tagNames)  =&gt; Range  //tagNames &#20026;&#38656;&#35201;&#21435;&#25481;&#30340;&#26679;&#24335;&#26631;&#31614;&#21517;,&#25903;&#25345;\"b\"&#25110;&#32773;[\"b\",\"i\",\"u\"]</span>","<span class=\"c\">         * @desc</span>","<span class=\"c\">         * &lt;code type=\"html\"&gt;xx[x&lt;span&gt;xxx&lt;em&gt;yyy&lt;/em&gt;zz]z&lt;/span&gt;  =&gt; range.removeInlineStyle([\"em\"])  =&gt; xx[x&lt;span&gt;xxxyyyzz]z&lt;/span&gt;&lt;/code&gt;</span>","<span class=\"c\">         */</span>","        removeInlineStyle<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>tagNames<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>collapsed<span class=\"k\">)</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","            tagNames <span class=\"k\">=</span> utils<span class=\"k\">.</span>isArray<span class=\"k\">(</span>tagNames<span class=\"k\">)</span> <span class=\"k\">?</span> tagNames <span class=\"k\">:</span> <span class=\"k\">[</span>tagNames<span class=\"k\">];</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>shrinkBoundary<span class=\"k\">().</span>adjustmentBoundary<span class=\"k\">();</span>","            <span class=\"k\">var</span> start <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>startContainer<span class=\"k\">,</span> end <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>endContainer<span class=\"k\">;</span>","            <span class=\"k\">while</span> <span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>start<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>utils<span class=\"k\">.</span>indexOf<span class=\"k\">(</span>tagNames<span class=\"k\">,</span> start<span class=\"k\">.</span>tagName<span class=\"k\">.</span>toLowerCase<span class=\"k\">())</span> <span class=\"k\">&gt;</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">break</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>start<span class=\"k\">.</span>tagName<span class=\"k\">.</span>toLowerCase<span class=\"k\">()</span> <span class=\"k\">==</span> <span class=\"s\">'body'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        start <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","                        <span class=\"k\">break</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                start <span class=\"k\">=</span> start<span class=\"k\">.</span>parentNode<span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">while</span> <span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>end<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>utils<span class=\"k\">.</span>indexOf<span class=\"k\">(</span>tagNames<span class=\"k\">,</span> end<span class=\"k\">.</span>tagName<span class=\"k\">.</span>toLowerCase<span class=\"k\">())</span> <span class=\"k\">&gt;</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">break</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>end<span class=\"k\">.</span>tagName<span class=\"k\">.</span>toLowerCase<span class=\"k\">()</span> <span class=\"k\">==</span> <span class=\"s\">'body'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        end <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","                        <span class=\"k\">break</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                end <span class=\"k\">=</span> end<span class=\"k\">.</span>parentNode<span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">var</span> bookmark <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>createBookmark<span class=\"k\">(),</span>","                frag<span class=\"k\">,</span>","                tmpRange<span class=\"k\">;</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>start<span class=\"k\">)</span> <span class=\"k\">{</span>","                tmpRange <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>cloneRange<span class=\"k\">().</span>setEndBefore<span class=\"k\">(</span>bookmark<span class=\"k\">.</span>start<span class=\"k\">).</span>setStartBefore<span class=\"k\">(</span>start<span class=\"k\">);</span>","                frag <span class=\"k\">=</span> tmpRange<span class=\"k\">.</span>extractContents<span class=\"k\">();</span>","                tmpRange<span class=\"k\">.</span>insertNode<span class=\"k\">(</span>frag<span class=\"k\">);</span>","                domUtils<span class=\"k\">.</span>clearEmptySibling<span class=\"k\">(</span>start<span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">);</span>","                start<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>insertBefore<span class=\"k\">(</span>bookmark<span class=\"k\">.</span>start<span class=\"k\">,</span> start<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>end<span class=\"k\">)</span> <span class=\"k\">{</span>","                tmpRange <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>cloneRange<span class=\"k\">().</span>setStartAfter<span class=\"k\">(</span>bookmark<span class=\"k\">.</span>end<span class=\"k\">).</span>setEndAfter<span class=\"k\">(</span>end<span class=\"k\">);</span>","                frag <span class=\"k\">=</span> tmpRange<span class=\"k\">.</span>extractContents<span class=\"k\">();</span>","                tmpRange<span class=\"k\">.</span>insertNode<span class=\"k\">(</span>frag<span class=\"k\">);</span>","                domUtils<span class=\"k\">.</span>clearEmptySibling<span class=\"k\">(</span>end<span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">);</span>","                end<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>insertBefore<span class=\"k\">(</span>bookmark<span class=\"k\">.</span>end<span class=\"k\">,</span> end<span class=\"k\">.</span>nextSibling<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">var</span> current <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>getNextDomNode<span class=\"k\">(</span>bookmark<span class=\"k\">.</span>start<span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>node<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> node<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">1</span><span class=\"k\">;</span>","            <span class=\"k\">}</span><span class=\"k\">),</span> next<span class=\"k\">;</span>","            <span class=\"k\">while</span> <span class=\"k\">(</span>current <span class=\"k\">&amp;&amp;</span> current <span class=\"k\">!==</span> bookmark<span class=\"k\">.</span>end<span class=\"k\">)</span> <span class=\"k\">{</span>","                next <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>getNextDomNode<span class=\"k\">(</span>current<span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>node<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> node<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">1</span><span class=\"k\">;</span>","                <span class=\"k\">}</span><span class=\"k\">);</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>utils<span class=\"k\">.</span>indexOf<span class=\"k\">(</span>tagNames<span class=\"k\">,</span> current<span class=\"k\">.</span>tagName<span class=\"k\">.</span>toLowerCase<span class=\"k\">())</span> <span class=\"k\">&gt;</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>current<span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">);</span>","                <span class=\"k\">}</span>","                current <span class=\"k\">=</span> next<span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>moveToBookmark<span class=\"k\">(</span>bookmark<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#24471;&#21040;&#19968;&#20010;&#33258;&#38381;&#21512;&#30340;&#33410;&#28857;,&#24120;&#29992;&#20110;&#33719;&#21462;&#33258;&#38381;&#21644;&#30340;&#33410;&#28857;&#65292;&#20363;&#22914;&#22270;&#29255;&#33410;&#28857;</span>","<span class=\"c\">         * @name  getClosedNode</span>","<span class=\"c\">         * @grammar range.getClosedNode()  =&gt; node|null</span>","<span class=\"c\">         * @example</span>","<span class=\"c\">         * &lt;b&gt;xxxx[&lt;img /&gt;]xxx&lt;/b&gt;</span>","<span class=\"c\">         */</span>","        getClosedNode<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> node<span class=\"k\">;</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>collapsed<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> range <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>cloneRange<span class=\"k\">().</span>adjustmentBoundary<span class=\"k\">().</span>shrinkBoundary<span class=\"k\">();</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>selectOneNode<span class=\"k\">(</span>range<span class=\"k\">))</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> child <span class=\"k\">=</span> range<span class=\"k\">.</span>startContainer<span class=\"k\">.</span>childNodes<span class=\"k\">[</span>range<span class=\"k\">.</span>startOffset<span class=\"k\">];</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>child <span class=\"k\">&amp;&amp;</span> child<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">1</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>dtd<span class=\"k\">.</span>$empty<span class=\"k\">[</span>child<span class=\"k\">.</span>tagName<span class=\"k\">]</span> <span class=\"k\">||</span> dtd<span class=\"k\">.</span>$nonChild<span class=\"k\">[</span>child<span class=\"k\">.</span>tagName<span class=\"k\">]))</span> <span class=\"k\">{</span>","                        node <span class=\"k\">=</span> child<span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> node<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#26681;&#25454;&#24403;&#21069;range&#36873;&#20013;&#20869;&#23481;&#33410;&#28857;&#65288;&#22312;&#39029;&#38754;&#19978;&#34920;&#29616;&#20026;&#21453;&#30333;&#26174;&#31034;&#65289;</span>","<span class=\"c\">         * @name select</span>","<span class=\"c\">         * @grammar range.select();  =&gt; Range</span>","<span class=\"c\">         */</span>","        select<span class=\"k\">:</span>browser<span class=\"k\">.</span>ie <span class=\"k\">?</span> <span class=\"k\">function</span> <span class=\"k\">(</span>noFillData<span class=\"k\">,</span> textRange<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> nativeRange<span class=\"k\">;</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>collapsed<span class=\"k\">)</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>shrinkBoundary<span class=\"k\">();</span>","            <span class=\"k\">var</span> node <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getClosedNode<span class=\"k\">();</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>node <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>textRange<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">try</span> <span class=\"k\">{</span>","                    nativeRange <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>document<span class=\"k\">.</span>body<span class=\"k\">.</span>createControlRange<span class=\"k\">();</span>","                    nativeRange<span class=\"k\">.</span>addElement<span class=\"k\">(</span>node<span class=\"k\">);</span>","                    nativeRange<span class=\"k\">.</span>select<span class=\"k\">();</span>","                <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{}</span>","                <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">var</span> bookmark <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>createBookmark<span class=\"k\">(),</span>","                start <span class=\"k\">=</span> bookmark<span class=\"k\">.</span>start<span class=\"k\">,</span>","                end<span class=\"k\">;</span>","            nativeRange <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>document<span class=\"k\">.</span>body<span class=\"k\">.</span>createTextRange<span class=\"k\">();</span>","            nativeRange<span class=\"k\">.</span>moveToElementText<span class=\"k\">(</span>start<span class=\"k\">);</span>","            nativeRange<span class=\"k\">.</span>moveStart<span class=\"k\">(</span><span class=\"s\">'character'</span><span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">);</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>collapsed<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> nativeRangeEnd <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>document<span class=\"k\">.</span>body<span class=\"k\">.</span>createTextRange<span class=\"k\">();</span>","                end <span class=\"k\">=</span> bookmark<span class=\"k\">.</span>end<span class=\"k\">;</span>","                nativeRangeEnd<span class=\"k\">.</span>moveToElementText<span class=\"k\">(</span>end<span class=\"k\">);</span>","                nativeRange<span class=\"k\">.</span>setEndPoint<span class=\"k\">(</span><span class=\"s\">'EndToEnd'</span><span class=\"k\">,</span> nativeRangeEnd<span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(!</span>noFillData <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>startContainer<span class=\"k\">.</span>nodeType <span class=\"k\">!=</span> <span class=\"s\">3</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"c\">//&#20351;&#29992;&lt;span&gt;|x&lt;span&gt;&#22266;&#23450;&#20303;&#20809;&#26631;</span>","                    <span class=\"k\">var</span> tmpText <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>document<span class=\"k\">.</span>createTextNode<span class=\"k\">(</span>fillChar<span class=\"k\">),</span>","                        tmp <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">'span'</span><span class=\"k\">);</span>","                    tmp<span class=\"k\">.</span>appendChild<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>document<span class=\"k\">.</span>createTextNode<span class=\"k\">(</span>fillChar<span class=\"k\">));</span>","                    start<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>insertBefore<span class=\"k\">(</span>tmp<span class=\"k\">,</span> start<span class=\"k\">);</span>","                    start<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>insertBefore<span class=\"k\">(</span>tmpText<span class=\"k\">,</span> start<span class=\"k\">);</span>","                    <span class=\"c\">//&#24403;&#28857;b,i,u&#26102;&#65292;&#19981;&#33021;&#28165;&#38500;i&#19978;&#36793;&#30340;b</span>","                    removeFillData<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>document<span class=\"k\">,</span> tmpText<span class=\"k\">);</span>","                    fillData <span class=\"k\">=</span> tmpText<span class=\"k\">;</span>","                    mergeSibling<span class=\"k\">(</span>tmp<span class=\"k\">,</span> <span class=\"s\">'previousSibling'</span><span class=\"k\">);</span>","                    mergeSibling<span class=\"k\">(</span>start<span class=\"k\">,</span> <span class=\"s\">'nextSibling'</span><span class=\"k\">);</span>","                    nativeRange<span class=\"k\">.</span>moveStart<span class=\"k\">(</span><span class=\"s\">'character'</span><span class=\"k\">,</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">);</span>","                    nativeRange<span class=\"k\">.</span>collapse<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>moveToBookmark<span class=\"k\">(</span>bookmark<span class=\"k\">);</span>","            tmp <span class=\"k\">&amp;&amp;</span> domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>tmp<span class=\"k\">);</span>","            <span class=\"c\">//IE&#22312;&#38544;&#34255;&#29366;&#24577;&#19979;&#19981;&#25903;&#25345;range&#25805;&#20316;&#65292;catch&#19968;&#19979;</span>","            <span class=\"k\">try</span> <span class=\"k\">{</span>","                nativeRange<span class=\"k\">.</span>select<span class=\"k\">();</span>","            <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","        <span class=\"k\">}</span> <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>notInsertFillData<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">function</span> checkOffset<span class=\"k\">(</span>rng<span class=\"k\">)</span><span class=\"k\">{</span>","","                <span class=\"k\">function</span> check<span class=\"k\">(</span>node<span class=\"k\">,</span>offset<span class=\"k\">,</span>dir<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>node<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">3</span> <span class=\"k\">&amp;&amp;</span> node<span class=\"k\">.</span>nodeValue<span class=\"k\">.</span>length <span class=\"k\">&lt;</span> offset<span class=\"k\">)</span><span class=\"k\">{</span>","                        rng<span class=\"k\">[</span>dir <span class=\"k\">+</span> <span class=\"s\">'Offset'</span><span class=\"k\">]</span> <span class=\"k\">=</span> node<span class=\"k\">.</span>nodeValue<span class=\"k\">.</span>length","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                check<span class=\"k\">(</span>rng<span class=\"k\">.</span>startContainer<span class=\"k\">,</span>rng<span class=\"k\">.</span>startOffset<span class=\"k\">,</span><span class=\"s\">'start'</span><span class=\"k\">);</span>","                check<span class=\"k\">(</span>rng<span class=\"k\">.</span>endContainer<span class=\"k\">,</span>rng<span class=\"k\">.</span>endOffset<span class=\"k\">,</span><span class=\"s\">'end'</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">var</span> win <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>getWindow<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>document<span class=\"k\">),</span>","                sel <span class=\"k\">=</span> win<span class=\"k\">.</span>getSelection<span class=\"k\">(),</span>","                txtNode<span class=\"k\">;</span>","            <span class=\"c\">//FF&#19979;&#20851;&#38381;&#33258;&#21160;&#38271;&#39640;&#26102;&#28378;&#21160;&#26465;&#22312;&#20851;&#38381;dialog&#26102;&#20250;&#36339;</span>","            <span class=\"c\">//ff&#19979;&#22914;&#26524;&#19981;body.focus&#23558;&#19981;&#33021;&#23450;&#20301;&#38381;&#21512;&#20809;&#26631;&#21040;&#32534;&#36753;&#22120;&#20869;</span>","            browser<span class=\"k\">.</span>gecko <span class=\"k\">?</span> <span class=\"k\">this</span><span class=\"k\">.</span>document<span class=\"k\">.</span>body<span class=\"k\">.</span>focus<span class=\"k\">()</span> <span class=\"k\">:</span> win<span class=\"k\">.</span>focus<span class=\"k\">();</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>sel<span class=\"k\">)</span> <span class=\"k\">{</span>","                sel<span class=\"k\">.</span>removeAllRanges<span class=\"k\">();</span>","                <span class=\"c\">// trace:870 chrome/safari&#21518;&#36793;&#26159;br&#23545;&#20110;&#38381;&#21512;&#24471;range&#19981;&#33021;&#23450;&#20301; &#25152;&#20197;&#21435;&#25481;&#20102;&#21028;&#26029;</span>","                <span class=\"c\">// this.startContainer.nodeType != 3 &amp;&amp;! ((child = this.startContainer.childNodes[this.startOffset]) &amp;&amp; child.nodeType == 1 &amp;&amp; child.tagName == 'BR'</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>collapsed <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>notInsertFillData<span class=\"k\">)</span> <span class=\"k\">{</span>","<span class=\"c\">//                    //opear&#22914;&#26524;&#27809;&#26377;&#33410;&#28857;&#25509;&#30528;&#65292;&#21407;&#29983;&#30340;&#19981;&#33021;&#22815;&#23450;&#20301;,&#19981;&#33021;&#22312;body&#30340;&#31532;&#19968;&#32423;&#25554;&#20837;&#31354;&#30333;&#33410;&#28857;</span>","<span class=\"c\">//                    if (notInsertFillData &amp;&amp; browser.opera &amp;&amp; !domUtils.isBody(this.startContainer) &amp;&amp; this.startContainer.nodeType == 1) {</span>","<span class=\"c\">//                        var tmp = this.document.createTextNode('');</span>","<span class=\"c\">//                        this.insertNode(tmp).setStart(tmp, 0).collapse(true);</span>","<span class=\"c\">//                    }</span>","<span class=\"c\">//</span>","                    <span class=\"c\">//&#22788;&#29702;&#20809;&#26631;&#33853;&#22312;&#25991;&#26412;&#33410;&#28857;&#30340;&#24773;&#20917;</span>","                    <span class=\"c\">//&#22788;&#29702;&#20197;&#19979;&#30340;&#24773;&#20917;</span>","                    <span class=\"c\">//&lt;b&gt;|xxxx&lt;/b&gt;</span>","                    <span class=\"c\">//&lt;b&gt;xxxx&lt;/b&gt;|xxxx</span>","                    <span class=\"c\">//xxxx&lt;b&gt;|&lt;/b&gt;</span>","                    <span class=\"k\">var</span> start <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>startContainer<span class=\"k\">,</span>child <span class=\"k\">=</span> start<span class=\"k\">;</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>start<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">1</span><span class=\"k\">)</span><span class=\"k\">{</span>","                        child <span class=\"k\">=</span> start<span class=\"k\">.</span>childNodes<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>startOffset<span class=\"k\">];</span>","","                    <span class=\"k\">}</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">!(</span>start<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">3</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>startOffset<span class=\"k\">)</span>  <span class=\"k\">&amp;&amp;</span>","                        <span class=\"k\">(</span>child <span class=\"k\">?</span>","                            <span class=\"k\">(!</span>child<span class=\"k\">.</span>previousSibling <span class=\"k\">||</span> child<span class=\"k\">.</span>previousSibling<span class=\"k\">.</span>nodeType <span class=\"k\">!=</span> <span class=\"s\">3</span><span class=\"k\">)</span>","                            <span class=\"k\">:</span>","                            <span class=\"k\">(!</span>start<span class=\"k\">.</span>lastChild <span class=\"k\">||</span> start<span class=\"k\">.</span>lastChild<span class=\"k\">.</span>nodeType <span class=\"k\">!=</span> <span class=\"s\">3</span><span class=\"k\">)</span>","                        <span class=\"k\">)</span>","                    <span class=\"k\">)</span><span class=\"k\">{</span>","                        txtNode <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>document<span class=\"k\">.</span>createTextNode<span class=\"k\">(</span>fillChar<span class=\"k\">);</span>","                        <span class=\"c\">//&#36319;&#30528;&#21069;&#36793;&#36208;</span>","                        <span class=\"k\">this</span><span class=\"k\">.</span>insertNode<span class=\"k\">(</span>txtNode<span class=\"k\">);</span>","                        removeFillData<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>document<span class=\"k\">,</span> txtNode<span class=\"k\">);</span>","                        mergeSibling<span class=\"k\">(</span>txtNode<span class=\"k\">,</span> <span class=\"s\">'previousSibling'</span><span class=\"k\">);</span>","                        mergeSibling<span class=\"k\">(</span>txtNode<span class=\"k\">,</span> <span class=\"s\">'nextSibling'</span><span class=\"k\">);</span>","                        fillData <span class=\"k\">=</span> txtNode<span class=\"k\">;</span>","                        <span class=\"k\">this</span><span class=\"k\">.</span>setStart<span class=\"k\">(</span>txtNode<span class=\"k\">,</span> browser<span class=\"k\">.</span>webkit <span class=\"k\">?</span> <span class=\"s\">1</span> <span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">).</span>collapse<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                <span class=\"k\">var</span> nativeRange <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>document<span class=\"k\">.</span>createRange<span class=\"k\">();</span>","                <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>collapsed <span class=\"k\">&amp;&amp;</span> browser<span class=\"k\">.</span>opera <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>startContainer<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">1</span><span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">var</span> child <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>startContainer<span class=\"k\">.</span>childNodes<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>startOffset<span class=\"k\">];</span>","                    <span class=\"k\">if</span><span class=\"k\">(!</span>child<span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"c\">//&#24448;&#21069;&#38752;&#25314;</span>","                        child <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>startContainer<span class=\"k\">.</span>lastChild<span class=\"k\">;</span>","                        <span class=\"k\">if</span><span class=\"k\">(</span> child <span class=\"k\">&amp;&amp;</span> domUtils<span class=\"k\">.</span>isBr<span class=\"k\">(</span>child<span class=\"k\">))</span><span class=\"k\">{</span>","                            <span class=\"k\">this</span><span class=\"k\">.</span>setStartBefore<span class=\"k\">(</span>child<span class=\"k\">).</span>collapse<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>","                        <span class=\"c\">//&#21521;&#21518;&#38752;&#25314;</span>","                        <span class=\"k\">while</span><span class=\"k\">(</span>child <span class=\"k\">&amp;&amp;</span> domUtils<span class=\"k\">.</span>isBlockElm<span class=\"k\">(</span>child<span class=\"k\">))</span><span class=\"k\">{</span>","                            <span class=\"k\">if</span><span class=\"k\">(</span>child<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">1</span> <span class=\"k\">&amp;&amp;</span> child<span class=\"k\">.</span>childNodes<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">])</span><span class=\"k\">{</span>","                                child <span class=\"k\">=</span> child<span class=\"k\">.</span>childNodes<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span>","                            <span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>","                                <span class=\"k\">break</span><span class=\"k\">;</span>","                            <span class=\"k\">}</span>","                        <span class=\"k\">}</span>","                        child <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>setStartBefore<span class=\"k\">(</span>child<span class=\"k\">).</span>collapse<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">)</span>","                    <span class=\"k\">}</span>","","                <span class=\"k\">}</span>","                <span class=\"c\">//&#26159;createAddress&#26368;&#21518;&#19968;&#20301;&#31639;&#30340;&#19981;&#20934;&#65292;&#29616;&#22312;&#36825;&#37324;&#36827;&#34892;&#24494;&#35843;</span>","                checkOffset<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","                nativeRange<span class=\"k\">.</span>setStart<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>startContainer<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>startOffset<span class=\"k\">);</span>","                nativeRange<span class=\"k\">.</span>setEnd<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>endContainer<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>endOffset<span class=\"k\">);</span>","                sel<span class=\"k\">.</span>addRange<span class=\"k\">(</span>nativeRange<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#28378;&#21160;&#26465;&#36339;&#21040;&#24403;&#28982;range&#24320;&#22987;&#30340;&#20301;&#32622;</span>","<span class=\"c\">         * @name scrollToView</span>","<span class=\"c\">         * @grammar range.scrollToView([win,offset]) =&gt; Range //&#38024;&#23545;window&#23545;&#35937;&#65292;&#33509;&#19981;&#25351;&#23450;&#65292;&#23558;&#20197;&#32534;&#36753;&#21306;&#22495;&#30340;&#31383;&#21475;&#20026;&#20934;,offset&#20559;&#31227;&#37327;</span>","<span class=\"c\">         */</span>","        scrollToView<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>win<span class=\"k\">,</span> offset<span class=\"k\">)</span> <span class=\"k\">{</span>","            win <span class=\"k\">=</span> win <span class=\"k\">?</span> window <span class=\"k\">:</span> domUtils<span class=\"k\">.</span>getWindow<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>document<span class=\"k\">);</span>","            <span class=\"k\">var</span> me <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">,</span>","                span <span class=\"k\">=</span> me<span class=\"k\">.</span>document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">'span'</span><span class=\"k\">);</span>","            <span class=\"c\">//trace:717</span>","            span<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"s\">'&amp;nbsp;'</span><span class=\"k\">;</span>","            me<span class=\"k\">.</span>cloneRange<span class=\"k\">().</span>insertNode<span class=\"k\">(</span>span<span class=\"k\">);</span>","            domUtils<span class=\"k\">.</span>scrollToView<span class=\"k\">(</span>span<span class=\"k\">,</span> win<span class=\"k\">,</span> offset<span class=\"k\">);</span>","            domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>span<span class=\"k\">);</span>","            <span class=\"k\">return</span> me<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        inFillChar <span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> start <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>startContainer<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>collapsed <span class=\"k\">&amp;&amp;</span> start<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">3</span>","                <span class=\"k\">&amp;&amp;</span> start<span class=\"k\">.</span>nodeValue<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"k\">new</span> RegExp<span class=\"k\">(</span><span class=\"s\">'^'</span> <span class=\"k\">+</span> domUtils<span class=\"k\">.</span>fillChar<span class=\"k\">),</span><span class=\"s\">''</span><span class=\"k\">).</span>length <span class=\"k\">+</span> <span class=\"s\">1</span> <span class=\"k\">==</span> start<span class=\"k\">.</span>nodeValue<span class=\"k\">.</span>length","                <span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        createAddress <span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>ignoreEnd<span class=\"k\">,</span>ignoreTxt<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> addr <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">,</span>me <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","            <span class=\"k\">function</span> getAddress<span class=\"k\">(</span>isStart<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> node <span class=\"k\">=</span> isStart <span class=\"k\">?</span> me<span class=\"k\">.</span>startContainer <span class=\"k\">:</span> me<span class=\"k\">.</span>endContainer<span class=\"k\">;</span>","                <span class=\"k\">var</span> parents <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>findParents<span class=\"k\">(</span>node<span class=\"k\">,</span><span class=\"k\">true</span><span class=\"k\">,</span><span class=\"k\">function</span><span class=\"k\">(</span>node<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">return</span> <span class=\"k\">!</span>domUtils<span class=\"k\">.</span>isBody<span class=\"k\">(</span>node<span class=\"k\">)</span><span class=\"k\">}</span><span class=\"k\">),</span>","                    addrs <span class=\"k\">=</span> <span class=\"k\">[];</span>","                <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span>ci<span class=\"k\">;</span>ci <span class=\"k\">=</span> parents<span class=\"k\">[</span>i<span class=\"k\">++];)</span><span class=\"k\">{</span>","                    addrs<span class=\"k\">.</span>push<span class=\"k\">(</span>domUtils<span class=\"k\">.</span>getNodeIndex<span class=\"k\">(</span>ci<span class=\"k\">,</span>ignoreTxt<span class=\"k\">));</span>","                <span class=\"k\">}</span>","                <span class=\"k\">var</span> firstIndex <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","","                <span class=\"k\">if</span><span class=\"k\">(</span>ignoreTxt<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>node<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">3</span><span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"k\">var</span> tmpNode <span class=\"k\">=</span> node<span class=\"k\">;</span>","                        <span class=\"k\">while</span><span class=\"k\">(</span>tmpNode <span class=\"k\">=</span> tmpNode<span class=\"k\">.</span>previousSibling<span class=\"k\">)</span><span class=\"k\">{</span>","                            <span class=\"k\">if</span><span class=\"k\">(</span>tmpNode<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">3</span><span class=\"k\">)</span><span class=\"k\">{</span>","                                firstIndex <span class=\"k\">+=</span> tmpNode<span class=\"k\">.</span>nodeValue<span class=\"k\">.</span>replace<span class=\"k\">(</span>fillCharReg<span class=\"k\">,</span><span class=\"s\">''</span><span class=\"k\">).</span>length<span class=\"k\">;</span>","                            <span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>","                                <span class=\"k\">break</span><span class=\"k\">;</span>","                            <span class=\"k\">}</span>","                        <span class=\"k\">}</span>","                        firstIndex <span class=\"k\">+=</span>  <span class=\"k\">(</span>isStart <span class=\"k\">?</span> me<span class=\"k\">.</span>startOffset <span class=\"k\">:</span> me<span class=\"k\">.</span>endOffset<span class=\"k\">)</span> <span class=\"k\">-</span> <span class=\"k\">(</span>fillCharReg<span class=\"k\">.</span>test<span class=\"k\">(</span>node<span class=\"k\">.</span>nodeValue<span class=\"k\">)</span> <span class=\"k\">?</span> <span class=\"s\">1</span> <span class=\"k\">:</span> <span class=\"s\">0</span> <span class=\"k\">)</span>","                    <span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>","                        node <span class=\"k\">=</span>  node<span class=\"k\">.</span>childNodes<span class=\"k\">[</span> isStart <span class=\"k\">?</span> me<span class=\"k\">.</span>startOffset <span class=\"k\">:</span> me<span class=\"k\">.</span>endOffset<span class=\"k\">];</span>","                        <span class=\"k\">if</span><span class=\"k\">(</span>node<span class=\"k\">)</span><span class=\"k\">{</span>","                            firstIndex <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>getNodeIndex<span class=\"k\">(</span>node<span class=\"k\">,</span>ignoreTxt<span class=\"k\">);</span>","                        <span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>","                            node <span class=\"k\">=</span> isStart <span class=\"k\">?</span> me<span class=\"k\">.</span>startContainer <span class=\"k\">:</span> me<span class=\"k\">.</span>endContainer<span class=\"k\">;</span>","                            <span class=\"k\">var</span> first <span class=\"k\">=</span> node<span class=\"k\">.</span>firstChild<span class=\"k\">;</span>","                            <span class=\"k\">while</span><span class=\"k\">(</span>first<span class=\"k\">)</span><span class=\"k\">{</span>","                                <span class=\"k\">if</span><span class=\"k\">(</span>domUtils<span class=\"k\">.</span>isFillChar<span class=\"k\">(</span>first<span class=\"k\">))</span><span class=\"k\">{</span>","                                    first <span class=\"k\">=</span> first<span class=\"k\">.</span>nextSibling<span class=\"k\">;</span>","                                    <span class=\"k\">continue</span><span class=\"k\">;</span>","                                <span class=\"k\">}</span>","                                firstIndex<span class=\"k\">++;</span>","                                <span class=\"k\">if</span><span class=\"k\">(</span>first<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">3</span><span class=\"k\">)</span><span class=\"k\">{</span>","                                    <span class=\"k\">while</span><span class=\"k\">(</span> first <span class=\"k\">&amp;&amp;</span> first<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">3</span><span class=\"k\">)</span><span class=\"k\">{</span>","                                        first <span class=\"k\">=</span> first<span class=\"k\">.</span>nextSibling<span class=\"k\">;</span>","                                    <span class=\"k\">}</span>","                                <span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>","                                    first <span class=\"k\">=</span> first<span class=\"k\">.</span>nextSibling<span class=\"k\">;</span>","                                <span class=\"k\">}</span>","                            <span class=\"k\">}</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span>","","                <span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>","                    firstIndex <span class=\"k\">=</span> isStart <span class=\"k\">?</span> me<span class=\"k\">.</span>startOffset <span class=\"k\">:</span> me<span class=\"k\">.</span>endOffset","                <span class=\"k\">}</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>firstIndex <span class=\"k\">&lt;</span> <span class=\"s\">0</span><span class=\"k\">)</span><span class=\"k\">{</span>","                    firstIndex <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","                addrs<span class=\"k\">.</span>push<span class=\"k\">(</span>firstIndex<span class=\"k\">);</span>","                <span class=\"k\">return</span> addrs<span class=\"k\">;</span>","            <span class=\"k\">}</span>","            addr<span class=\"k\">.</span>startAddress <span class=\"k\">=</span> getAddress<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","            <span class=\"k\">if</span><span class=\"k\">(!</span>ignoreEnd<span class=\"k\">)</span><span class=\"k\">{</span>","                addr<span class=\"k\">.</span>endAddress <span class=\"k\">=</span> me<span class=\"k\">.</span>collapsed <span class=\"k\">?</span> <span class=\"k\">[].</span>concat<span class=\"k\">(</span>addr<span class=\"k\">.</span>startAddress<span class=\"k\">)</span> <span class=\"k\">:</span> getAddress<span class=\"k\">();</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> addr<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        moveToAddress <span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>addr<span class=\"k\">,</span>ignoreEnd<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> me <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","            <span class=\"k\">function</span> getNode<span class=\"k\">(</span>address<span class=\"k\">,</span>isStart<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> tmpNode <span class=\"k\">=</span> me<span class=\"k\">.</span>document<span class=\"k\">.</span>body<span class=\"k\">,</span>","                    parentNode<span class=\"k\">,</span>offset<span class=\"k\">;</span>","                <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span>ci<span class=\"k\">,</span>l<span class=\"k\">=</span>address<span class=\"k\">.</span>length<span class=\"k\">;</span>i<span class=\"k\">&lt;</span>l<span class=\"k\">;</span>i<span class=\"k\">++)</span><span class=\"k\">{</span>","                    ci <span class=\"k\">=</span> address<span class=\"k\">[</span>i<span class=\"k\">];</span>","                    parentNode <span class=\"k\">=</span> tmpNode<span class=\"k\">;</span>","                    tmpNode <span class=\"k\">=</span> tmpNode<span class=\"k\">.</span>childNodes<span class=\"k\">[</span>ci<span class=\"k\">];</span>","                    <span class=\"k\">if</span><span class=\"k\">(!</span>tmpNode<span class=\"k\">)</span><span class=\"k\">{</span>","                        offset <span class=\"k\">=</span> ci<span class=\"k\">;</span>","                        <span class=\"k\">break</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>isStart<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>tmpNode<span class=\"k\">)</span><span class=\"k\">{</span>","                        me<span class=\"k\">.</span>setStartBefore<span class=\"k\">(</span>tmpNode<span class=\"k\">)</span>","                    <span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>","                        me<span class=\"k\">.</span>setStart<span class=\"k\">(</span>parentNode<span class=\"k\">,</span>offset<span class=\"k\">)</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>tmpNode<span class=\"k\">)</span><span class=\"k\">{</span>","                        me<span class=\"k\">.</span>setEndBefore<span class=\"k\">(</span>tmpNode<span class=\"k\">)</span>","                    <span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>","                        me<span class=\"k\">.</span>setEnd<span class=\"k\">(</span>parentNode<span class=\"k\">,</span>offset<span class=\"k\">)</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            getNode<span class=\"k\">(</span>addr<span class=\"k\">.</span>startAddress<span class=\"k\">,</span><span class=\"k\">true</span><span class=\"k\">);</span>","            <span class=\"k\">!</span>ignoreEnd <span class=\"k\">&amp;&amp;</span> addr<span class=\"k\">.</span>endAddress <span class=\"k\">&amp;&amp;</span>  getNode<span class=\"k\">(</span>addr<span class=\"k\">.</span>endAddress<span class=\"k\">);</span>","            <span class=\"k\">return</span> me<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        equals <span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>rng<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> p <span class=\"k\">in</span> <span class=\"k\">this</span><span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>hasOwnProperty<span class=\"k\">(</span>p<span class=\"k\">))</span><span class=\"k\">{</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">[</span>p<span class=\"k\">]</span> <span class=\"k\">!==</span> rng<span class=\"k\">[</span>p<span class=\"k\">])</span>","                        <span class=\"k\">return</span> <span class=\"k\">false</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","","        <span class=\"k\">}</span><span class=\"k\">,</span>","        traversal<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>doFn<span class=\"k\">,</span>filterFn<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>collapsed<span class=\"k\">)</span>","                <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","            <span class=\"k\">var</span> bookmark <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>createBookmark<span class=\"k\">(),</span>","                end <span class=\"k\">=</span> bookmark<span class=\"k\">.</span>end<span class=\"k\">,</span>","                current <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>getNextDomNode<span class=\"k\">(</span>bookmark<span class=\"k\">.</span>start<span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">,</span> filterFn<span class=\"k\">);</span>","            <span class=\"k\">while</span> <span class=\"k\">(</span>current <span class=\"k\">&amp;&amp;</span> current <span class=\"k\">!==</span> end <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>domUtils<span class=\"k\">.</span>getPosition<span class=\"k\">(</span>current<span class=\"k\">,</span> end<span class=\"k\">)</span> <span class=\"k\">&amp;</span> domUtils<span class=\"k\">.</span>POSITION_PRECEDING<span class=\"k\">))</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> tmpNode <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>getNextDomNode<span class=\"k\">(</span>current<span class=\"k\">,</span><span class=\"k\">false</span><span class=\"k\">,</span>filterFn<span class=\"k\">);</span>","                doFn<span class=\"k\">(</span>current<span class=\"k\">);</span>","                current <span class=\"k\">=</span> tmpNode<span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>moveToBookmark<span class=\"k\">(</span>bookmark<span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">)();</span>"];
_$jscoverage['core/Range.js'][15]++;
(function () {
  _$jscoverage['core/Range.js'][16]++;
  var guid = 0, fillChar = domUtils.fillChar, fillData;
  _$jscoverage['core/Range.js'][24]++;
  function updateCollapse(range) {
    _$jscoverage['core/Range.js'][25]++;
    range.collapsed = (range.startContainer && range.endContainer && (range.startContainer === range.endContainer) && (range.startOffset == range.endOffset));
}
  _$jscoverage['core/Range.js'][31]++;
  function selectOneNode(rng) {
    _$jscoverage['core/Range.js'][32]++;
    return ((! rng.collapsed) && (rng.startContainer.nodeType == 1) && (rng.startContainer === rng.endContainer) && ((rng.endOffset - rng.startOffset) == 1));
}
  _$jscoverage['core/Range.js'][34]++;
  function setEndPoint(toStart, node, offset, range) {
    _$jscoverage['core/Range.js'][36]++;
    if (((node.nodeType == 1) && (dtd.$empty[node.tagName] || dtd.$nonChild[node.tagName]))) {
      _$jscoverage['core/Range.js'][37]++;
      offset = (domUtils.getNodeIndex(node) + (toStart? 0: 1));
      _$jscoverage['core/Range.js'][38]++;
      node = node.parentNode;
    }
    _$jscoverage['core/Range.js'][40]++;
    if (toStart) {
      _$jscoverage['core/Range.js'][41]++;
      range.startContainer = node;
      _$jscoverage['core/Range.js'][42]++;
      range.startOffset = offset;
      _$jscoverage['core/Range.js'][43]++;
      if ((! range.endContainer)) {
        _$jscoverage['core/Range.js'][44]++;
        range.collapse(true);
      }
    }
    else {
      _$jscoverage['core/Range.js'][47]++;
      range.endContainer = node;
      _$jscoverage['core/Range.js'][48]++;
      range.endOffset = offset;
      _$jscoverage['core/Range.js'][49]++;
      if ((! range.startContainer)) {
        _$jscoverage['core/Range.js'][50]++;
        range.collapse(false);
      }
    }
    _$jscoverage['core/Range.js'][53]++;
    updateCollapse(range);
    _$jscoverage['core/Range.js'][54]++;
    return range;
}
  _$jscoverage['core/Range.js'][57]++;
  function execContentsAction(range, action) {
    _$jscoverage['core/Range.js'][60]++;
    var start = range.startContainer, end = range.endContainer, startOffset = range.startOffset, endOffset = range.endOffset, doc = range.document, frag = doc.createDocumentFragment(), tmpStart, tmpEnd;
    _$jscoverage['core/Range.js'][67]++;
    if ((start.nodeType == 1)) {
      _$jscoverage['core/Range.js'][68]++;
      start = (start.childNodes[startOffset] || (tmpStart = start.appendChild(doc.createTextNode(""))));
    }
    _$jscoverage['core/Range.js'][70]++;
    if ((end.nodeType == 1)) {
      _$jscoverage['core/Range.js'][71]++;
      end = (end.childNodes[endOffset] || (tmpEnd = end.appendChild(doc.createTextNode(""))));
    }
    _$jscoverage['core/Range.js'][73]++;
    if (((start === end) && (start.nodeType == 3))) {
      _$jscoverage['core/Range.js'][74]++;
      frag.appendChild(doc.createTextNode(start.substringData(startOffset, (endOffset - startOffset))));
      _$jscoverage['core/Range.js'][76]++;
      if (action) {
        _$jscoverage['core/Range.js'][77]++;
        start.deleteData(startOffset, (endOffset - startOffset));
        _$jscoverage['core/Range.js'][78]++;
        range.collapse(true);
      }
      _$jscoverage['core/Range.js'][80]++;
      return frag;
    }
    _$jscoverage['core/Range.js'][82]++;
    var current, currentLevel, clone = frag, startParents = domUtils.findParents(start, true), endParents = domUtils.findParents(end, true);
    _$jscoverage['core/Range.js'][84]++;
    for (var i = 0; (startParents[i] == endParents[i]);) {
      _$jscoverage['core/Range.js'][85]++;
      (i++);
}
    _$jscoverage['core/Range.js'][87]++;
    for (var j = i, si; (si = startParents[j]); (j++)) {
      _$jscoverage['core/Range.js'][88]++;
      current = si.nextSibling;
      _$jscoverage['core/Range.js'][89]++;
      if ((si == start)) {
        _$jscoverage['core/Range.js'][90]++;
        if ((! tmpStart)) {
          _$jscoverage['core/Range.js'][91]++;
          if ((range.startContainer.nodeType == 3)) {
            _$jscoverage['core/Range.js'][92]++;
            clone.appendChild(doc.createTextNode(start.nodeValue.slice(startOffset)));
            _$jscoverage['core/Range.js'][94]++;
            if (action) {
              _$jscoverage['core/Range.js'][95]++;
              start.deleteData(startOffset, (start.nodeValue.length - startOffset));
            }
          }
          else {
            _$jscoverage['core/Range.js'][98]++;
            clone.appendChild(((! action)? start.cloneNode(true): start));
          }
        }
      }
      else {
        _$jscoverage['core/Range.js'][102]++;
        currentLevel = si.cloneNode(false);
        _$jscoverage['core/Range.js'][103]++;
        clone.appendChild(currentLevel);
      }
      _$jscoverage['core/Range.js'][105]++;
      while (current) {
        _$jscoverage['core/Range.js'][106]++;
        if (((current === end) || (current === endParents[j]))) {
          _$jscoverage['core/Range.js'][107]++;
          break;
        }
        _$jscoverage['core/Range.js'][109]++;
        si = current.nextSibling;
        _$jscoverage['core/Range.js'][110]++;
        clone.appendChild(((! action)? current.cloneNode(true): current));
        _$jscoverage['core/Range.js'][111]++;
        current = si;
}
      _$jscoverage['core/Range.js'][113]++;
      clone = currentLevel;
}
    _$jscoverage['core/Range.js'][115]++;
    clone = frag;
    _$jscoverage['core/Range.js'][116]++;
    if ((! startParents[i])) {
      _$jscoverage['core/Range.js'][117]++;
      clone.appendChild(startParents[(i - 1)].cloneNode(false));
      _$jscoverage['core/Range.js'][118]++;
      clone = clone.firstChild;
    }
    _$jscoverage['core/Range.js'][120]++;
    for (var j = i, ei; (ei = endParents[j]); (j++)) {
      _$jscoverage['core/Range.js'][121]++;
      current = ei.previousSibling;
      _$jscoverage['core/Range.js'][122]++;
      if ((ei == end)) {
        _$jscoverage['core/Range.js'][123]++;
        if (((! tmpEnd) && (range.endContainer.nodeType == 3))) {
          _$jscoverage['core/Range.js'][124]++;
          clone.appendChild(doc.createTextNode(end.substringData(0, endOffset)));
          _$jscoverage['core/Range.js'][126]++;
          if (action) {
            _$jscoverage['core/Range.js'][127]++;
            end.deleteData(0, endOffset);
          }
        }
      }
      else {
        _$jscoverage['core/Range.js'][131]++;
        currentLevel = ei.cloneNode(false);
        _$jscoverage['core/Range.js'][132]++;
        clone.appendChild(currentLevel);
      }
      _$jscoverage['core/Range.js'][135]++;
      if (((j != i) || (! startParents[i]))) {
        _$jscoverage['core/Range.js'][136]++;
        while (current) {
          _$jscoverage['core/Range.js'][137]++;
          if ((current === start)) {
            _$jscoverage['core/Range.js'][138]++;
            break;
          }
          _$jscoverage['core/Range.js'][140]++;
          ei = current.previousSibling;
          _$jscoverage['core/Range.js'][141]++;
          clone.insertBefore(((! action)? current.cloneNode(true): current), clone.firstChild);
          _$jscoverage['core/Range.js'][142]++;
          current = ei;
}
      }
      _$jscoverage['core/Range.js'][145]++;
      clone = currentLevel;
}
    _$jscoverage['core/Range.js'][147]++;
    if (action) {
      _$jscoverage['core/Range.js'][148]++;
      range.setStartBefore(((! endParents[i])? endParents[(i - 1)]: ((! startParents[i])? startParents[(i - 1)]: endParents[i]))).collapse(true);
    }
    _$jscoverage['core/Range.js'][150]++;
    (tmpStart && domUtils.remove(tmpStart));
    _$jscoverage['core/Range.js'][151]++;
    (tmpEnd && domUtils.remove(tmpEnd));
    _$jscoverage['core/Range.js'][152]++;
    return frag;
}
  _$jscoverage['core/Range.js'][166]++;
  var Range = (dom.Range = (function (document) {
  _$jscoverage['core/Range.js'][167]++;
  var me = this;
  _$jscoverage['core/Range.js'][168]++;
  me.startContainer = (me.startOffset = (me.endContainer = (me.endOffset = null)));
  _$jscoverage['core/Range.js'][172]++;
  me.document = document;
  _$jscoverage['core/Range.js'][173]++;
  me.collapsed = true;
}));
  _$jscoverage['core/Range.js'][181]++;
  function removeFillData(doc, excludeNode) {
    _$jscoverage['core/Range.js'][182]++;
    try {
      _$jscoverage['core/Range.js'][183]++;
      if ((fillData && domUtils.inDoc(fillData, doc))) {
        _$jscoverage['core/Range.js'][184]++;
        if ((! fillData.nodeValue.replace(fillCharReg, "").length)) {
          _$jscoverage['core/Range.js'][185]++;
          var tmpNode = fillData.parentNode;
          _$jscoverage['core/Range.js'][186]++;
          domUtils.remove(fillData);
          _$jscoverage['core/Range.js'][187]++;
          while ((tmpNode && domUtils.isEmptyInlineElement(tmpNode) && (browser.safari? (! (domUtils.getPosition(tmpNode, excludeNode) & domUtils.POSITION_CONTAINS)): (! tmpNode.contains(excludeNode))))) {
            _$jscoverage['core/Range.js'][191]++;
            fillData = tmpNode.parentNode;
            _$jscoverage['core/Range.js'][192]++;
            domUtils.remove(tmpNode);
            _$jscoverage['core/Range.js'][193]++;
            tmpNode = fillData;
}
        }
        else {
          _$jscoverage['core/Range.js'][196]++;
          fillData.nodeValue = fillData.nodeValue.replace(fillCharReg, "");
        }
      }
    }
    catch (e) {
    }
}
  _$jscoverage['core/Range.js'][208]++;
  function mergeSibling(node, dir) {
    _$jscoverage['core/Range.js'][209]++;
    var tmpNode;
    _$jscoverage['core/Range.js'][210]++;
    node = node[dir];
    _$jscoverage['core/Range.js'][211]++;
    while ((node && domUtils.isFillChar(node))) {
      _$jscoverage['core/Range.js'][212]++;
      tmpNode = node[dir];
      _$jscoverage['core/Range.js'][213]++;
      domUtils.remove(node);
      _$jscoverage['core/Range.js'][214]++;
      node = tmpNode;
}
}
  _$jscoverage['core/Range.js'][218]++;
  Range.prototype = {cloneContents: (function () {
  _$jscoverage['core/Range.js'][225]++;
  return (this.collapsed? null: execContentsAction(this, 0));
}), deleteContents: (function () {
  _$jscoverage['core/Range.js'][244]++;
  var txt;
  _$jscoverage['core/Range.js'][245]++;
  if ((! this.collapsed)) {
    _$jscoverage['core/Range.js'][246]++;
    execContentsAction(this, 1);
  }
  _$jscoverage['core/Range.js'][248]++;
  if (browser.webkit) {
    _$jscoverage['core/Range.js'][249]++;
    txt = this.startContainer;
    _$jscoverage['core/Range.js'][250]++;
    if (((txt.nodeType == 3) && (! txt.nodeValue.length))) {
      _$jscoverage['core/Range.js'][251]++;
      this.setStartBefore(txt).collapse(true);
      _$jscoverage['core/Range.js'][252]++;
      domUtils.remove(txt);
    }
  }
  _$jscoverage['core/Range.js'][255]++;
  return this;
}), extractContents: (function () {
  _$jscoverage['core/Range.js'][277]++;
  return (this.collapsed? null: execContentsAction(this, 2));
}), setStart: (function (node, offset) {
  _$jscoverage['core/Range.js'][286]++;
  return setEndPoint(true, node, offset, this);
}), setEnd: (function (node, offset) {
  _$jscoverage['core/Range.js'][295]++;
  return setEndPoint(false, node, offset, this);
}), setStartAfter: (function (node) {
  _$jscoverage['core/Range.js'][308]++;
  return this.setStart(node.parentNode, (domUtils.getNodeIndex(node) + 1));
}), setStartBefore: (function (node) {
  _$jscoverage['core/Range.js'][321]++;
  return this.setStart(node.parentNode, domUtils.getNodeIndex(node));
}), setEndAfter: (function (node) {
  _$jscoverage['core/Range.js'][334]++;
  return this.setEnd(node.parentNode, (domUtils.getNodeIndex(node) + 1));
}), setEndBefore: (function (node) {
  _$jscoverage['core/Range.js'][347]++;
  return this.setEnd(node.parentNode, domUtils.getNodeIndex(node));
}), setStartAtFirst: (function (node) {
  _$jscoverage['core/Range.js'][355]++;
  return this.setStart(node, 0);
}), setStartAtLast: (function (node) {
  _$jscoverage['core/Range.js'][363]++;
  return this.setStart(node, ((node.nodeType == 3)? node.nodeValue.length: node.childNodes.length));
}), setEndAtFirst: (function (node) {
  _$jscoverage['core/Range.js'][371]++;
  return this.setEnd(node, 0);
}), setEndAtLast: (function (node) {
  _$jscoverage['core/Range.js'][379]++;
  return this.setEnd(node, ((node.nodeType == 3)? node.nodeValue.length: node.childNodes.length));
}), selectNode: (function (node) {
  _$jscoverage['core/Range.js'][388]++;
  return this.setStartBefore(node).setEndAfter(node);
}), selectNodeContents: (function (node) {
  _$jscoverage['core/Range.js'][404]++;
  return this.setStart(node, 0).setEndAtLast(node);
}), cloneRange: (function () {
  _$jscoverage['core/Range.js'][413]++;
  var me = this;
  _$jscoverage['core/Range.js'][414]++;
  return new Range(me.document).setStart(me.startContainer, me.startOffset).setEnd(me.endContainer, me.endOffset);
}), collapse: (function (toStart) {
  _$jscoverage['core/Range.js'][425]++;
  var me = this;
  _$jscoverage['core/Range.js'][426]++;
  if (toStart) {
    _$jscoverage['core/Range.js'][427]++;
    me.endContainer = me.startContainer;
    _$jscoverage['core/Range.js'][428]++;
    me.endOffset = me.startOffset;
  }
  else {
    _$jscoverage['core/Range.js'][430]++;
    me.startContainer = me.endContainer;
    _$jscoverage['core/Range.js'][431]++;
    me.startOffset = me.endOffset;
  }
  _$jscoverage['core/Range.js'][433]++;
  me.collapsed = true;
  _$jscoverage['core/Range.js'][434]++;
  return me;
}), shrinkBoundary: (function (ignoreEnd) {
  _$jscoverage['core/Range.js'][448]++;
  var me = this, child, collapsed = me.collapsed;
  _$jscoverage['core/Range.js'][450]++;
  function check(node) {
    _$jscoverage['core/Range.js'][451]++;
    return ((node.nodeType == 1) && (! domUtils.isBookmarkNode(node)) && (! dtd.$empty[node.tagName]) && (! dtd.$nonChild[node.tagName]));
}
  _$jscoverage['core/Range.js'][453]++;
  while (((me.startContainer.nodeType == 1) && (child = me.startContainer.childNodes[me.startOffset]) && check(child))) {
    _$jscoverage['core/Range.js'][456]++;
    me.setStart(child, 0);
}
  _$jscoverage['core/Range.js'][458]++;
  if (collapsed) {
    _$jscoverage['core/Range.js'][459]++;
    return me.collapse(true);
  }
  _$jscoverage['core/Range.js'][461]++;
  if ((! ignoreEnd)) {
    _$jscoverage['core/Range.js'][462]++;
    while (((me.endContainer.nodeType == 1) && (me.endOffset > 0) && (child = me.endContainer.childNodes[(me.endOffset - 1)]) && check(child))) {
      _$jscoverage['core/Range.js'][466]++;
      me.setEnd(child, child.childNodes.length);
}
  }
  _$jscoverage['core/Range.js'][469]++;
  return me;
}), getCommonAncestor: (function (includeSelf, ignoreTextNode) {
  _$jscoverage['core/Range.js'][493]++;
  var me = this, start = me.startContainer, end = me.endContainer;
  _$jscoverage['core/Range.js'][496]++;
  if ((start === end)) {
    _$jscoverage['core/Range.js'][497]++;
    if ((includeSelf && selectOneNode(this))) {
      _$jscoverage['core/Range.js'][498]++;
      start = start.childNodes[me.startOffset];
      _$jscoverage['core/Range.js'][499]++;
      if ((start.nodeType == 1)) {
        _$jscoverage['core/Range.js'][500]++;
        return start;
      }
    }
    _$jscoverage['core/Range.js'][503]++;
    return ((ignoreTextNode && (start.nodeType == 3))? start.parentNode: start);
  }
  _$jscoverage['core/Range.js'][505]++;
  return domUtils.getCommonAncestor(start, end);
}), trimBoundary: (function (ignoreEnd) {
  _$jscoverage['core/Range.js'][525]++;
  this.txtToElmBoundary();
  _$jscoverage['core/Range.js'][526]++;
  var start = this.startContainer, offset = this.startOffset, collapsed = this.collapsed, end = this.endContainer;
  _$jscoverage['core/Range.js'][530]++;
  if ((start.nodeType == 3)) {
    _$jscoverage['core/Range.js'][531]++;
    if ((offset == 0)) {
      _$jscoverage['core/Range.js'][532]++;
      this.setStartBefore(start);
    }
    else {
      _$jscoverage['core/Range.js'][534]++;
      if ((offset >= start.nodeValue.length)) {
        _$jscoverage['core/Range.js'][535]++;
        this.setStartAfter(start);
      }
      else {
        _$jscoverage['core/Range.js'][537]++;
        var textNode = domUtils.split(start, offset);
        _$jscoverage['core/Range.js'][539]++;
        if ((start === end)) {
          _$jscoverage['core/Range.js'][540]++;
          this.setEnd(textNode, (this.endOffset - offset));
        }
        else {
          _$jscoverage['core/Range.js'][541]++;
          if ((start.parentNode === end)) {
            _$jscoverage['core/Range.js'][542]++;
            this.endOffset += 1;
          }
        }
        _$jscoverage['core/Range.js'][544]++;
        this.setStartBefore(textNode);
      }
    }
    _$jscoverage['core/Range.js'][547]++;
    if (collapsed) {
      _$jscoverage['core/Range.js'][548]++;
      return this.collapse(true);
    }
  }
  _$jscoverage['core/Range.js'][551]++;
  if ((! ignoreEnd)) {
    _$jscoverage['core/Range.js'][552]++;
    offset = this.endOffset;
    _$jscoverage['core/Range.js'][553]++;
    end = this.endContainer;
    _$jscoverage['core/Range.js'][554]++;
    if ((end.nodeType == 3)) {
      _$jscoverage['core/Range.js'][555]++;
      if ((offset == 0)) {
        _$jscoverage['core/Range.js'][556]++;
        this.setEndBefore(end);
      }
      else {
        _$jscoverage['core/Range.js'][558]++;
        ((offset < end.nodeValue.length) && domUtils.split(end, offset));
        _$jscoverage['core/Range.js'][559]++;
        this.setEndAfter(end);
      }
    }
  }
  _$jscoverage['core/Range.js'][563]++;
  return this;
}), txtToElmBoundary: (function () {
  _$jscoverage['core/Range.js'][582]++;
  function adjust(r, c) {
    _$jscoverage['core/Range.js'][583]++;
    var container = r[(c + "Container")], offset = r[(c + "Offset")];
    _$jscoverage['core/Range.js'][585]++;
    if ((container.nodeType == 3)) {
      _$jscoverage['core/Range.js'][586]++;
      if ((! offset)) {
        _$jscoverage['core/Range.js'][587]++;
        (r[("set" + c.replace(/(\w)/, (function (a) {
  _$jscoverage['core/Range.js'][588]++;
  return a.toUpperCase();
})) + "Before")])(container);
      }
      else {
        _$jscoverage['core/Range.js'][590]++;
        if ((offset >= container.nodeValue.length)) {
          _$jscoverage['core/Range.js'][591]++;
          (r[("set" + c.replace(/(\w)/, (function (a) {
  _$jscoverage['core/Range.js'][592]++;
  return a.toUpperCase();
})) + "After")])(container);
        }
      }
    }
}
  _$jscoverage['core/Range.js'][598]++;
  if ((! this.collapsed)) {
    _$jscoverage['core/Range.js'][599]++;
    adjust(this, "start");
    _$jscoverage['core/Range.js'][600]++;
    adjust(this, "end");
  }
  _$jscoverage['core/Range.js'][602]++;
  return this;
}), insertNode: (function (node) {
  _$jscoverage['core/Range.js'][618]++;
  var first = node, length = 1;
  _$jscoverage['core/Range.js'][619]++;
  if ((node.nodeType == 11)) {
    _$jscoverage['core/Range.js'][620]++;
    first = node.firstChild;
    _$jscoverage['core/Range.js'][621]++;
    length = node.childNodes.length;
  }
  _$jscoverage['core/Range.js'][623]++;
  this.trimBoundary(true);
  _$jscoverage['core/Range.js'][624]++;
  var start = this.startContainer, offset = this.startOffset;
  _$jscoverage['core/Range.js'][626]++;
  var nextNode = start.childNodes[offset];
  _$jscoverage['core/Range.js'][627]++;
  if (nextNode) {
    _$jscoverage['core/Range.js'][628]++;
    start.insertBefore(node, nextNode);
  }
  else {
    _$jscoverage['core/Range.js'][630]++;
    start.appendChild(node);
  }
  _$jscoverage['core/Range.js'][632]++;
  if ((first.parentNode === this.endContainer)) {
    _$jscoverage['core/Range.js'][633]++;
    this.endOffset = (this.endOffset + length);
  }
  _$jscoverage['core/Range.js'][635]++;
  return this.setStartBefore(first);
}), setCursor: (function (toEnd, noFillData) {
  _$jscoverage['core/Range.js'][643]++;
  return this.collapse((! toEnd)).select(noFillData);
}), createBookmark: (function (serialize, same) {
  _$jscoverage['core/Range.js'][651]++;
  var endNode, startNode = this.document.createElement("span");
  _$jscoverage['core/Range.js'][653]++;
  startNode.style.cssText = "display:none;line-height:0px;";
  _$jscoverage['core/Range.js'][654]++;
  startNode.appendChild(this.document.createTextNode("\u200d"));
  _$jscoverage['core/Range.js'][655]++;
  startNode.id = ("_baidu_bookmark_start_" + (same? "": (guid++)));
  _$jscoverage['core/Range.js'][657]++;
  if ((! this.collapsed)) {
    _$jscoverage['core/Range.js'][658]++;
    endNode = startNode.cloneNode(true);
    _$jscoverage['core/Range.js'][659]++;
    endNode.id = ("_baidu_bookmark_end_" + (same? "": (guid++)));
  }
  _$jscoverage['core/Range.js'][661]++;
  this.insertNode(startNode);
  _$jscoverage['core/Range.js'][662]++;
  if (endNode) {
    _$jscoverage['core/Range.js'][663]++;
    this.collapse().insertNode(endNode).setEndBefore(endNode);
  }
  _$jscoverage['core/Range.js'][665]++;
  this.setStartAfter(startNode);
  _$jscoverage['core/Range.js'][666]++;
  return ({start: (serialize? startNode.id: startNode), end: (endNode? (serialize? endNode.id: endNode): null), id: serialize});
}), moveToBookmark: (function (bookmark) {
  _$jscoverage['core/Range.js'][678]++;
  var start = (bookmark.id? this.document.getElementById(bookmark.start): bookmark.start), end = ((bookmark.end && bookmark.id)? this.document.getElementById(bookmark.end): bookmark.end);
  _$jscoverage['core/Range.js'][680]++;
  this.setStartBefore(start);
  _$jscoverage['core/Range.js'][681]++;
  domUtils.remove(start);
  _$jscoverage['core/Range.js'][682]++;
  if (end) {
    _$jscoverage['core/Range.js'][683]++;
    this.setEndBefore(end);
    _$jscoverage['core/Range.js'][684]++;
    domUtils.remove(end);
  }
  else {
    _$jscoverage['core/Range.js'][686]++;
    this.collapse(true);
  }
  _$jscoverage['core/Range.js'][688]++;
  return this;
}), enlarge: (function (toBlock, stopFn) {
  _$jscoverage['core/Range.js'][698]++;
  var isBody = domUtils.isBody, pre, node, tmp = this.document.createTextNode("");
  _$jscoverage['core/Range.js'][700]++;
  if (toBlock) {
    _$jscoverage['core/Range.js'][701]++;
    node = this.startContainer;
    _$jscoverage['core/Range.js'][702]++;
    if ((node.nodeType == 1)) {
      _$jscoverage['core/Range.js'][703]++;
      if (node.childNodes[this.startOffset]) {
        _$jscoverage['core/Range.js'][704]++;
        pre = (node = node.childNodes[this.startOffset]);
      }
      else {
        _$jscoverage['core/Range.js'][706]++;
        node.appendChild(tmp);
        _$jscoverage['core/Range.js'][707]++;
        pre = (node = tmp);
      }
    }
    else {
      _$jscoverage['core/Range.js'][710]++;
      pre = node;
    }
    _$jscoverage['core/Range.js'][712]++;
    while (true) {
      _$jscoverage['core/Range.js'][713]++;
      if (domUtils.isBlockElm(node)) {
        _$jscoverage['core/Range.js'][714]++;
        node = pre;
        _$jscoverage['core/Range.js'][715]++;
        while (((pre = node.previousSibling) && (! domUtils.isBlockElm(pre)))) {
          _$jscoverage['core/Range.js'][716]++;
          node = pre;
}
        _$jscoverage['core/Range.js'][718]++;
        this.setStartBefore(node);
        _$jscoverage['core/Range.js'][719]++;
        break;
      }
      _$jscoverage['core/Range.js'][721]++;
      pre = node;
      _$jscoverage['core/Range.js'][722]++;
      node = node.parentNode;
}
    _$jscoverage['core/Range.js'][724]++;
    node = this.endContainer;
    _$jscoverage['core/Range.js'][725]++;
    if ((node.nodeType == 1)) {
      _$jscoverage['core/Range.js'][726]++;
      if ((pre = node.childNodes[this.endOffset])) {
        _$jscoverage['core/Range.js'][727]++;
        node.insertBefore(tmp, pre);
      }
      else {
        _$jscoverage['core/Range.js'][729]++;
        node.appendChild(tmp);
      }
      _$jscoverage['core/Range.js'][731]++;
      pre = (node = tmp);
    }
    else {
      _$jscoverage['core/Range.js'][733]++;
      pre = node;
    }
    _$jscoverage['core/Range.js'][735]++;
    while (true) {
      _$jscoverage['core/Range.js'][736]++;
      if (domUtils.isBlockElm(node)) {
        _$jscoverage['core/Range.js'][737]++;
        node = pre;
        _$jscoverage['core/Range.js'][738]++;
        while (((pre = node.nextSibling) && (! domUtils.isBlockElm(pre)))) {
          _$jscoverage['core/Range.js'][739]++;
          node = pre;
}
        _$jscoverage['core/Range.js'][741]++;
        this.setEndAfter(node);
        _$jscoverage['core/Range.js'][742]++;
        break;
      }
      _$jscoverage['core/Range.js'][744]++;
      pre = node;
      _$jscoverage['core/Range.js'][745]++;
      node = node.parentNode;
}
    _$jscoverage['core/Range.js'][747]++;
    if ((tmp.parentNode === this.endContainer)) {
      _$jscoverage['core/Range.js'][748]++;
      (this.endOffset--);
    }
    _$jscoverage['core/Range.js'][750]++;
    domUtils.remove(tmp);
  }
  _$jscoverage['core/Range.js'][754]++;
  if ((! this.collapsed)) {
    _$jscoverage['core/Range.js'][755]++;
    while ((this.startOffset == 0)) {
      _$jscoverage['core/Range.js'][756]++;
      if ((stopFn && stopFn(this.startContainer))) {
        _$jscoverage['core/Range.js'][757]++;
        break;
      }
      _$jscoverage['core/Range.js'][759]++;
      if (isBody(this.startContainer)) {
        _$jscoverage['core/Range.js'][760]++;
        break;
      }
      _$jscoverage['core/Range.js'][762]++;
      this.setStartBefore(this.startContainer);
}
    _$jscoverage['core/Range.js'][764]++;
    while ((this.endOffset == ((this.endContainer.nodeType == 1)? this.endContainer.childNodes.length: this.endContainer.nodeValue.length))) {
      _$jscoverage['core/Range.js'][765]++;
      if ((stopFn && stopFn(this.endContainer))) {
        _$jscoverage['core/Range.js'][766]++;
        break;
      }
      _$jscoverage['core/Range.js'][768]++;
      if (isBody(this.endContainer)) {
        _$jscoverage['core/Range.js'][769]++;
        break;
      }
      _$jscoverage['core/Range.js'][771]++;
      this.setEndAfter(this.endContainer);
}
  }
  _$jscoverage['core/Range.js'][774]++;
  return this;
}), adjustmentBoundary: (function () {
  _$jscoverage['core/Range.js'][785]++;
  if ((! this.collapsed)) {
    _$jscoverage['core/Range.js'][786]++;
    while (((! domUtils.isBody(this.startContainer)) && (this.startOffset == this.startContainer[((this.startContainer.nodeType == 3)? "nodeValue": "childNodes")].length))) {
      _$jscoverage['core/Range.js'][789]++;
      this.setStartAfter(this.startContainer);
}
    _$jscoverage['core/Range.js'][791]++;
    while (((! domUtils.isBody(this.endContainer)) && (! this.endOffset))) {
      _$jscoverage['core/Range.js'][792]++;
      this.setEndBefore(this.endContainer);
}
  }
  _$jscoverage['core/Range.js'][795]++;
  return this;
}), applyInlineStyle: (function (tagName, attrs, list) {
  _$jscoverage['core/Range.js'][808]++;
  if (this.collapsed) {
    _$jscoverage['core/Range.js'][808]++;
    return this;
  }
  _$jscoverage['core/Range.js'][809]++;
  this.trimBoundary().enlarge(false, (function (node) {
  _$jscoverage['core/Range.js'][811]++;
  return ((node.nodeType == 1) && domUtils.isBlockElm(node));
})).adjustmentBoundary();
  _$jscoverage['core/Range.js'][813]++;
  var bookmark = this.createBookmark(), end = bookmark.end, filterFn = (function (node) {
  _$jscoverage['core/Range.js'][816]++;
  return ((node.nodeType == 1)? (node.tagName.toLowerCase() != "br"): (! domUtils.isWhitespace(node)));
}), current = domUtils.getNextDomNode(bookmark.start, false, filterFn), node, pre, range = this.cloneRange();
  _$jscoverage['core/Range.js'][822]++;
  while ((current && (domUtils.getPosition(current, end) & domUtils.POSITION_PRECEDING))) {
    _$jscoverage['core/Range.js'][823]++;
    if (((current.nodeType == 3) || dtd[tagName][current.tagName])) {
      _$jscoverage['core/Range.js'][824]++;
      range.setStartBefore(current);
      _$jscoverage['core/Range.js'][825]++;
      node = current;
      _$jscoverage['core/Range.js'][826]++;
      while ((node && ((node.nodeType == 3) || dtd[tagName][node.tagName]) && (node !== end))) {
        _$jscoverage['core/Range.js'][827]++;
        pre = node;
        _$jscoverage['core/Range.js'][828]++;
        node = domUtils.getNextDomNode(node, (node.nodeType == 1), null, (function (parent) {
  _$jscoverage['core/Range.js'][829]++;
  return dtd[tagName][parent.tagName];
}));
}
      _$jscoverage['core/Range.js'][832]++;
      var frag = range.setEndAfter(pre).extractContents(), elm;
      _$jscoverage['core/Range.js'][833]++;
      if ((list && (list.length > 0))) {
        _$jscoverage['core/Range.js'][834]++;
        var level, top;
        _$jscoverage['core/Range.js'][835]++;
        top = (level = list[0].cloneNode(false));
        _$jscoverage['core/Range.js'][836]++;
        for (var i = 1, ci; (ci = list[(i++)]);) {
          _$jscoverage['core/Range.js'][837]++;
          level.appendChild(ci.cloneNode(false));
          _$jscoverage['core/Range.js'][838]++;
          level = level.firstChild;
}
        _$jscoverage['core/Range.js'][840]++;
        elm = level;
      }
      else {
        _$jscoverage['core/Range.js'][842]++;
        elm = range.document.createElement(tagName);
      }
      _$jscoverage['core/Range.js'][844]++;
      if (attrs) {
        _$jscoverage['core/Range.js'][845]++;
        domUtils.setAttributes(elm, attrs);
      }
      _$jscoverage['core/Range.js'][847]++;
      elm.appendChild(frag);
      _$jscoverage['core/Range.js'][848]++;
      range.insertNode((list? top: elm));
      _$jscoverage['core/Range.js'][850]++;
      var aNode;
      _$jscoverage['core/Range.js'][851]++;
      if (((tagName == "span") && attrs.style && /text\-decoration/.test(attrs.style) && (aNode = domUtils.findParentByTagName(elm, "a", true)))) {
        _$jscoverage['core/Range.js'][852]++;
        domUtils.setAttributes(aNode, attrs);
        _$jscoverage['core/Range.js'][853]++;
        domUtils.remove(elm, true);
        _$jscoverage['core/Range.js'][854]++;
        elm = aNode;
      }
      else {
        _$jscoverage['core/Range.js'][856]++;
        domUtils.mergeSibling(elm);
        _$jscoverage['core/Range.js'][857]++;
        domUtils.clearEmptySibling(elm);
      }
      _$jscoverage['core/Range.js'][860]++;
      domUtils.mergeChild(elm, attrs);
      _$jscoverage['core/Range.js'][861]++;
      current = domUtils.getNextDomNode(elm, false, filterFn);
      _$jscoverage['core/Range.js'][862]++;
      domUtils.mergeToParent(elm);
      _$jscoverage['core/Range.js'][863]++;
      if ((node === end)) {
        _$jscoverage['core/Range.js'][864]++;
        break;
      }
    }
    else {
      _$jscoverage['core/Range.js'][867]++;
      current = domUtils.getNextDomNode(current, true, filterFn);
    }
}
  _$jscoverage['core/Range.js'][870]++;
  return this.moveToBookmark(bookmark);
}), removeInlineStyle: (function (tagNames) {
  _$jscoverage['core/Range.js'][880]++;
  if (this.collapsed) {
    _$jscoverage['core/Range.js'][880]++;
    return this;
  }
  _$jscoverage['core/Range.js'][881]++;
  tagNames = (utils.isArray(tagNames)? tagNames: [tagNames]);
  _$jscoverage['core/Range.js'][882]++;
  this.shrinkBoundary().adjustmentBoundary();
  _$jscoverage['core/Range.js'][883]++;
  var start = this.startContainer, end = this.endContainer;
  _$jscoverage['core/Range.js'][884]++;
  while (true) {
    _$jscoverage['core/Range.js'][885]++;
    if ((start.nodeType == 1)) {
      _$jscoverage['core/Range.js'][886]++;
      if ((utils.indexOf(tagNames, start.tagName.toLowerCase()) > -1)) {
        _$jscoverage['core/Range.js'][887]++;
        break;
      }
      _$jscoverage['core/Range.js'][889]++;
      if ((start.tagName.toLowerCase() == "body")) {
        _$jscoverage['core/Range.js'][890]++;
        start = null;
        _$jscoverage['core/Range.js'][891]++;
        break;
      }
    }
    _$jscoverage['core/Range.js'][894]++;
    start = start.parentNode;
}
  _$jscoverage['core/Range.js'][896]++;
  while (true) {
    _$jscoverage['core/Range.js'][897]++;
    if ((end.nodeType == 1)) {
      _$jscoverage['core/Range.js'][898]++;
      if ((utils.indexOf(tagNames, end.tagName.toLowerCase()) > -1)) {
        _$jscoverage['core/Range.js'][899]++;
        break;
      }
      _$jscoverage['core/Range.js'][901]++;
      if ((end.tagName.toLowerCase() == "body")) {
        _$jscoverage['core/Range.js'][902]++;
        end = null;
        _$jscoverage['core/Range.js'][903]++;
        break;
      }
    }
    _$jscoverage['core/Range.js'][906]++;
    end = end.parentNode;
}
  _$jscoverage['core/Range.js'][908]++;
  var bookmark = this.createBookmark(), frag, tmpRange;
  _$jscoverage['core/Range.js'][911]++;
  if (start) {
    _$jscoverage['core/Range.js'][912]++;
    tmpRange = this.cloneRange().setEndBefore(bookmark.start).setStartBefore(start);
    _$jscoverage['core/Range.js'][913]++;
    frag = tmpRange.extractContents();
    _$jscoverage['core/Range.js'][914]++;
    tmpRange.insertNode(frag);
    _$jscoverage['core/Range.js'][915]++;
    domUtils.clearEmptySibling(start, true);
    _$jscoverage['core/Range.js'][916]++;
    start.parentNode.insertBefore(bookmark.start, start);
  }
  _$jscoverage['core/Range.js'][918]++;
  if (end) {
    _$jscoverage['core/Range.js'][919]++;
    tmpRange = this.cloneRange().setStartAfter(bookmark.end).setEndAfter(end);
    _$jscoverage['core/Range.js'][920]++;
    frag = tmpRange.extractContents();
    _$jscoverage['core/Range.js'][921]++;
    tmpRange.insertNode(frag);
    _$jscoverage['core/Range.js'][922]++;
    domUtils.clearEmptySibling(end, false, true);
    _$jscoverage['core/Range.js'][923]++;
    end.parentNode.insertBefore(bookmark.end, end.nextSibling);
  }
  _$jscoverage['core/Range.js'][925]++;
  var current = domUtils.getNextDomNode(bookmark.start, false, (function (node) {
  _$jscoverage['core/Range.js'][926]++;
  return (node.nodeType == 1);
})), next;
  _$jscoverage['core/Range.js'][928]++;
  while ((current && (current !== bookmark.end))) {
    _$jscoverage['core/Range.js'][929]++;
    next = domUtils.getNextDomNode(current, true, (function (node) {
  _$jscoverage['core/Range.js'][930]++;
  return (node.nodeType == 1);
}));
    _$jscoverage['core/Range.js'][932]++;
    if ((utils.indexOf(tagNames, current.tagName.toLowerCase()) > -1)) {
      _$jscoverage['core/Range.js'][933]++;
      domUtils.remove(current, true);
    }
    _$jscoverage['core/Range.js'][935]++;
    current = next;
}
  _$jscoverage['core/Range.js'][937]++;
  return this.moveToBookmark(bookmark);
}), getClosedNode: (function () {
  _$jscoverage['core/Range.js'][947]++;
  var node;
  _$jscoverage['core/Range.js'][948]++;
  if ((! this.collapsed)) {
    _$jscoverage['core/Range.js'][949]++;
    var range = this.cloneRange().adjustmentBoundary().shrinkBoundary();
    _$jscoverage['core/Range.js'][950]++;
    if (selectOneNode(range)) {
      _$jscoverage['core/Range.js'][951]++;
      var child = range.startContainer.childNodes[range.startOffset];
      _$jscoverage['core/Range.js'][952]++;
      if ((child && (child.nodeType == 1) && (dtd.$empty[child.tagName] || dtd.$nonChild[child.tagName]))) {
        _$jscoverage['core/Range.js'][953]++;
        node = child;
      }
    }
  }
  _$jscoverage['core/Range.js'][957]++;
  return node;
}), select: (browser.ie? (function (noFillData, textRange) {
  _$jscoverage['core/Range.js'][965]++;
  var nativeRange;
  _$jscoverage['core/Range.js'][966]++;
  if ((! this.collapsed)) {
    _$jscoverage['core/Range.js'][967]++;
    this.shrinkBoundary();
  }
  _$jscoverage['core/Range.js'][968]++;
  var node = this.getClosedNode();
  _$jscoverage['core/Range.js'][969]++;
  if ((node && (! textRange))) {
    _$jscoverage['core/Range.js'][970]++;
    try {
      _$jscoverage['core/Range.js'][971]++;
      nativeRange = this.document.body.createControlRange();
      _$jscoverage['core/Range.js'][972]++;
      nativeRange.addElement(node);
      _$jscoverage['core/Range.js'][973]++;
      nativeRange.select();
    }
    catch (e) {
    }
    _$jscoverage['core/Range.js'][975]++;
    return this;
  }
  _$jscoverage['core/Range.js'][977]++;
  var bookmark = this.createBookmark(), start = bookmark.start, end;
  _$jscoverage['core/Range.js'][980]++;
  nativeRange = this.document.body.createTextRange();
  _$jscoverage['core/Range.js'][981]++;
  nativeRange.moveToElementText(start);
  _$jscoverage['core/Range.js'][982]++;
  nativeRange.moveStart("character", 1);
  _$jscoverage['core/Range.js'][983]++;
  if ((! this.collapsed)) {
    _$jscoverage['core/Range.js'][984]++;
    var nativeRangeEnd = this.document.body.createTextRange();
    _$jscoverage['core/Range.js'][985]++;
    end = bookmark.end;
    _$jscoverage['core/Range.js'][986]++;
    nativeRangeEnd.moveToElementText(end);
    _$jscoverage['core/Range.js'][987]++;
    nativeRange.setEndPoint("EndToEnd", nativeRangeEnd);
  }
  else {
    _$jscoverage['core/Range.js'][989]++;
    if (((! noFillData) && (this.startContainer.nodeType != 3))) {
      _$jscoverage['core/Range.js'][991]++;
      var tmpText = this.document.createTextNode(fillChar), tmp = this.document.createElement("span");
      _$jscoverage['core/Range.js'][993]++;
      tmp.appendChild(this.document.createTextNode(fillChar));
      _$jscoverage['core/Range.js'][994]++;
      start.parentNode.insertBefore(tmp, start);
      _$jscoverage['core/Range.js'][995]++;
      start.parentNode.insertBefore(tmpText, start);
      _$jscoverage['core/Range.js'][997]++;
      removeFillData(this.document, tmpText);
      _$jscoverage['core/Range.js'][998]++;
      fillData = tmpText;
      _$jscoverage['core/Range.js'][999]++;
      mergeSibling(tmp, "previousSibling");
      _$jscoverage['core/Range.js'][1000]++;
      mergeSibling(start, "nextSibling");
      _$jscoverage['core/Range.js'][1001]++;
      nativeRange.moveStart("character", -1);
      _$jscoverage['core/Range.js'][1002]++;
      nativeRange.collapse(true);
    }
  }
  _$jscoverage['core/Range.js'][1005]++;
  this.moveToBookmark(bookmark);
  _$jscoverage['core/Range.js'][1006]++;
  (tmp && domUtils.remove(tmp));
  _$jscoverage['core/Range.js'][1008]++;
  try {
    _$jscoverage['core/Range.js'][1009]++;
    nativeRange.select();
  }
  catch (e) {
  }
  _$jscoverage['core/Range.js'][1012]++;
  return this;
}): (function (notInsertFillData) {
  _$jscoverage['core/Range.js'][1014]++;
  function checkOffset(rng) {
    _$jscoverage['core/Range.js'][1016]++;
    function check(node, offset, dir) {
      _$jscoverage['core/Range.js'][1017]++;
      if (((node.nodeType == 3) && (node.nodeValue.length < offset))) {
        _$jscoverage['core/Range.js'][1018]++;
        rng[(dir + "Offset")] = node.nodeValue.length;
      }
}
    _$jscoverage['core/Range.js'][1021]++;
    check(rng.startContainer, rng.startOffset, "start");
    _$jscoverage['core/Range.js'][1022]++;
    check(rng.endContainer, rng.endOffset, "end");
}
  _$jscoverage['core/Range.js'][1024]++;
  var win = domUtils.getWindow(this.document), sel = win.getSelection(), txtNode;
  _$jscoverage['core/Range.js'][1029]++;
  (browser.gecko? this.document.body.focus(): win.focus());
  _$jscoverage['core/Range.js'][1030]++;
  if (sel) {
    _$jscoverage['core/Range.js'][1031]++;
    sel.removeAllRanges();
    _$jscoverage['core/Range.js'][1034]++;
    if ((this.collapsed && (! notInsertFillData))) {
      _$jscoverage['core/Range.js'][1046]++;
      var start = this.startContainer, child = start;
      _$jscoverage['core/Range.js'][1047]++;
      if ((start.nodeType == 1)) {
        _$jscoverage['core/Range.js'][1048]++;
        child = start.childNodes[this.startOffset];
      }
      _$jscoverage['core/Range.js'][1051]++;
      if (((! ((start.nodeType == 3) && this.startOffset)) && (child? ((! child.previousSibling) || (child.previousSibling.nodeType != 3)): ((! start.lastChild) || (start.lastChild.nodeType != 3))))) {
        _$jscoverage['core/Range.js'][1058]++;
        txtNode = this.document.createTextNode(fillChar);
        _$jscoverage['core/Range.js'][1060]++;
        this.insertNode(txtNode);
        _$jscoverage['core/Range.js'][1061]++;
        removeFillData(this.document, txtNode);
        _$jscoverage['core/Range.js'][1062]++;
        mergeSibling(txtNode, "previousSibling");
        _$jscoverage['core/Range.js'][1063]++;
        mergeSibling(txtNode, "nextSibling");
        _$jscoverage['core/Range.js'][1064]++;
        fillData = txtNode;
        _$jscoverage['core/Range.js'][1065]++;
        this.setStart(txtNode, (browser.webkit? 1: 0)).collapse(true);
      }
    }
    _$jscoverage['core/Range.js'][1068]++;
    var nativeRange = this.document.createRange();
    _$jscoverage['core/Range.js'][1069]++;
    if ((this.collapsed && browser.opera && (this.startContainer.nodeType == 1))) {
      _$jscoverage['core/Range.js'][1070]++;
      var child = this.startContainer.childNodes[this.startOffset];
      _$jscoverage['core/Range.js'][1071]++;
      if ((! child)) {
        _$jscoverage['core/Range.js'][1073]++;
        child = this.startContainer.lastChild;
        _$jscoverage['core/Range.js'][1074]++;
        if ((child && domUtils.isBr(child))) {
          _$jscoverage['core/Range.js'][1075]++;
          this.setStartBefore(child).collapse(true);
        }
      }
      else {
        _$jscoverage['core/Range.js'][1079]++;
        while ((child && domUtils.isBlockElm(child))) {
          _$jscoverage['core/Range.js'][1080]++;
          if (((child.nodeType == 1) && child.childNodes[0])) {
            _$jscoverage['core/Range.js'][1081]++;
            child = child.childNodes[0];
          }
          else {
            _$jscoverage['core/Range.js'][1083]++;
            break;
          }
}
        _$jscoverage['core/Range.js'][1086]++;
        (child && this.setStartBefore(child).collapse(true));
      }
    }
    _$jscoverage['core/Range.js'][1091]++;
    checkOffset(this);
    _$jscoverage['core/Range.js'][1092]++;
    nativeRange.setStart(this.startContainer, this.startOffset);
    _$jscoverage['core/Range.js'][1093]++;
    nativeRange.setEnd(this.endContainer, this.endOffset);
    _$jscoverage['core/Range.js'][1094]++;
    sel.addRange(nativeRange);
  }
  _$jscoverage['core/Range.js'][1096]++;
  return this;
})), scrollToView: (function (win, offset) {
  _$jscoverage['core/Range.js'][1104]++;
  win = (win? window: domUtils.getWindow(this.document));
  _$jscoverage['core/Range.js'][1105]++;
  var me = this, span = me.document.createElement("span");
  _$jscoverage['core/Range.js'][1108]++;
  span.innerHTML = "&nbsp;";
  _$jscoverage['core/Range.js'][1109]++;
  me.cloneRange().insertNode(span);
  _$jscoverage['core/Range.js'][1110]++;
  domUtils.scrollToView(span, win, offset);
  _$jscoverage['core/Range.js'][1111]++;
  domUtils.remove(span);
  _$jscoverage['core/Range.js'][1112]++;
  return me;
}), inFillChar: (function () {
  _$jscoverage['core/Range.js'][1115]++;
  var start = this.startContainer;
  _$jscoverage['core/Range.js'][1116]++;
  if ((this.collapsed && (start.nodeType == 3) && ((start.nodeValue.replace(new RegExp(("^" + domUtils.fillChar)), "").length + 1) == start.nodeValue.length))) {
    _$jscoverage['core/Range.js'][1119]++;
    return true;
  }
  _$jscoverage['core/Range.js'][1121]++;
  return false;
}), createAddress: (function (ignoreEnd, ignoreTxt) {
  _$jscoverage['core/Range.js'][1124]++;
  var addr = {}, me = this;
  _$jscoverage['core/Range.js'][1126]++;
  function getAddress(isStart) {
    _$jscoverage['core/Range.js'][1127]++;
    var node = (isStart? me.startContainer: me.endContainer);
    _$jscoverage['core/Range.js'][1128]++;
    var parents = domUtils.findParents(node, true, (function (node) {
  _$jscoverage['core/Range.js'][1128]++;
  return (! domUtils.isBody(node));
})), addrs = [];
    _$jscoverage['core/Range.js'][1130]++;
    for (var i = 0, ci; (ci = parents[(i++)]);) {
      _$jscoverage['core/Range.js'][1131]++;
      addrs.push(domUtils.getNodeIndex(ci, ignoreTxt));
}
    _$jscoverage['core/Range.js'][1133]++;
    var firstIndex = 0;
    _$jscoverage['core/Range.js'][1135]++;
    if (ignoreTxt) {
      _$jscoverage['core/Range.js'][1136]++;
      if ((node.nodeType == 3)) {
        _$jscoverage['core/Range.js'][1137]++;
        var tmpNode = node;
        _$jscoverage['core/Range.js'][1138]++;
        while ((tmpNode = tmpNode.previousSibling)) {
          _$jscoverage['core/Range.js'][1139]++;
          if ((tmpNode.nodeType == 3)) {
            _$jscoverage['core/Range.js'][1140]++;
            firstIndex += tmpNode.nodeValue.replace(fillCharReg, "").length;
          }
          else {
            _$jscoverage['core/Range.js'][1142]++;
            break;
          }
}
        _$jscoverage['core/Range.js'][1145]++;
        firstIndex += ((isStart? me.startOffset: me.endOffset) - (fillCharReg.test(node.nodeValue)? 1: 0));
      }
      else {
        _$jscoverage['core/Range.js'][1147]++;
        node = node.childNodes[(isStart? me.startOffset: me.endOffset)];
        _$jscoverage['core/Range.js'][1148]++;
        if (node) {
          _$jscoverage['core/Range.js'][1149]++;
          firstIndex = domUtils.getNodeIndex(node, ignoreTxt);
        }
        else {
          _$jscoverage['core/Range.js'][1151]++;
          node = (isStart? me.startContainer: me.endContainer);
          _$jscoverage['core/Range.js'][1152]++;
          var first = node.firstChild;
          _$jscoverage['core/Range.js'][1153]++;
          while (first) {
            _$jscoverage['core/Range.js'][1154]++;
            if (domUtils.isFillChar(first)) {
              _$jscoverage['core/Range.js'][1155]++;
              first = first.nextSibling;
              _$jscoverage['core/Range.js'][1156]++;
              continue;
            }
            _$jscoverage['core/Range.js'][1158]++;
            (firstIndex++);
            _$jscoverage['core/Range.js'][1159]++;
            if ((first.nodeType == 3)) {
              _$jscoverage['core/Range.js'][1160]++;
              while ((first && (first.nodeType == 3))) {
                _$jscoverage['core/Range.js'][1161]++;
                first = first.nextSibling;
}
            }
            else {
              _$jscoverage['core/Range.js'][1164]++;
              first = first.nextSibling;
            }
}
        }
      }
    }
    else {
      _$jscoverage['core/Range.js'][1171]++;
      firstIndex = (isStart? me.startOffset: me.endOffset);
    }
    _$jscoverage['core/Range.js'][1173]++;
    if ((firstIndex < 0)) {
      _$jscoverage['core/Range.js'][1174]++;
      firstIndex = 0;
    }
    _$jscoverage['core/Range.js'][1176]++;
    addrs.push(firstIndex);
    _$jscoverage['core/Range.js'][1177]++;
    return addrs;
}
  _$jscoverage['core/Range.js'][1179]++;
  addr.startAddress = getAddress(true);
  _$jscoverage['core/Range.js'][1180]++;
  if ((! ignoreEnd)) {
    _$jscoverage['core/Range.js'][1181]++;
    addr.endAddress = (me.collapsed? [].concat(addr.startAddress): getAddress());
  }
  _$jscoverage['core/Range.js'][1183]++;
  return addr;
}), moveToAddress: (function (addr, ignoreEnd) {
  _$jscoverage['core/Range.js'][1186]++;
  var me = this;
  _$jscoverage['core/Range.js'][1187]++;
  function getNode(address, isStart) {
    _$jscoverage['core/Range.js'][1188]++;
    var tmpNode = me.document.body, parentNode, offset;
    _$jscoverage['core/Range.js'][1190]++;
    for (var i = 0, ci, l = address.length; (i < l); (i++)) {
      _$jscoverage['core/Range.js'][1191]++;
      ci = address[i];
      _$jscoverage['core/Range.js'][1192]++;
      parentNode = tmpNode;
      _$jscoverage['core/Range.js'][1193]++;
      tmpNode = tmpNode.childNodes[ci];
      _$jscoverage['core/Range.js'][1194]++;
      if ((! tmpNode)) {
        _$jscoverage['core/Range.js'][1195]++;
        offset = ci;
        _$jscoverage['core/Range.js'][1196]++;
        break;
      }
}
    _$jscoverage['core/Range.js'][1199]++;
    if (isStart) {
      _$jscoverage['core/Range.js'][1200]++;
      if (tmpNode) {
        _$jscoverage['core/Range.js'][1201]++;
        me.setStartBefore(tmpNode);
      }
      else {
        _$jscoverage['core/Range.js'][1203]++;
        me.setStart(parentNode, offset);
      }
    }
    else {
      _$jscoverage['core/Range.js'][1206]++;
      if (tmpNode) {
        _$jscoverage['core/Range.js'][1207]++;
        me.setEndBefore(tmpNode);
      }
      else {
        _$jscoverage['core/Range.js'][1209]++;
        me.setEnd(parentNode, offset);
      }
    }
}
  _$jscoverage['core/Range.js'][1213]++;
  getNode(addr.startAddress, true);
  _$jscoverage['core/Range.js'][1214]++;
  ((! ignoreEnd) && addr.endAddress && getNode(addr.endAddress));
  _$jscoverage['core/Range.js'][1215]++;
  return me;
}), equals: (function (rng) {
  _$jscoverage['core/Range.js'][1218]++;
  for (var p in this) {
    _$jscoverage['core/Range.js'][1219]++;
    if (this.hasOwnProperty(p)) {
      _$jscoverage['core/Range.js'][1220]++;
      if ((this[p] !== rng[p])) {
        _$jscoverage['core/Range.js'][1221]++;
        return false;
      }
    }
}
  _$jscoverage['core/Range.js'][1224]++;
  return true;
}), traversal: (function (doFn, filterFn) {
  _$jscoverage['core/Range.js'][1228]++;
  if (this.collapsed) {
    _$jscoverage['core/Range.js'][1229]++;
    return this;
  }
  _$jscoverage['core/Range.js'][1230]++;
  var bookmark = this.createBookmark(), end = bookmark.end, current = domUtils.getNextDomNode(bookmark.start, false, filterFn);
  _$jscoverage['core/Range.js'][1233]++;
  while ((current && (current !== end) && (domUtils.getPosition(current, end) & domUtils.POSITION_PRECEDING))) {
    _$jscoverage['core/Range.js'][1234]++;
    var tmpNode = domUtils.getNextDomNode(current, false, filterFn);
    _$jscoverage['core/Range.js'][1235]++;
    doFn(current);
    _$jscoverage['core/Range.js'][1236]++;
    current = tmpNode;
}
  _$jscoverage['core/Range.js'][1238]++;
  return this.moveToBookmark(bookmark);
})};
})();
