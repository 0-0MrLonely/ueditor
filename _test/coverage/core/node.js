/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['core/node.js']) {
  _$jscoverage['core/node.js'] = [];
  _$jscoverage['core/node.js'][8] = 0;
  _$jscoverage['core/node.js'][9] = 0;
  _$jscoverage['core/node.js'][10] = 0;
  _$jscoverage['core/node.js'][11] = 0;
  _$jscoverage['core/node.js'][12] = 0;
  _$jscoverage['core/node.js'][13] = 0;
  _$jscoverage['core/node.js'][14] = 0;
  _$jscoverage['core/node.js'][15] = 0;
  _$jscoverage['core/node.js'][17] = 0;
  _$jscoverage['core/node.js'][20] = 0;
  _$jscoverage['core/node.js'][21] = 0;
  _$jscoverage['core/node.js'][22] = 0;
  _$jscoverage['core/node.js'][25] = 0;
  _$jscoverage['core/node.js'][27] = 0;
  _$jscoverage['core/node.js'][28] = 0;
  _$jscoverage['core/node.js'][34] = 0;
  _$jscoverage['core/node.js'][35] = 0;
  _$jscoverage['core/node.js'][36] = 0;
  _$jscoverage['core/node.js'][38] = 0;
  _$jscoverage['core/node.js'][45] = 0;
  _$jscoverage['core/node.js'][46] = 0;
  _$jscoverage['core/node.js'][51] = 0;
  _$jscoverage['core/node.js'][52] = 0;
  _$jscoverage['core/node.js'][54] = 0;
  _$jscoverage['core/node.js'][56] = 0;
  _$jscoverage['core/node.js'][57] = 0;
  _$jscoverage['core/node.js'][58] = 0;
  _$jscoverage['core/node.js'][60] = 0;
  _$jscoverage['core/node.js'][62] = 0;
  _$jscoverage['core/node.js'][64] = 0;
  _$jscoverage['core/node.js'][65] = 0;
  _$jscoverage['core/node.js'][67] = 0;
  _$jscoverage['core/node.js'][68] = 0;
  _$jscoverage['core/node.js'][70] = 0;
  _$jscoverage['core/node.js'][72] = 0;
  _$jscoverage['core/node.js'][75] = 0;
  _$jscoverage['core/node.js'][76] = 0;
  _$jscoverage['core/node.js'][79] = 0;
  _$jscoverage['core/node.js'][80] = 0;
  _$jscoverage['core/node.js'][81] = 0;
  _$jscoverage['core/node.js'][82] = 0;
  _$jscoverage['core/node.js'][83] = 0;
  _$jscoverage['core/node.js'][84] = 0;
  _$jscoverage['core/node.js'][85] = 0;
  _$jscoverage['core/node.js'][87] = 0;
  _$jscoverage['core/node.js'][89] = 0;
  _$jscoverage['core/node.js'][94] = 0;
  _$jscoverage['core/node.js'][95] = 0;
  _$jscoverage['core/node.js'][96] = 0;
  _$jscoverage['core/node.js'][98] = 0;
  _$jscoverage['core/node.js'][99] = 0;
  _$jscoverage['core/node.js'][100] = 0;
  _$jscoverage['core/node.js'][101] = 0;
  _$jscoverage['core/node.js'][102] = 0;
  _$jscoverage['core/node.js'][104] = 0;
  _$jscoverage['core/node.js'][107] = 0;
  _$jscoverage['core/node.js'][108] = 0;
  _$jscoverage['core/node.js'][109] = 0;
  _$jscoverage['core/node.js'][110] = 0;
  _$jscoverage['core/node.js'][112] = 0;
  _$jscoverage['core/node.js'][117] = 0;
  _$jscoverage['core/node.js'][118] = 0;
  _$jscoverage['core/node.js'][121] = 0;
  _$jscoverage['core/node.js'][122] = 0;
  _$jscoverage['core/node.js'][123] = 0;
  _$jscoverage['core/node.js'][124] = 0;
  _$jscoverage['core/node.js'][126] = 0;
  _$jscoverage['core/node.js'][127] = 0;
  _$jscoverage['core/node.js'][128] = 0;
  _$jscoverage['core/node.js'][129] = 0;
  _$jscoverage['core/node.js'][135] = 0;
  _$jscoverage['core/node.js'][136] = 0;
  _$jscoverage['core/node.js'][137] = 0;
  _$jscoverage['core/node.js'][139] = 0;
  _$jscoverage['core/node.js'][140] = 0;
  _$jscoverage['core/node.js'][141] = 0;
  _$jscoverage['core/node.js'][146] = 0;
  _$jscoverage['core/node.js'][148] = 0;
  _$jscoverage['core/node.js'][149] = 0;
  _$jscoverage['core/node.js'][150] = 0;
  _$jscoverage['core/node.js'][153] = 0;
  _$jscoverage['core/node.js'][154] = 0;
  _$jscoverage['core/node.js'][156] = 0;
  _$jscoverage['core/node.js'][157] = 0;
  _$jscoverage['core/node.js'][158] = 0;
  _$jscoverage['core/node.js'][160] = 0;
  _$jscoverage['core/node.js'][161] = 0;
  _$jscoverage['core/node.js'][162] = 0;
  _$jscoverage['core/node.js'][163] = 0;
  _$jscoverage['core/node.js'][164] = 0;
  _$jscoverage['core/node.js'][166] = 0;
  _$jscoverage['core/node.js'][168] = 0;
  _$jscoverage['core/node.js'][172] = 0;
  _$jscoverage['core/node.js'][176] = 0;
  _$jscoverage['core/node.js'][177] = 0;
  _$jscoverage['core/node.js'][179] = 0;
  _$jscoverage['core/node.js'][180] = 0;
  _$jscoverage['core/node.js'][183] = 0;
  _$jscoverage['core/node.js'][184] = 0;
  _$jscoverage['core/node.js'][185] = 0;
  _$jscoverage['core/node.js'][188] = 0;
  _$jscoverage['core/node.js'][189] = 0;
  _$jscoverage['core/node.js'][191] = 0;
  _$jscoverage['core/node.js'][194] = 0;
  _$jscoverage['core/node.js'][195] = 0;
  _$jscoverage['core/node.js'][197] = 0;
  _$jscoverage['core/node.js'][200] = 0;
  _$jscoverage['core/node.js'][201] = 0;
  _$jscoverage['core/node.js'][202] = 0;
  _$jscoverage['core/node.js'][203] = 0;
  _$jscoverage['core/node.js'][209] = 0;
  _$jscoverage['core/node.js'][210] = 0;
  _$jscoverage['core/node.js'][211] = 0;
  _$jscoverage['core/node.js'][212] = 0;
  _$jscoverage['core/node.js'][217] = 0;
  _$jscoverage['core/node.js'][218] = 0;
  _$jscoverage['core/node.js'][219] = 0;
  _$jscoverage['core/node.js'][221] = 0;
  _$jscoverage['core/node.js'][222] = 0;
  _$jscoverage['core/node.js'][223] = 0;
  _$jscoverage['core/node.js'][224] = 0;
  _$jscoverage['core/node.js'][225] = 0;
  _$jscoverage['core/node.js'][226] = 0;
  _$jscoverage['core/node.js'][232] = 0;
  _$jscoverage['core/node.js'][233] = 0;
  _$jscoverage['core/node.js'][234] = 0;
  _$jscoverage['core/node.js'][236] = 0;
  _$jscoverage['core/node.js'][237] = 0;
  _$jscoverage['core/node.js'][239] = 0;
  _$jscoverage['core/node.js'][240] = 0;
  _$jscoverage['core/node.js'][241] = 0;
  _$jscoverage['core/node.js'][242] = 0;
  _$jscoverage['core/node.js'][245] = 0;
  _$jscoverage['core/node.js'][246] = 0;
  _$jscoverage['core/node.js'][247] = 0;
  _$jscoverage['core/node.js'][253] = 0;
  _$jscoverage['core/node.js'][254] = 0;
  _$jscoverage['core/node.js'][255] = 0;
  _$jscoverage['core/node.js'][257] = 0;
  _$jscoverage['core/node.js'][258] = 0;
  _$jscoverage['core/node.js'][259] = 0;
  _$jscoverage['core/node.js'][260] = 0;
  _$jscoverage['core/node.js'][261] = 0;
  _$jscoverage['core/node.js'][268] = 0;
  _$jscoverage['core/node.js'][269] = 0;
  _$jscoverage['core/node.js'][270] = 0;
  _$jscoverage['core/node.js'][272] = 0;
  _$jscoverage['core/node.js'][273] = 0;
  _$jscoverage['core/node.js'][274] = 0;
  _$jscoverage['core/node.js'][275] = 0;
  _$jscoverage['core/node.js'][276] = 0;
  _$jscoverage['core/node.js'][283] = 0;
  _$jscoverage['core/node.js'][284] = 0;
  _$jscoverage['core/node.js'][285] = 0;
  _$jscoverage['core/node.js'][286] = 0;
  _$jscoverage['core/node.js'][287] = 0;
  _$jscoverage['core/node.js'][288] = 0;
  _$jscoverage['core/node.js'][289] = 0;
  _$jscoverage['core/node.js'][290] = 0;
  _$jscoverage['core/node.js'][291] = 0;
  _$jscoverage['core/node.js'][295] = 0;
  _$jscoverage['core/node.js'][301] = 0;
  _$jscoverage['core/node.js'][304] = 0;
  _$jscoverage['core/node.js'][305] = 0;
  _$jscoverage['core/node.js'][306] = 0;
  _$jscoverage['core/node.js'][308] = 0;
  _$jscoverage['core/node.js'][309] = 0;
  _$jscoverage['core/node.js'][311] = 0;
  _$jscoverage['core/node.js'][312] = 0;
  _$jscoverage['core/node.js'][313] = 0;
  _$jscoverage['core/node.js'][314] = 0;
  _$jscoverage['core/node.js'][316] = 0;
  _$jscoverage['core/node.js'][320] = 0;
  _$jscoverage['core/node.js'][321] = 0;
  _$jscoverage['core/node.js'][323] = 0;
  _$jscoverage['core/node.js'][329] = 0;
  _$jscoverage['core/node.js'][330] = 0;
  _$jscoverage['core/node.js'][331] = 0;
  _$jscoverage['core/node.js'][332] = 0;
  _$jscoverage['core/node.js'][335] = 0;
  _$jscoverage['core/node.js'][338] = 0;
  _$jscoverage['core/node.js'][339] = 0;
  _$jscoverage['core/node.js'][340] = 0;
  _$jscoverage['core/node.js'][341] = 0;
  _$jscoverage['core/node.js'][342] = 0;
  _$jscoverage['core/node.js'][348] = 0;
  _$jscoverage['core/node.js'][349] = 0;
  _$jscoverage['core/node.js'][350] = 0;
  _$jscoverage['core/node.js'][351] = 0;
  _$jscoverage['core/node.js'][352] = 0;
  _$jscoverage['core/node.js'][353] = 0;
  _$jscoverage['core/node.js'][357] = 0;
  _$jscoverage['core/node.js'][360] = 0;
  _$jscoverage['core/node.js'][361] = 0;
  _$jscoverage['core/node.js'][362] = 0;
  _$jscoverage['core/node.js'][364] = 0;
  _$jscoverage['core/node.js'][365] = 0;
  _$jscoverage['core/node.js'][366] = 0;
  _$jscoverage['core/node.js'][367] = 0;
  _$jscoverage['core/node.js'][369] = 0;
  _$jscoverage['core/node.js'][372] = 0;
  _$jscoverage['core/node.js'][373] = 0;
  _$jscoverage['core/node.js'][374] = 0;
  _$jscoverage['core/node.js'][375] = 0;
  _$jscoverage['core/node.js'][376] = 0;
  _$jscoverage['core/node.js'][381] = 0;
  _$jscoverage['core/node.js'][382] = 0;
  _$jscoverage['core/node.js'][383] = 0;
  _$jscoverage['core/node.js'][385] = 0;
  _$jscoverage['core/node.js'][386] = 0;
  _$jscoverage['core/node.js'][387] = 0;
  _$jscoverage['core/node.js'][390] = 0;
  _$jscoverage['core/node.js'][392] = 0;
}
_$jscoverage['core/node.js'].source = ["<span class=\"c\">///import editor.js</span>","<span class=\"c\">///import core/utils.js</span>","<span class=\"c\">///import core/dom/dom.js</span>","<span class=\"c\">///import core/dom/dtd.js</span>","<span class=\"c\">///import core/htmlparser.js</span>","<span class=\"c\">//&#27169;&#25311;&#30340;&#33410;&#28857;&#31867;</span>","<span class=\"c\">//by zhanyi</span>","<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> uNode <span class=\"k\">=</span> UE<span class=\"k\">.</span>uNode <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>type <span class=\"k\">=</span> obj<span class=\"k\">.</span>type<span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>data <span class=\"k\">=</span> obj<span class=\"k\">.</span>data<span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>tagName <span class=\"k\">=</span> obj<span class=\"k\">.</span>tagName<span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>parentNode <span class=\"k\">=</span> obj<span class=\"k\">.</span>parentNode<span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>attrs <span class=\"k\">=</span> obj<span class=\"k\">.</span>attrs <span class=\"k\">||</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>children <span class=\"k\">=</span> obj<span class=\"k\">.</span>children<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","    <span class=\"k\">var</span> indentChar <span class=\"k\">=</span> <span class=\"s\">'    '</span><span class=\"k\">,</span>","        breakChar <span class=\"k\">=</span> <span class=\"s\">'</span><span class=\"t\">\\n</span><span class=\"s\">'</span><span class=\"k\">;</span>","","    <span class=\"k\">function</span> insertLine<span class=\"k\">(</span>arr<span class=\"k\">,</span> current<span class=\"k\">,</span> begin<span class=\"k\">)</span> <span class=\"k\">{</span>","        arr<span class=\"k\">.</span>push<span class=\"k\">(</span>breakChar<span class=\"k\">);</span>","        <span class=\"k\">return</span> current <span class=\"k\">+</span> <span class=\"k\">(</span>begin <span class=\"k\">?</span> <span class=\"s\">1</span> <span class=\"k\">:</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> insertIndent<span class=\"k\">(</span>arr<span class=\"k\">,</span> current<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">//&#25554;&#20837;&#32553;&#36827;</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> current<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","            arr<span class=\"k\">.</span>push<span class=\"k\">(</span>indentChar<span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">//&#21019;&#24314;uNode&#30340;&#38745;&#24577;&#26041;&#27861;</span>","    <span class=\"c\">//&#25903;&#25345;&#26631;&#31614;&#21644;html</span>","    uNode<span class=\"k\">.</span>createElement <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>html<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"s\">/[&lt;&gt;]/</span><span class=\"k\">.</span>test<span class=\"k\">(</span>html<span class=\"k\">))</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> UE<span class=\"k\">.</span>htmlparser<span class=\"k\">(</span>html<span class=\"k\">).</span>children<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">new</span> uNode<span class=\"k\">(</span><span class=\"k\">{</span>","                type<span class=\"k\">:</span><span class=\"s\">'element'</span><span class=\"k\">,</span>","                children<span class=\"k\">:[],</span>","                tagName<span class=\"k\">:</span>html","            <span class=\"k\">}</span><span class=\"k\">)</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","    uNode<span class=\"k\">.</span>createText <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>data<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">new</span> UE<span class=\"k\">.</span>uNode<span class=\"k\">(</span><span class=\"k\">{</span>","            type<span class=\"k\">:</span><span class=\"s\">'text'</span><span class=\"k\">,</span>","            <span class=\"s\">'data'</span><span class=\"k\">:</span>data <span class=\"k\">||</span> <span class=\"s\">''</span>","        <span class=\"k\">}</span><span class=\"k\">)</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","    <span class=\"k\">function</span> nodeToHtml<span class=\"k\">(</span>node<span class=\"k\">,</span> arr<span class=\"k\">,</span> formatter<span class=\"k\">,</span> current<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">switch</span> <span class=\"k\">(</span>node<span class=\"k\">.</span>type<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">case</span> <span class=\"s\">'root'</span><span class=\"k\">:</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> ci<span class=\"k\">;</span> ci <span class=\"k\">=</span> node<span class=\"k\">.</span>children<span class=\"k\">[</span>i<span class=\"k\">++];)</span> <span class=\"k\">{</span>","                    <span class=\"c\">//&#25554;&#20837;&#26032;&#34892;</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>formatter <span class=\"k\">&amp;&amp;</span> ci<span class=\"k\">.</span>type <span class=\"k\">==</span> <span class=\"s\">'element'</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>dtd<span class=\"k\">.</span>$inline<span class=\"k\">[</span>ci<span class=\"k\">.</span>tagName<span class=\"k\">]</span> <span class=\"k\">&amp;&amp;</span> i <span class=\"k\">&gt;</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        insertLine<span class=\"k\">(</span>arr<span class=\"k\">,</span> current<span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">);</span>","                        insertIndent<span class=\"k\">(</span>arr<span class=\"k\">,</span> current<span class=\"k\">)</span>","                    <span class=\"k\">}</span>","                    nodeToHtml<span class=\"k\">(</span>ci<span class=\"k\">,</span> arr<span class=\"k\">,</span> formatter<span class=\"k\">,</span> current<span class=\"k\">)</span>","                <span class=\"k\">}</span>","                <span class=\"k\">break</span><span class=\"k\">;</span>","            <span class=\"k\">case</span> <span class=\"s\">'text'</span><span class=\"k\">:</span>","                isText<span class=\"k\">(</span>node<span class=\"k\">,</span> arr<span class=\"k\">);</span>","                <span class=\"k\">break</span><span class=\"k\">;</span>","            <span class=\"k\">case</span> <span class=\"s\">'element'</span><span class=\"k\">:</span>","                isElement<span class=\"k\">(</span>node<span class=\"k\">,</span> arr<span class=\"k\">,</span> formatter<span class=\"k\">,</span> current<span class=\"k\">);</span>","                <span class=\"k\">break</span><span class=\"k\">;</span>","            <span class=\"k\">case</span> <span class=\"s\">'comment'</span><span class=\"k\">:</span>","                isComment<span class=\"k\">(</span>node<span class=\"k\">,</span> arr<span class=\"k\">,</span> formatter<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> arr<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> isText<span class=\"k\">(</span>node<span class=\"k\">,</span> arr<span class=\"k\">)</span> <span class=\"k\">{</span>","        arr<span class=\"k\">.</span>push<span class=\"k\">(</span>node<span class=\"k\">.</span>data<span class=\"k\">)</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> isElement<span class=\"k\">(</span>node<span class=\"k\">,</span> arr<span class=\"k\">,</span> formatter<span class=\"k\">,</span> current<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> attrhtml <span class=\"k\">=</span> <span class=\"s\">''</span><span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>node<span class=\"k\">.</span>attrs<span class=\"k\">)</span> <span class=\"k\">{</span>","            attrhtml <span class=\"k\">=</span> <span class=\"k\">[];</span>","            <span class=\"k\">var</span> attrs <span class=\"k\">=</span> node<span class=\"k\">.</span>attrs<span class=\"k\">;</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> a <span class=\"k\">in</span> attrs<span class=\"k\">)</span> <span class=\"k\">{</span>","                attrhtml<span class=\"k\">.</span>push<span class=\"k\">(</span>a <span class=\"k\">+</span> <span class=\"k\">(</span>attrs<span class=\"k\">[</span>a<span class=\"k\">]</span> <span class=\"k\">!==</span> undefined <span class=\"k\">?</span> <span class=\"s\">'=\"'</span> <span class=\"k\">+</span> utils<span class=\"k\">.</span>unhtml<span class=\"k\">(</span>attrs<span class=\"k\">[</span>a<span class=\"k\">])</span> <span class=\"k\">+</span> <span class=\"s\">'\"'</span> <span class=\"k\">:</span> <span class=\"s\">''</span><span class=\"k\">))</span>","            <span class=\"k\">}</span>","            attrhtml <span class=\"k\">=</span> attrhtml<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">' '</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","        arr<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"s\">'&lt;'</span> <span class=\"k\">+</span> node<span class=\"k\">.</span>tagName <span class=\"k\">+</span>","            <span class=\"k\">(</span>attrhtml <span class=\"k\">?</span> <span class=\"s\">' '</span> <span class=\"k\">+</span> attrhtml <span class=\"k\">+</span> <span class=\"s\">' '</span> <span class=\"k\">:</span> <span class=\"s\">''</span><span class=\"k\">)</span> <span class=\"k\">+</span>","            <span class=\"k\">(</span>dtd<span class=\"k\">.</span>$empty<span class=\"k\">[</span>node<span class=\"k\">.</span>tagName<span class=\"k\">]</span> <span class=\"k\">?</span> <span class=\"s\">'</span><span class=\"t\">\\/</span><span class=\"s\">'</span> <span class=\"k\">:</span> <span class=\"s\">''</span> <span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">'&gt;'</span>","        <span class=\"k\">);</span>","        <span class=\"c\">//&#25554;&#20837;&#26032;&#34892;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>formatter <span class=\"k\">&amp;&amp;</span>  <span class=\"k\">!</span>dtd<span class=\"k\">.</span>$inline<span class=\"k\">[</span>node<span class=\"k\">.</span>tagName<span class=\"k\">])</span> <span class=\"k\">{</span>","            current <span class=\"k\">=</span> insertLine<span class=\"k\">(</span>arr<span class=\"k\">,</span> current<span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">);</span>","            insertIndent<span class=\"k\">(</span>arr<span class=\"k\">,</span> current<span class=\"k\">)</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>node<span class=\"k\">.</span>children <span class=\"k\">&amp;&amp;</span> node<span class=\"k\">.</span>children<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> ci<span class=\"k\">;</span> ci <span class=\"k\">=</span> node<span class=\"k\">.</span>children<span class=\"k\">[</span>i<span class=\"k\">++];)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>formatter <span class=\"k\">&amp;&amp;</span> ci<span class=\"k\">.</span>type <span class=\"k\">==</span> <span class=\"s\">'element'</span> <span class=\"k\">&amp;&amp;</span>  <span class=\"k\">!</span>dtd<span class=\"k\">.</span>$inline<span class=\"k\">[</span>ci<span class=\"k\">.</span>tagName<span class=\"k\">]</span> <span class=\"k\">&amp;&amp;</span> i <span class=\"k\">&gt;</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    insertLine<span class=\"k\">(</span>arr<span class=\"k\">,</span> current<span class=\"k\">);</span>","                    insertIndent<span class=\"k\">(</span>arr<span class=\"k\">,</span> current<span class=\"k\">)</span>","                <span class=\"k\">}</span>","                nodeToHtml<span class=\"k\">(</span>ci<span class=\"k\">,</span> arr<span class=\"k\">,</span> formatter<span class=\"k\">,</span> current<span class=\"k\">)</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>dtd<span class=\"k\">.</span>$empty<span class=\"k\">[</span>node<span class=\"k\">.</span>tagName<span class=\"k\">])</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>formatter <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>dtd<span class=\"k\">.</span>$inline<span class=\"k\">[</span>node<span class=\"k\">.</span>tagName<span class=\"k\">])</span> <span class=\"k\">{</span>","                current <span class=\"k\">=</span> insertLine<span class=\"k\">(</span>arr<span class=\"k\">,</span> current<span class=\"k\">);</span>","                insertIndent<span class=\"k\">(</span>arr<span class=\"k\">,</span> current<span class=\"k\">)</span>","            <span class=\"k\">}</span>","            arr<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"s\">'&lt;</span><span class=\"t\">\\/</span><span class=\"s\">'</span> <span class=\"k\">+</span> node<span class=\"k\">.</span>tagName <span class=\"k\">+</span> <span class=\"s\">'&gt;'</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> isComment<span class=\"k\">(</span>node<span class=\"k\">,</span> arr<span class=\"k\">)</span> <span class=\"k\">{</span>","        arr<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"s\">'&lt;!--'</span> <span class=\"k\">+</span> node<span class=\"k\">.</span>data <span class=\"k\">+</span> <span class=\"s\">'--&gt;'</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> getNodeById<span class=\"k\">(</span>root<span class=\"k\">,</span> id<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> node<span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>root<span class=\"k\">.</span>type <span class=\"k\">==</span> <span class=\"s\">'element'</span> <span class=\"k\">&amp;&amp;</span> root<span class=\"k\">.</span>getAttr<span class=\"k\">(</span><span class=\"s\">'id'</span><span class=\"k\">)</span> <span class=\"k\">==</span> id<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> root<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>root<span class=\"k\">.</span>children <span class=\"k\">&amp;&amp;</span> root<span class=\"k\">.</span>children<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> ci<span class=\"k\">;</span> ci <span class=\"k\">=</span> root<span class=\"k\">.</span>children<span class=\"k\">[</span>i<span class=\"k\">++];)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>node <span class=\"k\">=</span> getNodeById<span class=\"k\">(</span>ci<span class=\"k\">,</span> id<span class=\"k\">))</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> node<span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> getNodesByTagName<span class=\"k\">(</span>node<span class=\"k\">,</span> tagName<span class=\"k\">,</span> arr<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>node<span class=\"k\">.</span>type <span class=\"k\">==</span> <span class=\"s\">'element'</span> <span class=\"k\">&amp;&amp;</span> node<span class=\"k\">.</span>tagName <span class=\"k\">==</span> tagName<span class=\"k\">)</span> <span class=\"k\">{</span>","            arr<span class=\"k\">.</span>push<span class=\"k\">(</span>node<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>node<span class=\"k\">.</span>children <span class=\"k\">&amp;&amp;</span> node<span class=\"k\">.</span>children<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> ci<span class=\"k\">;</span> ci <span class=\"k\">=</span> node<span class=\"k\">.</span>children<span class=\"k\">[</span>i<span class=\"k\">++];)</span> <span class=\"k\">{</span>","                getNodesByTagName<span class=\"k\">(</span>ci<span class=\"k\">,</span> tagName<span class=\"k\">,</span> arr<span class=\"k\">)</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    uNode<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","        toHtml<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>formatter<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> arr <span class=\"k\">=</span> <span class=\"k\">[];</span>","            nodeToHtml<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> arr<span class=\"k\">,</span> formatter<span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">);</span>","            <span class=\"k\">return</span> arr<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">''</span><span class=\"k\">)</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        innerHTML<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>htmlstr<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>type <span class=\"k\">!=</span> <span class=\"s\">'element'</span> <span class=\"k\">||</span> dtd<span class=\"k\">.</span>$empty<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>tagName<span class=\"k\">])</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>htmlstr<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> ci<span class=\"k\">;</span> ci <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>children<span class=\"k\">[</span>i<span class=\"k\">++];)</span> <span class=\"k\">{</span>","                    ci<span class=\"k\">.</span>parentNode <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>children <span class=\"k\">=</span> <span class=\"k\">[];</span>","                <span class=\"k\">var</span> tmpRoot <span class=\"k\">=</span> UE<span class=\"k\">.</span>htmlparser<span class=\"k\">(</span>htmlstr<span class=\"k\">);</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> ci<span class=\"k\">;</span> ci <span class=\"k\">=</span> tmpRoot<span class=\"k\">.</span>children<span class=\"k\">[</span>i<span class=\"k\">++];)</span> <span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>children<span class=\"k\">.</span>push<span class=\"k\">(</span>ci<span class=\"k\">);</span>","                    ci<span class=\"k\">.</span>parentNode <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","                <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> tmpRoot <span class=\"k\">=</span> <span class=\"k\">new</span> UE<span class=\"k\">.</span>uNode<span class=\"k\">(</span><span class=\"k\">{</span>","                    type<span class=\"k\">:</span><span class=\"s\">'root'</span><span class=\"k\">,</span>","                    children<span class=\"k\">:</span><span class=\"k\">this</span><span class=\"k\">.</span>children","                <span class=\"k\">}</span><span class=\"k\">);</span>","                <span class=\"k\">return</span> tmpRoot<span class=\"k\">.</span>toHtml<span class=\"k\">();</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        innerText<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>type <span class=\"k\">!=</span> <span class=\"s\">'element'</span> <span class=\"k\">||</span> dtd<span class=\"k\">.</span>$empty<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>tagName<span class=\"k\">])</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">var</span> html <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>toHtml<span class=\"k\">();</span>","            <span class=\"k\">return</span> html<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/&lt;[^&gt;]+&gt;/g</span><span class=\"k\">,</span> <span class=\"s\">''</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        getData<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>type <span class=\"k\">==</span> <span class=\"s\">'element'</span><span class=\"k\">)</span>","                <span class=\"k\">return</span> <span class=\"s\">''</span><span class=\"k\">;</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>data","        <span class=\"k\">}</span><span class=\"k\">,</span>","        firstChild<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>type <span class=\"k\">!=</span> <span class=\"s\">'element'</span> <span class=\"k\">||</span> dtd<span class=\"k\">.</span>$empty<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>tagName<span class=\"k\">])</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>children <span class=\"k\">?</span> <span class=\"k\">this</span><span class=\"k\">.</span>children<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        lastChild<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>type <span class=\"k\">!=</span> <span class=\"s\">'element'</span> <span class=\"k\">||</span> dtd<span class=\"k\">.</span>$empty<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>tagName<span class=\"k\">])</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>children <span class=\"k\">?</span> <span class=\"k\">this</span><span class=\"k\">.</span>children<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>children<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        previousSibling <span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> parent <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>parentNode<span class=\"k\">;</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> ci<span class=\"k\">;</span> ci <span class=\"k\">=</span> parent<span class=\"k\">.</span>children<span class=\"k\">[</span>i<span class=\"k\">];</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>ci <span class=\"k\">===</span> <span class=\"k\">this</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                   <span class=\"k\">return</span> i <span class=\"k\">==</span> <span class=\"s\">0</span> <span class=\"k\">?</span> <span class=\"k\">null</span> <span class=\"k\">:</span> parent<span class=\"k\">.</span>children<span class=\"k\">[</span>i<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">];</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","","        <span class=\"k\">}</span><span class=\"k\">,</span>","        nextSibling <span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> parent <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>parentNode<span class=\"k\">;</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> ci<span class=\"k\">;</span> ci <span class=\"k\">=</span> parent<span class=\"k\">.</span>children<span class=\"k\">[</span>i<span class=\"k\">++];)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>ci <span class=\"k\">===</span> <span class=\"k\">this</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> parent<span class=\"k\">.</span>children<span class=\"k\">[</span>i<span class=\"k\">];</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        replaceChild<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>target<span class=\"k\">,</span> source<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>children<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>target<span class=\"k\">.</span>parentNode<span class=\"k\">)</span><span class=\"k\">{</span>","                    target<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>removeChild<span class=\"k\">(</span>target<span class=\"k\">);</span>","                <span class=\"k\">}</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> ci<span class=\"k\">;</span> ci <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>children<span class=\"k\">[</span>i<span class=\"k\">];</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>ci <span class=\"k\">===</span> source<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">this</span><span class=\"k\">.</span>children<span class=\"k\">.</span>splice<span class=\"k\">(</span>i<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> target<span class=\"k\">);</span>","                        source<span class=\"k\">.</span>parentNode <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","                        target<span class=\"k\">.</span>parentNode <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","                        <span class=\"k\">return</span> target<span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        appendChild<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>node<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>type <span class=\"k\">==</span> <span class=\"s\">'root'</span> <span class=\"k\">||</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>type <span class=\"k\">==</span> <span class=\"s\">'element'</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>dtd<span class=\"k\">.</span>$empty<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>tagName<span class=\"k\">]))</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>children<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>children <span class=\"k\">=</span> <span class=\"k\">[]</span>","                <span class=\"k\">}</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>node<span class=\"k\">.</span>parentNode<span class=\"k\">)</span><span class=\"k\">{</span>","                    node<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>removeChild<span class=\"k\">(</span>node<span class=\"k\">);</span>","                <span class=\"k\">}</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> ci<span class=\"k\">;</span> ci <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>children<span class=\"k\">[</span>i<span class=\"k\">];</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>ci <span class=\"k\">===</span> node<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">this</span><span class=\"k\">.</span>children<span class=\"k\">.</span>splice<span class=\"k\">(</span>i<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">);</span>","                        <span class=\"k\">break</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>children<span class=\"k\">.</span>push<span class=\"k\">(</span>node<span class=\"k\">);</span>","                node<span class=\"k\">.</span>parentNode <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","                <span class=\"k\">return</span> node<span class=\"k\">;</span>","            <span class=\"k\">}</span>","","","        <span class=\"k\">}</span><span class=\"k\">,</span>","        insertBefore<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>target<span class=\"k\">,</span> source<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>children<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>target<span class=\"k\">.</span>parentNode<span class=\"k\">)</span><span class=\"k\">{</span>","                    target<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>removeChild<span class=\"k\">(</span>target<span class=\"k\">);</span>","                <span class=\"k\">}</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> ci<span class=\"k\">;</span> ci <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>children<span class=\"k\">[</span>i<span class=\"k\">];</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>ci <span class=\"k\">===</span> source<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">this</span><span class=\"k\">.</span>children<span class=\"k\">.</span>splice<span class=\"k\">(</span>i<span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> target<span class=\"k\">);</span>","                        target<span class=\"k\">.</span>parentNode <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","                        <span class=\"k\">return</span> target<span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        insertAfter<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>target<span class=\"k\">,</span> source<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>children<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>target<span class=\"k\">.</span>parentNode<span class=\"k\">)</span><span class=\"k\">{</span>","                    target<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>removeChild<span class=\"k\">(</span>target<span class=\"k\">);</span>","                <span class=\"k\">}</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> ci<span class=\"k\">;</span> ci <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>children<span class=\"k\">[</span>i<span class=\"k\">];</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>ci <span class=\"k\">===</span> source<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">this</span><span class=\"k\">.</span>children<span class=\"k\">.</span>splice<span class=\"k\">(</span>i <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> target<span class=\"k\">);</span>","                        target<span class=\"k\">.</span>parentNode <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","                        <span class=\"k\">return</span> target<span class=\"k\">;</span>","                    <span class=\"k\">}</span>","","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        removeChild<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>node<span class=\"k\">,</span>keepChildren<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>children<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> ci<span class=\"k\">;</span> ci <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>children<span class=\"k\">[</span>i<span class=\"k\">];</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>ci <span class=\"k\">===</span> node<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">this</span><span class=\"k\">.</span>children<span class=\"k\">.</span>splice<span class=\"k\">(</span>i<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">);</span>","                        ci<span class=\"k\">.</span>parentNode <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","                        <span class=\"k\">if</span><span class=\"k\">(</span>keepChildren <span class=\"k\">&amp;&amp;</span> ci<span class=\"k\">.</span>children <span class=\"k\">&amp;&amp;</span> ci<span class=\"k\">.</span>children<span class=\"k\">.</span>length<span class=\"k\">)</span><span class=\"k\">{</span>","                            <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> j<span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span>cj<span class=\"k\">;</span>cj<span class=\"k\">=</span>ci<span class=\"k\">.</span>children<span class=\"k\">[</span>j<span class=\"k\">];</span>j<span class=\"k\">++)</span><span class=\"k\">{</span>","                                <span class=\"k\">this</span><span class=\"k\">.</span>children<span class=\"k\">.</span>splice<span class=\"k\">(</span>i<span class=\"k\">+</span>j<span class=\"k\">,</span><span class=\"s\">0</span><span class=\"k\">,</span>cj<span class=\"k\">);</span>","                                cj<span class=\"k\">.</span>parentNode <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","                            <span class=\"k\">}</span>","                        <span class=\"k\">}</span>","                        <span class=\"k\">return</span> ci<span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        getAttr<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>attrName<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>attrs <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>attrs<span class=\"k\">[</span>attrName<span class=\"k\">.</span>toLowerCase<span class=\"k\">()]</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        setAttr<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>attrName<span class=\"k\">,</span> attrVal<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span>attrName<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">delete</span> <span class=\"k\">this</span><span class=\"k\">.</span>attrs<span class=\"k\">;</span>","                <span class=\"k\">return</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">if</span><span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>attrs<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>attrs <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>utils<span class=\"k\">.</span>isObject<span class=\"k\">(</span>attrName<span class=\"k\">))</span> <span class=\"k\">{</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> a <span class=\"k\">in</span> attrName<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(!</span>attrName<span class=\"k\">[</span>a<span class=\"k\">])</span> <span class=\"k\">{</span>","                        <span class=\"k\">delete</span> <span class=\"k\">this</span><span class=\"k\">.</span>attrs<span class=\"k\">[</span>a<span class=\"k\">]</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        <span class=\"k\">this</span><span class=\"k\">.</span>attrs<span class=\"k\">[</span>a<span class=\"k\">.</span>toLowerCase<span class=\"k\">()]</span> <span class=\"k\">=</span> attrName<span class=\"k\">[</span>a<span class=\"k\">];</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(!</span>attrVal<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">delete</span> <span class=\"k\">this</span><span class=\"k\">.</span>attrs<span class=\"k\">[</span>attrName<span class=\"k\">]</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>attrs<span class=\"k\">[</span>attrName<span class=\"k\">.</span>toLowerCase<span class=\"k\">()]</span> <span class=\"k\">=</span> attrVal<span class=\"k\">;</span>","                <span class=\"k\">}</span>","","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        getIndex<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> parent <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>parentNode<span class=\"k\">;</span>","            <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span>ci<span class=\"k\">;</span>ci<span class=\"k\">=</span>parent<span class=\"k\">.</span>children<span class=\"k\">[</span>i<span class=\"k\">];</span>i<span class=\"k\">++)</span><span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>ci <span class=\"k\">===</span> <span class=\"k\">this</span><span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">return</span> i<span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        getNodeById<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>id<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> node<span class=\"k\">;</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>children <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>children<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> ci<span class=\"k\">;</span> ci <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>children<span class=\"k\">[</span>i<span class=\"k\">++];)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>node <span class=\"k\">=</span> getNodeById<span class=\"k\">(</span>ci<span class=\"k\">,</span> id<span class=\"k\">))</span> <span class=\"k\">{</span>","                        <span class=\"k\">return</span> node<span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        getNodesByTagName<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>tagNames<span class=\"k\">)</span> <span class=\"k\">{</span>","            tagNames <span class=\"k\">=</span> utils<span class=\"k\">.</span>trim<span class=\"k\">(</span>tagNames<span class=\"k\">).</span>replace<span class=\"k\">(</span><span class=\"s\">/[ ]{2,}/g</span><span class=\"k\">,</span> <span class=\"s\">' '</span><span class=\"k\">).</span>split<span class=\"k\">(</span><span class=\"s\">' '</span><span class=\"k\">);</span>","            <span class=\"k\">var</span> arr <span class=\"k\">=</span> <span class=\"k\">[],</span> me <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","            utils<span class=\"k\">.</span>each<span class=\"k\">(</span>tagNames<span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>tagName<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>me<span class=\"k\">.</span>children <span class=\"k\">&amp;&amp;</span> me<span class=\"k\">.</span>children<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> ci<span class=\"k\">;</span> ci <span class=\"k\">=</span> me<span class=\"k\">.</span>children<span class=\"k\">[</span>i<span class=\"k\">++];)</span> <span class=\"k\">{</span>","                        getNodesByTagName<span class=\"k\">(</span>ci<span class=\"k\">,</span> tagName<span class=\"k\">,</span> arr<span class=\"k\">)</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">return</span> arr<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        getStyle<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>name<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> cssStyle <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getAttr<span class=\"k\">(</span><span class=\"s\">'style'</span><span class=\"k\">);</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span>cssStyle<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"s\">''</span>","            <span class=\"k\">}</span>","            <span class=\"k\">var</span> reg <span class=\"k\">=</span> <span class=\"k\">new</span> RegExp<span class=\"k\">(</span>name <span class=\"k\">+</span> <span class=\"s\">':([^;]+)'</span><span class=\"k\">);</span>","            <span class=\"k\">var</span> match <span class=\"k\">=</span> cssStyle<span class=\"k\">.</span>match<span class=\"k\">(</span>reg<span class=\"k\">);</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>match <span class=\"k\">&amp;&amp;</span> match<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">])</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> match<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> <span class=\"s\">''</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        setStyle<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>name<span class=\"k\">,</span> val<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">function</span> exec<span class=\"k\">(</span>name<span class=\"k\">,</span> val<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> reg <span class=\"k\">=</span> <span class=\"k\">new</span> RegExp<span class=\"k\">(</span>name <span class=\"k\">+</span> <span class=\"s\">':([^;]+);?'</span><span class=\"k\">,</span> <span class=\"s\">'gi'</span><span class=\"k\">);</span>","                cssStyle <span class=\"k\">=</span> cssStyle<span class=\"k\">.</span>replace<span class=\"k\">(</span>reg<span class=\"k\">,</span> <span class=\"s\">''</span><span class=\"k\">);</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>val<span class=\"k\">)</span> <span class=\"k\">{</span>","                    cssStyle <span class=\"k\">=</span> name <span class=\"k\">+</span> <span class=\"s\">':'</span> <span class=\"k\">+</span> utils<span class=\"k\">.</span>unhtml<span class=\"k\">(</span>val<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">';'</span> <span class=\"k\">+</span> cssStyle","                <span class=\"k\">}</span>","","            <span class=\"k\">}</span>","","            <span class=\"k\">var</span> cssStyle <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getAttr<span class=\"k\">(</span><span class=\"s\">'style'</span><span class=\"k\">);</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span>cssStyle<span class=\"k\">)</span> <span class=\"k\">{</span>","                cssStyle <span class=\"k\">=</span> <span class=\"s\">''</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>utils<span class=\"k\">.</span>isObject<span class=\"k\">(</span>name<span class=\"k\">))</span> <span class=\"k\">{</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> a <span class=\"k\">in</span> name<span class=\"k\">)</span> <span class=\"k\">{</span>","                    exec<span class=\"k\">(</span>a<span class=\"k\">,</span> name<span class=\"k\">[</span>a<span class=\"k\">])</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                exec<span class=\"k\">(</span>name<span class=\"k\">,</span> val<span class=\"k\">)</span>","            <span class=\"k\">}</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>setAttr<span class=\"k\">(</span><span class=\"s\">'style'</span><span class=\"k\">,</span> cssStyle<span class=\"k\">)</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">)();</span>"];
_$jscoverage['core/node.js'][8]++;
(function () {
  _$jscoverage['core/node.js'][9]++;
  var uNode = (UE.uNode = (function (obj) {
  _$jscoverage['core/node.js'][10]++;
  this.type = obj.type;
  _$jscoverage['core/node.js'][11]++;
  this.data = obj.data;
  _$jscoverage['core/node.js'][12]++;
  this.tagName = obj.tagName;
  _$jscoverage['core/node.js'][13]++;
  this.parentNode = obj.parentNode;
  _$jscoverage['core/node.js'][14]++;
  this.attrs = (obj.attrs || {});
  _$jscoverage['core/node.js'][15]++;
  this.children = obj.children;
}));
  _$jscoverage['core/node.js'][17]++;
  var indentChar = "    ", breakChar = "\n";
  _$jscoverage['core/node.js'][20]++;
  function insertLine(arr, current, begin) {
    _$jscoverage['core/node.js'][21]++;
    arr.push(breakChar);
    _$jscoverage['core/node.js'][22]++;
    return (current + (begin? 1: -1));
}
  _$jscoverage['core/node.js'][25]++;
  function insertIndent(arr, current) {
    _$jscoverage['core/node.js'][27]++;
    for (var i = 0; (i < current); (i++)) {
      _$jscoverage['core/node.js'][28]++;
      arr.push(indentChar);
}
}
  _$jscoverage['core/node.js'][34]++;
  uNode.createElement = (function (html) {
  _$jscoverage['core/node.js'][35]++;
  if (/[<>]/.test(html)) {
    _$jscoverage['core/node.js'][36]++;
    return UE.htmlparser(html).children[0];
  }
  else {
    _$jscoverage['core/node.js'][38]++;
    return new uNode({type: "element", children: [], tagName: html});
  }
});
  _$jscoverage['core/node.js'][45]++;
  uNode.createText = (function (data) {
  _$jscoverage['core/node.js'][46]++;
  return new (UE.uNode)({type: "text", "data": (data || "")});
});
  _$jscoverage['core/node.js'][51]++;
  function nodeToHtml(node, arr, formatter, current) {
    _$jscoverage['core/node.js'][52]++;
    switch (node.type) {
    case "root":
      _$jscoverage['core/node.js'][54]++;
      for (var i = 0, ci; (ci = node.children[(i++)]);) {
        _$jscoverage['core/node.js'][56]++;
        if ((formatter && (ci.type == "element") && (! dtd.$inline[ci.tagName]) && (i > 1))) {
          _$jscoverage['core/node.js'][57]++;
          insertLine(arr, current, true);
          _$jscoverage['core/node.js'][58]++;
          insertIndent(arr, current);
        }
        _$jscoverage['core/node.js'][60]++;
        nodeToHtml(ci, arr, formatter, current);
}
      _$jscoverage['core/node.js'][62]++;
      break;
    case "text":
      _$jscoverage['core/node.js'][64]++;
      isText(node, arr);
      _$jscoverage['core/node.js'][65]++;
      break;
    case "element":
      _$jscoverage['core/node.js'][67]++;
      isElement(node, arr, formatter, current);
      _$jscoverage['core/node.js'][68]++;
      break;
    case "comment":
      _$jscoverage['core/node.js'][70]++;
      isComment(node, arr, formatter);
    }
    _$jscoverage['core/node.js'][72]++;
    return arr;
}
  _$jscoverage['core/node.js'][75]++;
  function isText(node, arr) {
    _$jscoverage['core/node.js'][76]++;
    arr.push(node.data);
}
  _$jscoverage['core/node.js'][79]++;
  function isElement(node, arr, formatter, current) {
    _$jscoverage['core/node.js'][80]++;
    var attrhtml = "";
    _$jscoverage['core/node.js'][81]++;
    if (node.attrs) {
      _$jscoverage['core/node.js'][82]++;
      attrhtml = [];
      _$jscoverage['core/node.js'][83]++;
      var attrs = node.attrs;
      _$jscoverage['core/node.js'][84]++;
      for (var a in attrs) {
        _$jscoverage['core/node.js'][85]++;
        attrhtml.push((a + ((attrs[a] !== undefined)? ("=\"" + utils.unhtml(attrs[a]) + "\""): "")));
}
      _$jscoverage['core/node.js'][87]++;
      attrhtml = attrhtml.join(" ");
    }
    _$jscoverage['core/node.js'][89]++;
    arr.push(("<" + node.tagName + (attrhtml? (" " + attrhtml + " "): "") + (dtd.$empty[node.tagName]? "/": "") + ">"));
    _$jscoverage['core/node.js'][94]++;
    if ((formatter && (! dtd.$inline[node.tagName]))) {
      _$jscoverage['core/node.js'][95]++;
      current = insertLine(arr, current, true);
      _$jscoverage['core/node.js'][96]++;
      insertIndent(arr, current);
    }
    _$jscoverage['core/node.js'][98]++;
    if ((node.children && node.children.length)) {
      _$jscoverage['core/node.js'][99]++;
      for (var i = 0, ci; (ci = node.children[(i++)]);) {
        _$jscoverage['core/node.js'][100]++;
        if ((formatter && (ci.type == "element") && (! dtd.$inline[ci.tagName]) && (i > 1))) {
          _$jscoverage['core/node.js'][101]++;
          insertLine(arr, current);
          _$jscoverage['core/node.js'][102]++;
          insertIndent(arr, current);
        }
        _$jscoverage['core/node.js'][104]++;
        nodeToHtml(ci, arr, formatter, current);
}
    }
    _$jscoverage['core/node.js'][107]++;
    if ((! dtd.$empty[node.tagName])) {
      _$jscoverage['core/node.js'][108]++;
      if ((formatter && (! dtd.$inline[node.tagName]))) {
        _$jscoverage['core/node.js'][109]++;
        current = insertLine(arr, current);
        _$jscoverage['core/node.js'][110]++;
        insertIndent(arr, current);
      }
      _$jscoverage['core/node.js'][112]++;
      arr.push(("</" + node.tagName + ">"));
    }
}
  _$jscoverage['core/node.js'][117]++;
  function isComment(node, arr) {
    _$jscoverage['core/node.js'][118]++;
    arr.push(("<!--" + node.data + "-->"));
}
  _$jscoverage['core/node.js'][121]++;
  function getNodeById(root, id) {
    _$jscoverage['core/node.js'][122]++;
    var node;
    _$jscoverage['core/node.js'][123]++;
    if (((root.type == "element") && (root.getAttr("id") == id))) {
      _$jscoverage['core/node.js'][124]++;
      return root;
    }
    _$jscoverage['core/node.js'][126]++;
    if ((root.children && root.children.length)) {
      _$jscoverage['core/node.js'][127]++;
      for (var i = 0, ci; (ci = root.children[(i++)]);) {
        _$jscoverage['core/node.js'][128]++;
        if ((node = getNodeById(ci, id))) {
          _$jscoverage['core/node.js'][129]++;
          return node;
        }
}
    }
}
  _$jscoverage['core/node.js'][135]++;
  function getNodesByTagName(node, tagName, arr) {
    _$jscoverage['core/node.js'][136]++;
    if (((node.type == "element") && (node.tagName == tagName))) {
      _$jscoverage['core/node.js'][137]++;
      arr.push(node);
    }
    _$jscoverage['core/node.js'][139]++;
    if ((node.children && node.children.length)) {
      _$jscoverage['core/node.js'][140]++;
      for (var i = 0, ci; (ci = node.children[(i++)]);) {
        _$jscoverage['core/node.js'][141]++;
        getNodesByTagName(ci, tagName, arr);
}
    }
}
  _$jscoverage['core/node.js'][146]++;
  uNode.prototype = {toHtml: (function (formatter) {
  _$jscoverage['core/node.js'][148]++;
  var arr = [];
  _$jscoverage['core/node.js'][149]++;
  nodeToHtml(this, arr, formatter, 0);
  _$jscoverage['core/node.js'][150]++;
  return arr.join("");
}), innerHTML: (function (htmlstr) {
  _$jscoverage['core/node.js'][153]++;
  if (((this.type != "element") || dtd.$empty[this.tagName])) {
    _$jscoverage['core/node.js'][154]++;
    return this;
  }
  _$jscoverage['core/node.js'][156]++;
  if (htmlstr) {
    _$jscoverage['core/node.js'][157]++;
    for (var i = 0, ci; (ci = this.children[(i++)]);) {
      _$jscoverage['core/node.js'][158]++;
      ci.parentNode = null;
}
    _$jscoverage['core/node.js'][160]++;
    this.children = [];
    _$jscoverage['core/node.js'][161]++;
    var tmpRoot = UE.htmlparser(htmlstr);
    _$jscoverage['core/node.js'][162]++;
    for (var i = 0, ci = ci; (ci = tmpRoot.children[(i++)]);) {
      _$jscoverage['core/node.js'][163]++;
      this.children.push(ci);
      _$jscoverage['core/node.js'][164]++;
      ci.parentNode = this;
}
    _$jscoverage['core/node.js'][166]++;
    return this;
  }
  else {
    _$jscoverage['core/node.js'][168]++;
    var tmpRoot = new (UE.uNode)({type: "root", children: this.children});
    _$jscoverage['core/node.js'][172]++;
    return tmpRoot.toHtml();
  }
}), innerText: (function () {
  _$jscoverage['core/node.js'][176]++;
  if (((this.type != "element") || dtd.$empty[this.tagName])) {
    _$jscoverage['core/node.js'][177]++;
    return this;
  }
  _$jscoverage['core/node.js'][179]++;
  var html = this.toHtml();
  _$jscoverage['core/node.js'][180]++;
  return html.replace(/<[^>]+>/g, "");
}), getData: (function () {
  _$jscoverage['core/node.js'][183]++;
  if ((this.type == "element")) {
    _$jscoverage['core/node.js'][184]++;
    return "";
  }
  _$jscoverage['core/node.js'][185]++;
  return this.data;
}), firstChild: (function () {
  _$jscoverage['core/node.js'][188]++;
  if (((this.type != "element") || dtd.$empty[this.tagName])) {
    _$jscoverage['core/node.js'][189]++;
    return this;
  }
  _$jscoverage['core/node.js'][191]++;
  return (this.children? this.children[0]: null);
}), lastChild: (function () {
  _$jscoverage['core/node.js'][194]++;
  if (((this.type != "element") || dtd.$empty[this.tagName])) {
    _$jscoverage['core/node.js'][195]++;
    return this;
  }
  _$jscoverage['core/node.js'][197]++;
  return (this.children? this.children[(this.children.length - 1)]: null);
}), previousSibling: (function () {
  _$jscoverage['core/node.js'][200]++;
  var parent = this.parentNode;
  _$jscoverage['core/node.js'][201]++;
  for (var i = 0, ci; (ci = parent.children[i]); (i++)) {
    _$jscoverage['core/node.js'][202]++;
    if ((ci === this)) {
      _$jscoverage['core/node.js'][203]++;
      return ((i == 0)? null: parent.children[(i - 1)]);
    }
}
}), nextSibling: (function () {
  _$jscoverage['core/node.js'][209]++;
  var parent = this.parentNode;
  _$jscoverage['core/node.js'][210]++;
  for (var i = 0, ci; (ci = parent.children[(i++)]);) {
    _$jscoverage['core/node.js'][211]++;
    if ((ci === this)) {
      _$jscoverage['core/node.js'][212]++;
      return parent.children[i];
    }
}
}), replaceChild: (function (target, source) {
  _$jscoverage['core/node.js'][217]++;
  if (this.children) {
    _$jscoverage['core/node.js'][218]++;
    if (target.parentNode) {
      _$jscoverage['core/node.js'][219]++;
      target.parentNode.removeChild(target);
    }
    _$jscoverage['core/node.js'][221]++;
    for (var i = 0, ci; (ci = this.children[i]); (i++)) {
      _$jscoverage['core/node.js'][222]++;
      if ((ci === source)) {
        _$jscoverage['core/node.js'][223]++;
        this.children.splice(i, 1, target);
        _$jscoverage['core/node.js'][224]++;
        source.parentNode = null;
        _$jscoverage['core/node.js'][225]++;
        target.parentNode = this;
        _$jscoverage['core/node.js'][226]++;
        return target;
      }
}
  }
}), appendChild: (function (node) {
  _$jscoverage['core/node.js'][232]++;
  if (((this.type == "root") || ((this.type == "element") && (! dtd.$empty[this.tagName])))) {
    _$jscoverage['core/node.js'][233]++;
    if ((! this.children)) {
      _$jscoverage['core/node.js'][234]++;
      this.children = [];
    }
    _$jscoverage['core/node.js'][236]++;
    if (node.parentNode) {
      _$jscoverage['core/node.js'][237]++;
      node.parentNode.removeChild(node);
    }
    _$jscoverage['core/node.js'][239]++;
    for (var i = 0, ci; (ci = this.children[i]); (i++)) {
      _$jscoverage['core/node.js'][240]++;
      if ((ci === node)) {
        _$jscoverage['core/node.js'][241]++;
        this.children.splice(i, 1);
        _$jscoverage['core/node.js'][242]++;
        break;
      }
}
    _$jscoverage['core/node.js'][245]++;
    this.children.push(node);
    _$jscoverage['core/node.js'][246]++;
    node.parentNode = this;
    _$jscoverage['core/node.js'][247]++;
    return node;
  }
}), insertBefore: (function (target, source) {
  _$jscoverage['core/node.js'][253]++;
  if (this.children) {
    _$jscoverage['core/node.js'][254]++;
    if (target.parentNode) {
      _$jscoverage['core/node.js'][255]++;
      target.parentNode.removeChild(target);
    }
    _$jscoverage['core/node.js'][257]++;
    for (var i = 0, ci; (ci = this.children[i]); (i++)) {
      _$jscoverage['core/node.js'][258]++;
      if ((ci === source)) {
        _$jscoverage['core/node.js'][259]++;
        this.children.splice(i, 0, target);
        _$jscoverage['core/node.js'][260]++;
        target.parentNode = this;
        _$jscoverage['core/node.js'][261]++;
        return target;
      }
}
  }
}), insertAfter: (function (target, source) {
  _$jscoverage['core/node.js'][268]++;
  if (this.children) {
    _$jscoverage['core/node.js'][269]++;
    if (target.parentNode) {
      _$jscoverage['core/node.js'][270]++;
      target.parentNode.removeChild(target);
    }
    _$jscoverage['core/node.js'][272]++;
    for (var i = 0, ci; (ci = this.children[i]); (i++)) {
      _$jscoverage['core/node.js'][273]++;
      if ((ci === source)) {
        _$jscoverage['core/node.js'][274]++;
        this.children.splice((i + 1), 0, target);
        _$jscoverage['core/node.js'][275]++;
        target.parentNode = this;
        _$jscoverage['core/node.js'][276]++;
        return target;
      }
}
  }
}), removeChild: (function (node, keepChildren) {
  _$jscoverage['core/node.js'][283]++;
  if (this.children) {
    _$jscoverage['core/node.js'][284]++;
    for (var i = 0, ci; (ci = this.children[i]); (i++)) {
      _$jscoverage['core/node.js'][285]++;
      if ((ci === node)) {
        _$jscoverage['core/node.js'][286]++;
        this.children.splice(i, 1);
        _$jscoverage['core/node.js'][287]++;
        ci.parentNode = null;
        _$jscoverage['core/node.js'][288]++;
        if ((keepChildren && ci.children && ci.children.length)) {
          _$jscoverage['core/node.js'][289]++;
          for (var j = 0, cj; (cj = ci.children[j]); (j++)) {
            _$jscoverage['core/node.js'][290]++;
            this.children.splice((i + j), 0, cj);
            _$jscoverage['core/node.js'][291]++;
            cj.parentNode = this;
}
        }
        _$jscoverage['core/node.js'][295]++;
        return ci;
      }
}
  }
}), getAttr: (function (attrName) {
  _$jscoverage['core/node.js'][301]++;
  return (this.attrs && this.attrs[attrName.toLowerCase()]);
}), setAttr: (function (attrName, attrVal) {
  _$jscoverage['core/node.js'][304]++;
  if ((! attrName)) {
    _$jscoverage['core/node.js'][305]++;
    (delete this.attrs);
    _$jscoverage['core/node.js'][306]++;
    return;
  }
  _$jscoverage['core/node.js'][308]++;
  if ((! this.attrs)) {
    _$jscoverage['core/node.js'][309]++;
    this.attrs = {};
  }
  _$jscoverage['core/node.js'][311]++;
  if (utils.isObject(attrName)) {
    _$jscoverage['core/node.js'][312]++;
    for (var a in attrName) {
      _$jscoverage['core/node.js'][313]++;
      if ((! attrName[a])) {
        _$jscoverage['core/node.js'][314]++;
        (delete this.attrs[a]);
      }
      else {
        _$jscoverage['core/node.js'][316]++;
        this.attrs[a.toLowerCase()] = attrName[a];
      }
}
  }
  else {
    _$jscoverage['core/node.js'][320]++;
    if ((! attrVal)) {
      _$jscoverage['core/node.js'][321]++;
      (delete this.attrs[attrName]);
    }
    else {
      _$jscoverage['core/node.js'][323]++;
      this.attrs[attrName.toLowerCase()] = attrVal;
    }
  }
}), getIndex: (function () {
  _$jscoverage['core/node.js'][329]++;
  var parent = this.parentNode;
  _$jscoverage['core/node.js'][330]++;
  for (var i = 0, ci; (ci = parent.children[i]); (i++)) {
    _$jscoverage['core/node.js'][331]++;
    if ((ci === this)) {
      _$jscoverage['core/node.js'][332]++;
      return i;
    }
}
  _$jscoverage['core/node.js'][335]++;
  return -1;
}), getNodeById: (function (id) {
  _$jscoverage['core/node.js'][338]++;
  var node;
  _$jscoverage['core/node.js'][339]++;
  if ((this.children && this.children.length)) {
    _$jscoverage['core/node.js'][340]++;
    for (var i = 0, ci; (ci = this.children[(i++)]);) {
      _$jscoverage['core/node.js'][341]++;
      if ((node = getNodeById(ci, id))) {
        _$jscoverage['core/node.js'][342]++;
        return node;
      }
}
  }
}), getNodesByTagName: (function (tagNames) {
  _$jscoverage['core/node.js'][348]++;
  tagNames = utils.trim(tagNames).replace(/[ ]{2,}/g, " ").split(" ");
  _$jscoverage['core/node.js'][349]++;
  var arr = [], me = this;
  _$jscoverage['core/node.js'][350]++;
  utils.each(tagNames, (function (tagName) {
  _$jscoverage['core/node.js'][351]++;
  if ((me.children && me.children.length)) {
    _$jscoverage['core/node.js'][352]++;
    for (var i = 0, ci; (ci = me.children[(i++)]);) {
      _$jscoverage['core/node.js'][353]++;
      getNodesByTagName(ci, tagName, arr);
}
  }
}));
  _$jscoverage['core/node.js'][357]++;
  return arr;
}), getStyle: (function (name) {
  _$jscoverage['core/node.js'][360]++;
  var cssStyle = this.getAttr("style");
  _$jscoverage['core/node.js'][361]++;
  if ((! cssStyle)) {
    _$jscoverage['core/node.js'][362]++;
    return "";
  }
  _$jscoverage['core/node.js'][364]++;
  var reg = new RegExp((name + ":([^;]+)"));
  _$jscoverage['core/node.js'][365]++;
  var match = cssStyle.match(reg);
  _$jscoverage['core/node.js'][366]++;
  if ((match && match[0])) {
    _$jscoverage['core/node.js'][367]++;
    return match[1];
  }
  _$jscoverage['core/node.js'][369]++;
  return "";
}), setStyle: (function (name, val) {
  _$jscoverage['core/node.js'][372]++;
  function exec(name, val) {
    _$jscoverage['core/node.js'][373]++;
    var reg = new RegExp((name + ":([^;]+);?"), "gi");
    _$jscoverage['core/node.js'][374]++;
    cssStyle = cssStyle.replace(reg, "");
    _$jscoverage['core/node.js'][375]++;
    if (val) {
      _$jscoverage['core/node.js'][376]++;
      cssStyle = (name + ":" + utils.unhtml(val) + ";" + cssStyle);
    }
}
  _$jscoverage['core/node.js'][381]++;
  var cssStyle = this.getAttr("style");
  _$jscoverage['core/node.js'][382]++;
  if ((! cssStyle)) {
    _$jscoverage['core/node.js'][383]++;
    cssStyle = "";
  }
  _$jscoverage['core/node.js'][385]++;
  if (utils.isObject(name)) {
    _$jscoverage['core/node.js'][386]++;
    for (var a in name) {
      _$jscoverage['core/node.js'][387]++;
      exec(a, name[a]);
}
  }
  else {
    _$jscoverage['core/node.js'][390]++;
    exec(name, val);
  }
  _$jscoverage['core/node.js'][392]++;
  this.setAttr("style", cssStyle);
})};
})();
