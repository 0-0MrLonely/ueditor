/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['core/filternode.js']) {
  _$jscoverage['core/filternode.js'] = [];
  _$jscoverage['core/filternode.js'][9] = 0;
  _$jscoverage['core/filternode.js'][10] = 0;
  _$jscoverage['core/filternode.js'][11] = 0;
  _$jscoverage['core/filternode.js'][13] = 0;
  _$jscoverage['core/filternode.js'][15] = 0;
  _$jscoverage['core/filternode.js'][16] = 0;
  _$jscoverage['core/filternode.js'][17] = 0;
  _$jscoverage['core/filternode.js'][18] = 0;
  _$jscoverage['core/filternode.js'][19] = 0;
  _$jscoverage['core/filternode.js'][20] = 0;
  _$jscoverage['core/filternode.js'][22] = 0;
  _$jscoverage['core/filternode.js'][23] = 0;
  _$jscoverage['core/filternode.js'][24] = 0;
  _$jscoverage['core/filternode.js'][25] = 0;
  _$jscoverage['core/filternode.js'][26] = 0;
  _$jscoverage['core/filternode.js'][27] = 0;
  _$jscoverage['core/filternode.js'][28] = 0;
  _$jscoverage['core/filternode.js'][33] = 0;
  _$jscoverage['core/filternode.js'][34] = 0;
  _$jscoverage['core/filternode.js'][35] = 0;
  _$jscoverage['core/filternode.js'][36] = 0;
  _$jscoverage['core/filternode.js'][43] = 0;
  _$jscoverage['core/filternode.js'][44] = 0;
  _$jscoverage['core/filternode.js'][45] = 0;
  _$jscoverage['core/filternode.js'][46] = 0;
  _$jscoverage['core/filternode.js'][47] = 0;
  _$jscoverage['core/filternode.js'][49] = 0;
  _$jscoverage['core/filternode.js'][50] = 0;
  _$jscoverage['core/filternode.js'][51] = 0;
  _$jscoverage['core/filternode.js'][52] = 0;
  _$jscoverage['core/filternode.js'][53] = 0;
  _$jscoverage['core/filternode.js'][54] = 0;
  _$jscoverage['core/filternode.js'][57] = 0;
  _$jscoverage['core/filternode.js'][59] = 0;
  _$jscoverage['core/filternode.js'][60] = 0;
  _$jscoverage['core/filternode.js'][64] = 0;
  _$jscoverage['core/filternode.js'][66] = 0;
  _$jscoverage['core/filternode.js'][67] = 0;
  _$jscoverage['core/filternode.js'][68] = 0;
  _$jscoverage['core/filternode.js'][69] = 0;
  _$jscoverage['core/filternode.js'][70] = 0;
  _$jscoverage['core/filternode.js'][77] = 0;
  _$jscoverage['core/filternode.js'][78] = 0;
  _$jscoverage['core/filternode.js'][80] = 0;
  _$jscoverage['core/filternode.js'][82] = 0;
  _$jscoverage['core/filternode.js'][83] = 0;
  _$jscoverage['core/filternode.js'][84] = 0;
  _$jscoverage['core/filternode.js'][85] = 0;
  _$jscoverage['core/filternode.js'][86] = 0;
  _$jscoverage['core/filternode.js'][91] = 0;
  _$jscoverage['core/filternode.js'][93] = 0;
  _$jscoverage['core/filternode.js'][97] = 0;
  _$jscoverage['core/filternode.js'][98] = 0;
  _$jscoverage['core/filternode.js'][99] = 0;
  _$jscoverage['core/filternode.js'][101] = 0;
  _$jscoverage['core/filternode.js'][102] = 0;
  _$jscoverage['core/filternode.js'][103] = 0;
  _$jscoverage['core/filternode.js'][104] = 0;
  _$jscoverage['core/filternode.js'][107] = 0;
  _$jscoverage['core/filternode.js'][108] = 0;
  _$jscoverage['core/filternode.js'][109] = 0;
  _$jscoverage['core/filternode.js'][110] = 0;
  _$jscoverage['core/filternode.js'][113] = 0;
}
_$jscoverage['core/filternode.js'].source = ["<span class=\"c\">/**</span>","<span class=\"c\"> * @file</span>","<span class=\"c\"> * @name UE.filterNode</span>","<span class=\"c\"> * @short filterNode</span>","<span class=\"c\"> * @desc &#26681;&#25454;&#32473;&#23450;&#30340;&#35268;&#21017;&#36807;&#28388;&#33410;&#28857;</span>","<span class=\"c\"> * @import editor.js,core/utils.js</span>","<span class=\"c\"> * @anthor zhanyi</span>","<span class=\"c\"> */</span>","<span class=\"k\">var</span> filterNode <span class=\"k\">=</span> UE<span class=\"k\">.</span>filterNode <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">function</span> filterNode<span class=\"k\">(</span>node<span class=\"k\">,</span>rules<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">switch</span> <span class=\"k\">(</span>node<span class=\"k\">.</span>type<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">case</span> <span class=\"s\">'text'</span><span class=\"k\">:</span>","                <span class=\"k\">break</span><span class=\"k\">;</span>","            <span class=\"k\">case</span> <span class=\"s\">'element'</span><span class=\"k\">:</span>","                <span class=\"k\">var</span> val<span class=\"k\">;</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>val <span class=\"k\">=</span> rules<span class=\"k\">[</span>node<span class=\"k\">.</span>tagName<span class=\"k\">])</span><span class=\"k\">{</span>","                   <span class=\"k\">if</span><span class=\"k\">(</span>val <span class=\"k\">===</span> <span class=\"s\">'-'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                       node<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>removeChild<span class=\"k\">(</span>node<span class=\"k\">)</span>","                   <span class=\"k\">}</span><span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span>utils<span class=\"k\">.</span>isFunction<span class=\"k\">(</span>val<span class=\"k\">))</span><span class=\"k\">{</span>","                       <span class=\"k\">var</span> parentNode <span class=\"k\">=</span> node<span class=\"k\">.</span>parentNode<span class=\"k\">,</span>","                           index <span class=\"k\">=</span> node<span class=\"k\">.</span>getIndex<span class=\"k\">();</span>","                       val<span class=\"k\">(</span>node<span class=\"k\">);</span>","                       <span class=\"k\">if</span><span class=\"k\">(</span>node<span class=\"k\">.</span>parentNode<span class=\"k\">)</span><span class=\"k\">{</span>","                           <span class=\"k\">if</span><span class=\"k\">(</span>node<span class=\"k\">.</span>children<span class=\"k\">)</span><span class=\"k\">{</span>","                               <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span>ci<span class=\"k\">;</span>ci<span class=\"k\">=</span>node<span class=\"k\">.</span>children<span class=\"k\">[</span>i<span class=\"k\">];)</span><span class=\"k\">{</span>","                                   filterNode<span class=\"k\">(</span>ci<span class=\"k\">,</span>rules<span class=\"k\">);</span>","                                   <span class=\"k\">if</span><span class=\"k\">(</span>ci<span class=\"k\">.</span>parentNode<span class=\"k\">)</span><span class=\"k\">{</span>","                                       i<span class=\"k\">++;</span>","                                   <span class=\"k\">}</span>","                               <span class=\"k\">}</span>","                           <span class=\"k\">}</span>","                       <span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>","                           <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> index<span class=\"k\">,</span>ci<span class=\"k\">;</span>ci<span class=\"k\">=</span>parentNode<span class=\"k\">.</span>children<span class=\"k\">[</span>i<span class=\"k\">];)</span><span class=\"k\">{</span>","                               filterNode<span class=\"k\">(</span>ci<span class=\"k\">,</span>rules<span class=\"k\">);</span>","                               <span class=\"k\">if</span><span class=\"k\">(</span>ci<span class=\"k\">.</span>parentNode<span class=\"k\">)</span><span class=\"k\">{</span>","                                   i<span class=\"k\">++;</span>","                               <span class=\"k\">}</span>","                           <span class=\"k\">}</span>","                       <span class=\"k\">}</span>","","","                   <span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>","                       <span class=\"k\">var</span> attrs <span class=\"k\">=</span> val<span class=\"k\">[</span><span class=\"s\">'$'</span><span class=\"k\">];</span>","                       <span class=\"k\">if</span><span class=\"k\">(</span>attrs <span class=\"k\">&amp;&amp;</span> node<span class=\"k\">.</span>attrs<span class=\"k\">)</span><span class=\"k\">{</span>","                           <span class=\"k\">var</span> tmpAttrs <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">,</span>tmpVal<span class=\"k\">;</span>","                           <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> a <span class=\"k\">in</span> attrs<span class=\"k\">)</span><span class=\"k\">{</span>","                               tmpVal <span class=\"k\">=</span> node<span class=\"k\">.</span>getAttr<span class=\"k\">(</span>a<span class=\"k\">);</span>","                               <span class=\"c\">//todo &#21482;&#20808;&#23545;style&#21333;&#29420;&#22788;&#29702;</span>","                               <span class=\"k\">if</span><span class=\"k\">(</span>a <span class=\"k\">==</span> <span class=\"s\">'style'</span> <span class=\"k\">&amp;&amp;</span> utils<span class=\"k\">.</span>isArray<span class=\"k\">(</span>attrs<span class=\"k\">[</span>a<span class=\"k\">]))</span><span class=\"k\">{</span>","                                   <span class=\"k\">var</span> tmpCssStyle <span class=\"k\">=</span> <span class=\"k\">[];</span>","                                   utils<span class=\"k\">.</span>each<span class=\"k\">(</span>attrs<span class=\"k\">[</span>a<span class=\"k\">],</span><span class=\"k\">function</span><span class=\"k\">(</span>v<span class=\"k\">)</span><span class=\"k\">{</span>","                                       <span class=\"k\">var</span> tmp<span class=\"k\">;</span>","                                       <span class=\"k\">if</span><span class=\"k\">(</span>tmp <span class=\"k\">=</span> node<span class=\"k\">.</span>getStyle<span class=\"k\">(</span>v<span class=\"k\">))</span><span class=\"k\">{</span>","                                           tmpCssStyle<span class=\"k\">.</span>push<span class=\"k\">(</span>v <span class=\"k\">+</span> <span class=\"s\">':'</span> <span class=\"k\">+</span> tmp<span class=\"k\">);</span>","                                       <span class=\"k\">}</span>","                                   <span class=\"k\">}</span><span class=\"k\">);</span>","                                   tmpVal <span class=\"k\">=</span> tmpCssStyle<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">';'</span><span class=\"k\">)</span>","                               <span class=\"k\">}</span>","                               <span class=\"k\">if</span><span class=\"k\">(</span>tmpVal<span class=\"k\">)</span><span class=\"k\">{</span>","                                   tmpAttrs<span class=\"k\">[</span>a<span class=\"k\">]</span> <span class=\"k\">=</span> tmpVal<span class=\"k\">;</span>","                               <span class=\"k\">}</span>","","                           <span class=\"k\">}</span>","                           node<span class=\"k\">.</span>attrs <span class=\"k\">=</span> tmpAttrs<span class=\"k\">;</span>","                       <span class=\"k\">}</span>","                       <span class=\"k\">if</span><span class=\"k\">(</span>node<span class=\"k\">.</span>children<span class=\"k\">)</span><span class=\"k\">{</span>","                           <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span>ci<span class=\"k\">;</span>ci<span class=\"k\">=</span>node<span class=\"k\">.</span>children<span class=\"k\">[</span>i<span class=\"k\">];)</span><span class=\"k\">{</span>","                               filterNode<span class=\"k\">(</span>ci<span class=\"k\">,</span>rules<span class=\"k\">);</span>","                               <span class=\"k\">if</span><span class=\"k\">(</span>ci<span class=\"k\">.</span>parentNode<span class=\"k\">)</span><span class=\"k\">{</span>","                                   i<span class=\"k\">++;</span>","                               <span class=\"k\">}</span>","                           <span class=\"k\">}</span>","                       <span class=\"k\">}</span>","                   <span class=\"k\">}</span>","                <span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>","                    <span class=\"c\">//&#22914;&#26524;&#19981;&#22312;&#21517;&#21333;&#37324;&#25187;&#20986;&#23376;&#33410;&#28857;&#24182;&#21024;&#38500;&#35813;&#33410;&#28857;,cdata&#38500;&#22806;</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>dtd<span class=\"k\">.</span>$cdata<span class=\"k\">[</span>node<span class=\"k\">.</span>tagName<span class=\"k\">])</span><span class=\"k\">{</span>","                        node<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>removeChild<span class=\"k\">(</span>node<span class=\"k\">)</span>","                    <span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>","                        <span class=\"k\">var</span> parentNode <span class=\"k\">=</span> node<span class=\"k\">.</span>parentNode<span class=\"k\">,</span>","                            index <span class=\"k\">=</span> node<span class=\"k\">.</span>getIndex<span class=\"k\">();</span>","                        node<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>removeChild<span class=\"k\">(</span>node<span class=\"k\">,</span><span class=\"k\">true</span><span class=\"k\">);</span>","                        <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> index<span class=\"k\">,</span>ci<span class=\"k\">;</span>ci<span class=\"k\">=</span>parentNode<span class=\"k\">.</span>children<span class=\"k\">[</span>i<span class=\"k\">];)</span><span class=\"k\">{</span>","                            filterNode<span class=\"k\">(</span>ci<span class=\"k\">,</span>rules<span class=\"k\">);</span>","                            <span class=\"k\">if</span><span class=\"k\">(</span>ci<span class=\"k\">.</span>parentNode<span class=\"k\">)</span><span class=\"k\">{</span>","                                i<span class=\"k\">++;</span>","                            <span class=\"k\">}</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                <span class=\"k\">break</span><span class=\"k\">;</span>","            <span class=\"k\">case</span> <span class=\"s\">'comment'</span><span class=\"k\">:</span>","                node<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>removeChild<span class=\"k\">(</span>node<span class=\"k\">)</span>","        <span class=\"k\">}</span>","","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> <span class=\"k\">function</span><span class=\"k\">(</span>root<span class=\"k\">,</span>rules<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>utils<span class=\"k\">.</span>isEmptyObject<span class=\"k\">(</span>rules<span class=\"k\">))</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> root<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">var</span> val<span class=\"k\">;</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>val <span class=\"k\">=</span> rules<span class=\"k\">[</span><span class=\"s\">'-'</span><span class=\"k\">])</span><span class=\"k\">{</span>","            utils<span class=\"k\">.</span>each<span class=\"k\">(</span>val<span class=\"k\">.</span>split<span class=\"k\">(</span><span class=\"s\">' '</span><span class=\"k\">),</span><span class=\"k\">function</span><span class=\"k\">(</span>k<span class=\"k\">)</span><span class=\"k\">{</span>","                rules<span class=\"k\">[</span>k<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"s\">'-'</span>","            <span class=\"k\">}</span><span class=\"k\">)</span>","        <span class=\"k\">}</span>","        <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span>ci<span class=\"k\">;</span>ci<span class=\"k\">=</span>root<span class=\"k\">.</span>children<span class=\"k\">[</span>i<span class=\"k\">];)</span><span class=\"k\">{</span>","            filterNode<span class=\"k\">(</span>ci<span class=\"k\">,</span>rules<span class=\"k\">);</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>ci<span class=\"k\">.</span>parentNode<span class=\"k\">)</span><span class=\"k\">{</span>","               i<span class=\"k\">++;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> root<span class=\"k\">;</span>","    <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">();</span>"];
_$jscoverage['core/filternode.js'][9]++;
var filterNode = (UE.filterNode = (function () {
  _$jscoverage['core/filternode.js'][10]++;
  function filterNode(node, rules) {
    _$jscoverage['core/filternode.js'][11]++;
    switch (node.type) {
    case "text":
      _$jscoverage['core/filternode.js'][13]++;
      break;
    case "element":
      _$jscoverage['core/filternode.js'][15]++;
      var val;
      _$jscoverage['core/filternode.js'][16]++;
      if ((val = rules[node.tagName])) {
        _$jscoverage['core/filternode.js'][17]++;
        if ((val === "-")) {
          _$jscoverage['core/filternode.js'][18]++;
          node.parentNode.removeChild(node);
        }
        else {
          _$jscoverage['core/filternode.js'][19]++;
          if (utils.isFunction(val)) {
            _$jscoverage['core/filternode.js'][20]++;
            var parentNode = node.parentNode, index = node.getIndex();
            _$jscoverage['core/filternode.js'][22]++;
            val(node);
            _$jscoverage['core/filternode.js'][23]++;
            if (node.parentNode) {
              _$jscoverage['core/filternode.js'][24]++;
              if (node.children) {
                _$jscoverage['core/filternode.js'][25]++;
                for (var i = 0, ci; (ci = node.children[i]);) {
                  _$jscoverage['core/filternode.js'][26]++;
                  filterNode(ci, rules);
                  _$jscoverage['core/filternode.js'][27]++;
                  if (ci.parentNode) {
                    _$jscoverage['core/filternode.js'][28]++;
                    (i++);
                  }
}
              }
            }
            else {
              _$jscoverage['core/filternode.js'][33]++;
              for (var i = index, ci = ci; (ci = parentNode.children[i]);) {
                _$jscoverage['core/filternode.js'][34]++;
                filterNode(ci, rules);
                _$jscoverage['core/filternode.js'][35]++;
                if (ci.parentNode) {
                  _$jscoverage['core/filternode.js'][36]++;
                  (i++);
                }
}
            }
          }
          else {
            _$jscoverage['core/filternode.js'][43]++;
            var attrs = val.$;
            _$jscoverage['core/filternode.js'][44]++;
            if ((attrs && node.attrs)) {
              _$jscoverage['core/filternode.js'][45]++;
              var tmpAttrs = {}, tmpVal;
              _$jscoverage['core/filternode.js'][46]++;
              for (var a in attrs) {
                _$jscoverage['core/filternode.js'][47]++;
                tmpVal = node.getAttr(a);
                _$jscoverage['core/filternode.js'][49]++;
                if (((a == "style") && utils.isArray(attrs[a]))) {
                  _$jscoverage['core/filternode.js'][50]++;
                  var tmpCssStyle = [];
                  _$jscoverage['core/filternode.js'][51]++;
                  utils.each(attrs[a], (function (v) {
  _$jscoverage['core/filternode.js'][52]++;
  var tmp;
  _$jscoverage['core/filternode.js'][53]++;
  if ((tmp = node.getStyle(v))) {
    _$jscoverage['core/filternode.js'][54]++;
    tmpCssStyle.push((v + ":" + tmp));
  }
}));
                  _$jscoverage['core/filternode.js'][57]++;
                  tmpVal = tmpCssStyle.join(";");
                }
                _$jscoverage['core/filternode.js'][59]++;
                if (tmpVal) {
                  _$jscoverage['core/filternode.js'][60]++;
                  tmpAttrs[a] = tmpVal;
                }
}
              _$jscoverage['core/filternode.js'][64]++;
              node.attrs = tmpAttrs;
            }
            _$jscoverage['core/filternode.js'][66]++;
            if (node.children) {
              _$jscoverage['core/filternode.js'][67]++;
              for (var i = 0, ci = ci; (ci = node.children[i]);) {
                _$jscoverage['core/filternode.js'][68]++;
                filterNode(ci, rules);
                _$jscoverage['core/filternode.js'][69]++;
                if (ci.parentNode) {
                  _$jscoverage['core/filternode.js'][70]++;
                  (i++);
                }
}
            }
          }
        }
      }
      else {
        _$jscoverage['core/filternode.js'][77]++;
        if (dtd.$cdata[node.tagName]) {
          _$jscoverage['core/filternode.js'][78]++;
          node.parentNode.removeChild(node);
        }
        else {
          _$jscoverage['core/filternode.js'][80]++;
          var parentNode = node.parentNode, index = node.getIndex();
          _$jscoverage['core/filternode.js'][82]++;
          node.parentNode.removeChild(node, true);
          _$jscoverage['core/filternode.js'][83]++;
          for (var i = index, ci = ci; (ci = parentNode.children[i]);) {
            _$jscoverage['core/filternode.js'][84]++;
            filterNode(ci, rules);
            _$jscoverage['core/filternode.js'][85]++;
            if (ci.parentNode) {
              _$jscoverage['core/filternode.js'][86]++;
              (i++);
            }
}
        }
      }
      _$jscoverage['core/filternode.js'][91]++;
      break;
    case "comment":
      _$jscoverage['core/filternode.js'][93]++;
      node.parentNode.removeChild(node);
    }
}
  _$jscoverage['core/filternode.js'][97]++;
  return (function (root, rules) {
  _$jscoverage['core/filternode.js'][98]++;
  if (utils.isEmptyObject(rules)) {
    _$jscoverage['core/filternode.js'][99]++;
    return root;
  }
  _$jscoverage['core/filternode.js'][101]++;
  var val;
  _$jscoverage['core/filternode.js'][102]++;
  if ((val = rules["-"])) {
    _$jscoverage['core/filternode.js'][103]++;
    utils.each(val.split(" "), (function (k) {
  _$jscoverage['core/filternode.js'][104]++;
  rules[k] = "-";
}));
  }
  _$jscoverage['core/filternode.js'][107]++;
  for (var i = 0, ci; (ci = root.children[i]);) {
    _$jscoverage['core/filternode.js'][108]++;
    filterNode(ci, rules);
    _$jscoverage['core/filternode.js'][109]++;
    if (ci.parentNode) {
      _$jscoverage['core/filternode.js'][110]++;
      (i++);
    }
}
  _$jscoverage['core/filternode.js'][113]++;
  return root;
});
})());
