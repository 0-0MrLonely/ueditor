/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['plugins/table.core.js']) {
  _$jscoverage['plugins/table.core.js'] = [];
  _$jscoverage['plugins/table.core.js'][13] = 0;
  _$jscoverage['plugins/table.core.js'][14] = 0;
  _$jscoverage['plugins/table.core.js'][15] = 0;
  _$jscoverage['plugins/table.core.js'][16] = 0;
  _$jscoverage['plugins/table.core.js'][17] = 0;
  _$jscoverage['plugins/table.core.js'][18] = 0;
  _$jscoverage['plugins/table.core.js'][19] = 0;
  _$jscoverage['plugins/table.core.js'][23] = 0;
  _$jscoverage['plugins/table.core.js'][24] = 0;
  _$jscoverage['plugins/table.core.js'][25] = 0;
  _$jscoverage['plugins/table.core.js'][28] = 0;
  _$jscoverage['plugins/table.core.js'][29] = 0;
  _$jscoverage['plugins/table.core.js'][30] = 0;
  _$jscoverage['plugins/table.core.js'][33] = 0;
  _$jscoverage['plugins/table.core.js'][34] = 0;
  _$jscoverage['plugins/table.core.js'][35] = 0;
  _$jscoverage['plugins/table.core.js'][36] = 0;
  _$jscoverage['plugins/table.core.js'][38] = 0;
  _$jscoverage['plugins/table.core.js'][39] = 0;
  _$jscoverage['plugins/table.core.js'][40] = 0;
  _$jscoverage['plugins/table.core.js'][43] = 0;
  _$jscoverage['plugins/table.core.js'][45] = 0;
  _$jscoverage['plugins/table.core.js'][46] = 0;
  _$jscoverage['plugins/table.core.js'][47] = 0;
  _$jscoverage['plugins/table.core.js'][54] = 0;
  _$jscoverage['plugins/table.core.js'][55] = 0;
  _$jscoverage['plugins/table.core.js'][62] = 0;
  _$jscoverage['plugins/table.core.js'][69] = 0;
  _$jscoverage['plugins/table.core.js'][70] = 0;
  _$jscoverage['plugins/table.core.js'][71] = 0;
  _$jscoverage['plugins/table.core.js'][72] = 0;
  _$jscoverage['plugins/table.core.js'][74] = 0;
  _$jscoverage['plugins/table.core.js'][77] = 0;
  _$jscoverage['plugins/table.core.js'][78] = 0;
  _$jscoverage['plugins/table.core.js'][84] = 0;
  _$jscoverage['plugins/table.core.js'][85] = 0;
  _$jscoverage['plugins/table.core.js'][86] = 0;
  _$jscoverage['plugins/table.core.js'][87] = 0;
  _$jscoverage['plugins/table.core.js'][88] = 0;
  _$jscoverage['plugins/table.core.js'][89] = 0;
  _$jscoverage['plugins/table.core.js'][90] = 0;
  _$jscoverage['plugins/table.core.js'][91] = 0;
  _$jscoverage['plugins/table.core.js'][92] = 0;
  _$jscoverage['plugins/table.core.js'][93] = 0;
  _$jscoverage['plugins/table.core.js'][94] = 0;
  _$jscoverage['plugins/table.core.js'][95] = 0;
  _$jscoverage['plugins/table.core.js'][96] = 0;
  _$jscoverage['plugins/table.core.js'][102] = 0;
  _$jscoverage['plugins/table.core.js'][103] = 0;
  _$jscoverage['plugins/table.core.js'][104] = 0;
  _$jscoverage['plugins/table.core.js'][105] = 0;
  _$jscoverage['plugins/table.core.js'][106] = 0;
  _$jscoverage['plugins/table.core.js'][107] = 0;
  _$jscoverage['plugins/table.core.js'][108] = 0;
  _$jscoverage['plugins/table.core.js'][109] = 0;
  _$jscoverage['plugins/table.core.js'][120] = 0;
  _$jscoverage['plugins/table.core.js'][121] = 0;
  _$jscoverage['plugins/table.core.js'][122] = 0;
  _$jscoverage['plugins/table.core.js'][123] = 0;
  _$jscoverage['plugins/table.core.js'][124] = 0;
  _$jscoverage['plugins/table.core.js'][126] = 0;
  _$jscoverage['plugins/table.core.js'][129] = 0;
  _$jscoverage['plugins/table.core.js'][130] = 0;
  _$jscoverage['plugins/table.core.js'][131] = 0;
  _$jscoverage['plugins/table.core.js'][133] = 0;
  _$jscoverage['plugins/table.core.js'][134] = 0;
  _$jscoverage['plugins/table.core.js'][135] = 0;
  _$jscoverage['plugins/table.core.js'][136] = 0;
  _$jscoverage['plugins/table.core.js'][137] = 0;
  _$jscoverage['plugins/table.core.js'][139] = 0;
  _$jscoverage['plugins/table.core.js'][140] = 0;
  _$jscoverage['plugins/table.core.js'][141] = 0;
  _$jscoverage['plugins/table.core.js'][142] = 0;
  _$jscoverage['plugins/table.core.js'][143] = 0;
  _$jscoverage['plugins/table.core.js'][144] = 0;
  _$jscoverage['plugins/table.core.js'][145] = 0;
  _$jscoverage['plugins/table.core.js'][146] = 0;
  _$jscoverage['plugins/table.core.js'][149] = 0;
  _$jscoverage['plugins/table.core.js'][151] = 0;
  _$jscoverage['plugins/table.core.js'][152] = 0;
  _$jscoverage['plugins/table.core.js'][153] = 0;
  _$jscoverage['plugins/table.core.js'][154] = 0;
  _$jscoverage['plugins/table.core.js'][155] = 0;
  _$jscoverage['plugins/table.core.js'][157] = 0;
  _$jscoverage['plugins/table.core.js'][159] = 0;
  _$jscoverage['plugins/table.core.js'][165] = 0;
  _$jscoverage['plugins/table.core.js'][166] = 0;
  _$jscoverage['plugins/table.core.js'][167] = 0;
  _$jscoverage['plugins/table.core.js'][168] = 0;
  _$jscoverage['plugins/table.core.js'][169] = 0;
  _$jscoverage['plugins/table.core.js'][170] = 0;
  _$jscoverage['plugins/table.core.js'][171] = 0;
  _$jscoverage['plugins/table.core.js'][172] = 0;
  _$jscoverage['plugins/table.core.js'][173] = 0;
  _$jscoverage['plugins/table.core.js'][175] = 0;
  _$jscoverage['plugins/table.core.js'][181] = 0;
  _$jscoverage['plugins/table.core.js'][182] = 0;
  _$jscoverage['plugins/table.core.js'][184] = 0;
  _$jscoverage['plugins/table.core.js'][195] = 0;
  _$jscoverage['plugins/table.core.js'][196] = 0;
  _$jscoverage['plugins/table.core.js'][198] = 0;
  _$jscoverage['plugins/table.core.js'][201] = 0;
  _$jscoverage['plugins/table.core.js'][203] = 0;
  _$jscoverage['plugins/table.core.js'][204] = 0;
  _$jscoverage['plugins/table.core.js'][206] = 0;
  _$jscoverage['plugins/table.core.js'][208] = 0;
  _$jscoverage['plugins/table.core.js'][212] = 0;
  _$jscoverage['plugins/table.core.js'][216] = 0;
  _$jscoverage['plugins/table.core.js'][217] = 0;
  _$jscoverage['plugins/table.core.js'][219] = 0;
  _$jscoverage['plugins/table.core.js'][220] = 0;
  _$jscoverage['plugins/table.core.js'][221] = 0;
  _$jscoverage['plugins/table.core.js'][222] = 0;
  _$jscoverage['plugins/table.core.js'][226] = 0;
  _$jscoverage['plugins/table.core.js'][235] = 0;
  _$jscoverage['plugins/table.core.js'][236] = 0;
  _$jscoverage['plugins/table.core.js'][238] = 0;
  _$jscoverage['plugins/table.core.js'][241] = 0;
  _$jscoverage['plugins/table.core.js'][243] = 0;
  _$jscoverage['plugins/table.core.js'][245] = 0;
  _$jscoverage['plugins/table.core.js'][246] = 0;
  _$jscoverage['plugins/table.core.js'][248] = 0;
  _$jscoverage['plugins/table.core.js'][255] = 0;
  _$jscoverage['plugins/table.core.js'][256] = 0;
  _$jscoverage['plugins/table.core.js'][260] = 0;
  _$jscoverage['plugins/table.core.js'][261] = 0;
  _$jscoverage['plugins/table.core.js'][262] = 0;
  _$jscoverage['plugins/table.core.js'][263] = 0;
  _$jscoverage['plugins/table.core.js'][265] = 0;
  _$jscoverage['plugins/table.core.js'][266] = 0;
  _$jscoverage['plugins/table.core.js'][269] = 0;
  _$jscoverage['plugins/table.core.js'][270] = 0;
  _$jscoverage['plugins/table.core.js'][272] = 0;
  _$jscoverage['plugins/table.core.js'][276] = 0;
  _$jscoverage['plugins/table.core.js'][278] = 0;
  _$jscoverage['plugins/table.core.js'][282] = 0;
  _$jscoverage['plugins/table.core.js'][289] = 0;
  _$jscoverage['plugins/table.core.js'][290] = 0;
  _$jscoverage['plugins/table.core.js'][292] = 0;
  _$jscoverage['plugins/table.core.js'][293] = 0;
  _$jscoverage['plugins/table.core.js'][294] = 0;
  _$jscoverage['plugins/table.core.js'][295] = 0;
  _$jscoverage['plugins/table.core.js'][296] = 0;
  _$jscoverage['plugins/table.core.js'][297] = 0;
  _$jscoverage['plugins/table.core.js'][298] = 0;
  _$jscoverage['plugins/table.core.js'][299] = 0;
  _$jscoverage['plugins/table.core.js'][303] = 0;
  _$jscoverage['plugins/table.core.js'][305] = 0;
  _$jscoverage['plugins/table.core.js'][312] = 0;
  _$jscoverage['plugins/table.core.js'][313] = 0;
  _$jscoverage['plugins/table.core.js'][314] = 0;
  _$jscoverage['plugins/table.core.js'][315] = 0;
  _$jscoverage['plugins/table.core.js'][316] = 0;
  _$jscoverage['plugins/table.core.js'][320] = 0;
  _$jscoverage['plugins/table.core.js'][321] = 0;
  _$jscoverage['plugins/table.core.js'][323] = 0;
  _$jscoverage['plugins/table.core.js'][324] = 0;
  _$jscoverage['plugins/table.core.js'][325] = 0;
  _$jscoverage['plugins/table.core.js'][326] = 0;
  _$jscoverage['plugins/table.core.js'][329] = 0;
  _$jscoverage['plugins/table.core.js'][330] = 0;
  _$jscoverage['plugins/table.core.js'][332] = 0;
  _$jscoverage['plugins/table.core.js'][333] = 0;
  _$jscoverage['plugins/table.core.js'][335] = 0;
  _$jscoverage['plugins/table.core.js'][339] = 0;
  _$jscoverage['plugins/table.core.js'][340] = 0;
  _$jscoverage['plugins/table.core.js'][341] = 0;
  _$jscoverage['plugins/table.core.js'][342] = 0;
  _$jscoverage['plugins/table.core.js'][354] = 0;
  _$jscoverage['plugins/table.core.js'][355] = 0;
  _$jscoverage['plugins/table.core.js'][356] = 0;
  _$jscoverage['plugins/table.core.js'][357] = 0;
  _$jscoverage['plugins/table.core.js'][358] = 0;
  _$jscoverage['plugins/table.core.js'][359] = 0;
  _$jscoverage['plugins/table.core.js'][360] = 0;
  _$jscoverage['plugins/table.core.js'][361] = 0;
  _$jscoverage['plugins/table.core.js'][362] = 0;
  _$jscoverage['plugins/table.core.js'][363] = 0;
  _$jscoverage['plugins/table.core.js'][364] = 0;
  _$jscoverage['plugins/table.core.js'][375] = 0;
  _$jscoverage['plugins/table.core.js'][377] = 0;
  _$jscoverage['plugins/table.core.js'][378] = 0;
  _$jscoverage['plugins/table.core.js'][379] = 0;
  _$jscoverage['plugins/table.core.js'][382] = 0;
  _$jscoverage['plugins/table.core.js'][383] = 0;
  _$jscoverage['plugins/table.core.js'][387] = 0;
  _$jscoverage['plugins/table.core.js'][388] = 0;
  _$jscoverage['plugins/table.core.js'][401] = 0;
  _$jscoverage['plugins/table.core.js'][402] = 0;
  _$jscoverage['plugins/table.core.js'][406] = 0;
  _$jscoverage['plugins/table.core.js'][407] = 0;
  _$jscoverage['plugins/table.core.js'][408] = 0;
  _$jscoverage['plugins/table.core.js'][409] = 0;
  _$jscoverage['plugins/table.core.js'][417] = 0;
  _$jscoverage['plugins/table.core.js'][423] = 0;
  _$jscoverage['plugins/table.core.js'][424] = 0;
  _$jscoverage['plugins/table.core.js'][425] = 0;
  _$jscoverage['plugins/table.core.js'][431] = 0;
  _$jscoverage['plugins/table.core.js'][432] = 0;
  _$jscoverage['plugins/table.core.js'][438] = 0;
  _$jscoverage['plugins/table.core.js'][439] = 0;
  _$jscoverage['plugins/table.core.js'][440] = 0;
  _$jscoverage['plugins/table.core.js'][441] = 0;
  _$jscoverage['plugins/table.core.js'][442] = 0;
  _$jscoverage['plugins/table.core.js'][443] = 0;
  _$jscoverage['plugins/table.core.js'][448] = 0;
  _$jscoverage['plugins/table.core.js'][449] = 0;
  _$jscoverage['plugins/table.core.js'][450] = 0;
  _$jscoverage['plugins/table.core.js'][451] = 0;
  _$jscoverage['plugins/table.core.js'][452] = 0;
  _$jscoverage['plugins/table.core.js'][453] = 0;
  _$jscoverage['plugins/table.core.js'][458] = 0;
  _$jscoverage['plugins/table.core.js'][459] = 0;
  _$jscoverage['plugins/table.core.js'][460] = 0;
  _$jscoverage['plugins/table.core.js'][461] = 0;
  _$jscoverage['plugins/table.core.js'][462] = 0;
  _$jscoverage['plugins/table.core.js'][463] = 0;
  _$jscoverage['plugins/table.core.js'][468] = 0;
  _$jscoverage['plugins/table.core.js'][469] = 0;
  _$jscoverage['plugins/table.core.js'][470] = 0;
  _$jscoverage['plugins/table.core.js'][471] = 0;
  _$jscoverage['plugins/table.core.js'][472] = 0;
  _$jscoverage['plugins/table.core.js'][473] = 0;
  _$jscoverage['plugins/table.core.js'][478] = 0;
  _$jscoverage['plugins/table.core.js'][479] = 0;
  _$jscoverage['plugins/table.core.js'][482] = 0;
  _$jscoverage['plugins/table.core.js'][491] = 0;
  _$jscoverage['plugins/table.core.js'][492] = 0;
  _$jscoverage['plugins/table.core.js'][494] = 0;
  _$jscoverage['plugins/table.core.js'][495] = 0;
  _$jscoverage['plugins/table.core.js'][502] = 0;
  _$jscoverage['plugins/table.core.js'][504] = 0;
  _$jscoverage['plugins/table.core.js'][509] = 0;
  _$jscoverage['plugins/table.core.js'][511] = 0;
  _$jscoverage['plugins/table.core.js'][519] = 0;
  _$jscoverage['plugins/table.core.js'][520] = 0;
  _$jscoverage['plugins/table.core.js'][525] = 0;
  _$jscoverage['plugins/table.core.js'][526] = 0;
  _$jscoverage['plugins/table.core.js'][527] = 0;
  _$jscoverage['plugins/table.core.js'][528] = 0;
  _$jscoverage['plugins/table.core.js'][529] = 0;
  _$jscoverage['plugins/table.core.js'][531] = 0;
  _$jscoverage['plugins/table.core.js'][532] = 0;
  _$jscoverage['plugins/table.core.js'][533] = 0;
  _$jscoverage['plugins/table.core.js'][534] = 0;
  _$jscoverage['plugins/table.core.js'][535] = 0;
  _$jscoverage['plugins/table.core.js'][537] = 0;
  _$jscoverage['plugins/table.core.js'][540] = 0;
  _$jscoverage['plugins/table.core.js'][546] = 0;
  _$jscoverage['plugins/table.core.js'][547] = 0;
  _$jscoverage['plugins/table.core.js'][548] = 0;
  _$jscoverage['plugins/table.core.js'][554] = 0;
  _$jscoverage['plugins/table.core.js'][555] = 0;
  _$jscoverage['plugins/table.core.js'][556] = 0;
  _$jscoverage['plugins/table.core.js'][557] = 0;
  _$jscoverage['plugins/table.core.js'][560] = 0;
  _$jscoverage['plugins/table.core.js'][561] = 0;
  _$jscoverage['plugins/table.core.js'][564] = 0;
  _$jscoverage['plugins/table.core.js'][568] = 0;
  _$jscoverage['plugins/table.core.js'][577] = 0;
  _$jscoverage['plugins/table.core.js'][578] = 0;
  _$jscoverage['plugins/table.core.js'][580] = 0;
  _$jscoverage['plugins/table.core.js'][583] = 0;
  _$jscoverage['plugins/table.core.js'][585] = 0;
  _$jscoverage['plugins/table.core.js'][587] = 0;
  _$jscoverage['plugins/table.core.js'][588] = 0;
  _$jscoverage['plugins/table.core.js'][590] = 0;
  _$jscoverage['plugins/table.core.js'][594] = 0;
  _$jscoverage['plugins/table.core.js'][595] = 0;
  _$jscoverage['plugins/table.core.js'][597] = 0;
  _$jscoverage['plugins/table.core.js'][600] = 0;
  _$jscoverage['plugins/table.core.js'][602] = 0;
  _$jscoverage['plugins/table.core.js'][604] = 0;
  _$jscoverage['plugins/table.core.js'][606] = 0;
  _$jscoverage['plugins/table.core.js'][608] = 0;
  _$jscoverage['plugins/table.core.js'][615] = 0;
  _$jscoverage['plugins/table.core.js'][616] = 0;
  _$jscoverage['plugins/table.core.js'][617] = 0;
  _$jscoverage['plugins/table.core.js'][618] = 0;
  _$jscoverage['plugins/table.core.js'][620] = 0;
  _$jscoverage['plugins/table.core.js'][621] = 0;
  _$jscoverage['plugins/table.core.js'][622] = 0;
  _$jscoverage['plugins/table.core.js'][624] = 0;
  _$jscoverage['plugins/table.core.js'][625] = 0;
  _$jscoverage['plugins/table.core.js'][632] = 0;
  _$jscoverage['plugins/table.core.js'][637] = 0;
  _$jscoverage['plugins/table.core.js'][639] = 0;
  _$jscoverage['plugins/table.core.js'][641] = 0;
  _$jscoverage['plugins/table.core.js'][643] = 0;
  _$jscoverage['plugins/table.core.js'][644] = 0;
  _$jscoverage['plugins/table.core.js'][650] = 0;
  _$jscoverage['plugins/table.core.js'][654] = 0;
  _$jscoverage['plugins/table.core.js'][655] = 0;
  _$jscoverage['plugins/table.core.js'][656] = 0;
  _$jscoverage['plugins/table.core.js'][657] = 0;
  _$jscoverage['plugins/table.core.js'][658] = 0;
  _$jscoverage['plugins/table.core.js'][665] = 0;
  _$jscoverage['plugins/table.core.js'][667] = 0;
  _$jscoverage['plugins/table.core.js'][668] = 0;
  _$jscoverage['plugins/table.core.js'][670] = 0;
  _$jscoverage['plugins/table.core.js'][671] = 0;
  _$jscoverage['plugins/table.core.js'][675] = 0;
  _$jscoverage['plugins/table.core.js'][677] = 0;
  _$jscoverage['plugins/table.core.js'][678] = 0;
  _$jscoverage['plugins/table.core.js'][679] = 0;
  _$jscoverage['plugins/table.core.js'][680] = 0;
  _$jscoverage['plugins/table.core.js'][681] = 0;
  _$jscoverage['plugins/table.core.js'][685] = 0;
  _$jscoverage['plugins/table.core.js'][686] = 0;
  _$jscoverage['plugins/table.core.js'][687] = 0;
  _$jscoverage['plugins/table.core.js'][688] = 0;
  _$jscoverage['plugins/table.core.js'][689] = 0;
  _$jscoverage['plugins/table.core.js'][690] = 0;
  _$jscoverage['plugins/table.core.js'][692] = 0;
  _$jscoverage['plugins/table.core.js'][693] = 0;
  _$jscoverage['plugins/table.core.js'][694] = 0;
  _$jscoverage['plugins/table.core.js'][695] = 0;
  _$jscoverage['plugins/table.core.js'][696] = 0;
  _$jscoverage['plugins/table.core.js'][698] = 0;
  _$jscoverage['plugins/table.core.js'][700] = 0;
  _$jscoverage['plugins/table.core.js'][706] = 0;
  _$jscoverage['plugins/table.core.js'][711] = 0;
  _$jscoverage['plugins/table.core.js'][712] = 0;
  _$jscoverage['plugins/table.core.js'][713] = 0;
  _$jscoverage['plugins/table.core.js'][714] = 0;
  _$jscoverage['plugins/table.core.js'][715] = 0;
  _$jscoverage['plugins/table.core.js'][716] = 0;
  _$jscoverage['plugins/table.core.js'][719] = 0;
  _$jscoverage['plugins/table.core.js'][721] = 0;
  _$jscoverage['plugins/table.core.js'][722] = 0;
  _$jscoverage['plugins/table.core.js'][724] = 0;
  _$jscoverage['plugins/table.core.js'][725] = 0;
  _$jscoverage['plugins/table.core.js'][726] = 0;
  _$jscoverage['plugins/table.core.js'][728] = 0;
  _$jscoverage['plugins/table.core.js'][729] = 0;
  _$jscoverage['plugins/table.core.js'][730] = 0;
  _$jscoverage['plugins/table.core.js'][735] = 0;
  _$jscoverage['plugins/table.core.js'][736] = 0;
  _$jscoverage['plugins/table.core.js'][743] = 0;
  _$jscoverage['plugins/table.core.js'][747] = 0;
  _$jscoverage['plugins/table.core.js'][748] = 0;
  _$jscoverage['plugins/table.core.js'][750] = 0;
  _$jscoverage['plugins/table.core.js'][751] = 0;
  _$jscoverage['plugins/table.core.js'][752] = 0;
  _$jscoverage['plugins/table.core.js'][753] = 0;
  _$jscoverage['plugins/table.core.js'][754] = 0;
  _$jscoverage['plugins/table.core.js'][755] = 0;
  _$jscoverage['plugins/table.core.js'][756] = 0;
  _$jscoverage['plugins/table.core.js'][760] = 0;
  _$jscoverage['plugins/table.core.js'][761] = 0;
  _$jscoverage['plugins/table.core.js'][763] = 0;
  _$jscoverage['plugins/table.core.js'][765] = 0;
  _$jscoverage['plugins/table.core.js'][767] = 0;
  _$jscoverage['plugins/table.core.js'][771] = 0;
  _$jscoverage['plugins/table.core.js'][773] = 0;
  _$jscoverage['plugins/table.core.js'][774] = 0;
  _$jscoverage['plugins/table.core.js'][775] = 0;
  _$jscoverage['plugins/table.core.js'][778] = 0;
  _$jscoverage['plugins/table.core.js'][779] = 0;
  _$jscoverage['plugins/table.core.js'][780] = 0;
  _$jscoverage['plugins/table.core.js'][781] = 0;
  _$jscoverage['plugins/table.core.js'][783] = 0;
  _$jscoverage['plugins/table.core.js'][784] = 0;
  _$jscoverage['plugins/table.core.js'][785] = 0;
  _$jscoverage['plugins/table.core.js'][786] = 0;
  _$jscoverage['plugins/table.core.js'][788] = 0;
  _$jscoverage['plugins/table.core.js'][791] = 0;
  _$jscoverage['plugins/table.core.js'][792] = 0;
  _$jscoverage['plugins/table.core.js'][794] = 0;
  _$jscoverage['plugins/table.core.js'][797] = 0;
  _$jscoverage['plugins/table.core.js'][800] = 0;
  _$jscoverage['plugins/table.core.js'][805] = 0;
  _$jscoverage['plugins/table.core.js'][806] = 0;
  _$jscoverage['plugins/table.core.js'][807] = 0;
  _$jscoverage['plugins/table.core.js'][808] = 0;
  _$jscoverage['plugins/table.core.js'][809] = 0;
  _$jscoverage['plugins/table.core.js'][810] = 0;
  _$jscoverage['plugins/table.core.js'][811] = 0;
  _$jscoverage['plugins/table.core.js'][812] = 0;
  _$jscoverage['plugins/table.core.js'][815] = 0;
  _$jscoverage['plugins/table.core.js'][816] = 0;
  _$jscoverage['plugins/table.core.js'][817] = 0;
  _$jscoverage['plugins/table.core.js'][818] = 0;
  _$jscoverage['plugins/table.core.js'][819] = 0;
  _$jscoverage['plugins/table.core.js'][824] = 0;
  _$jscoverage['plugins/table.core.js'][825] = 0;
  _$jscoverage['plugins/table.core.js'][826] = 0;
  _$jscoverage['plugins/table.core.js'][827] = 0;
  _$jscoverage['plugins/table.core.js'][828] = 0;
  _$jscoverage['plugins/table.core.js'][829] = 0;
  _$jscoverage['plugins/table.core.js'][830] = 0;
  _$jscoverage['plugins/table.core.js'][831] = 0;
  _$jscoverage['plugins/table.core.js'][832] = 0;
  _$jscoverage['plugins/table.core.js'][833] = 0;
  _$jscoverage['plugins/table.core.js'][834] = 0;
  _$jscoverage['plugins/table.core.js'][836] = 0;
  _$jscoverage['plugins/table.core.js'][838] = 0;
  _$jscoverage['plugins/table.core.js'][841] = 0;
  _$jscoverage['plugins/table.core.js'][842] = 0;
  _$jscoverage['plugins/table.core.js'][843] = 0;
  _$jscoverage['plugins/table.core.js'][844] = 0;
  _$jscoverage['plugins/table.core.js'][845] = 0;
  _$jscoverage['plugins/table.core.js'][847] = 0;
  _$jscoverage['plugins/table.core.js'][848] = 0;
  _$jscoverage['plugins/table.core.js'][850] = 0;
  _$jscoverage['plugins/table.core.js'][851] = 0;
  _$jscoverage['plugins/table.core.js'][852] = 0;
  _$jscoverage['plugins/table.core.js'][853] = 0;
  _$jscoverage['plugins/table.core.js'][854] = 0;
  _$jscoverage['plugins/table.core.js'][856] = 0;
  _$jscoverage['plugins/table.core.js'][860] = 0;
  _$jscoverage['plugins/table.core.js'][861] = 0;
  _$jscoverage['plugins/table.core.js'][864] = 0;
  _$jscoverage['plugins/table.core.js'][866] = 0;
  _$jscoverage['plugins/table.core.js'][867] = 0;
  _$jscoverage['plugins/table.core.js'][868] = 0;
  _$jscoverage['plugins/table.core.js'][870] = 0;
  _$jscoverage['plugins/table.core.js'][871] = 0;
  _$jscoverage['plugins/table.core.js'][872] = 0;
  _$jscoverage['plugins/table.core.js'][876] = 0;
  _$jscoverage['plugins/table.core.js'][882] = 0;
  _$jscoverage['plugins/table.core.js'][883] = 0;
  _$jscoverage['plugins/table.core.js'][887] = 0;
  _$jscoverage['plugins/table.core.js'][888] = 0;
  _$jscoverage['plugins/table.core.js'][889] = 0;
  _$jscoverage['plugins/table.core.js'][890] = 0;
  _$jscoverage['plugins/table.core.js'][892] = 0;
  _$jscoverage['plugins/table.core.js'][893] = 0;
  _$jscoverage['plugins/table.core.js'][895] = 0;
  _$jscoverage['plugins/table.core.js'][897] = 0;
  _$jscoverage['plugins/table.core.js'][899] = 0;
  _$jscoverage['plugins/table.core.js'][900] = 0;
  _$jscoverage['plugins/table.core.js'][903] = 0;
  _$jscoverage['plugins/table.core.js'][905] = 0;
  _$jscoverage['plugins/table.core.js'][906] = 0;
  _$jscoverage['plugins/table.core.js'][910] = 0;
  _$jscoverage['plugins/table.core.js'][915] = 0;
  _$jscoverage['plugins/table.core.js'][916] = 0;
  _$jscoverage['plugins/table.core.js'][918] = 0;
  _$jscoverage['plugins/table.core.js'][919] = 0;
  _$jscoverage['plugins/table.core.js'][920] = 0;
  _$jscoverage['plugins/table.core.js'][922] = 0;
  _$jscoverage['plugins/table.core.js'][923] = 0;
  _$jscoverage['plugins/table.core.js'][924] = 0;
  _$jscoverage['plugins/table.core.js'][925] = 0;
  _$jscoverage['plugins/table.core.js'][926] = 0;
  _$jscoverage['plugins/table.core.js'][927] = 0;
  _$jscoverage['plugins/table.core.js'][929] = 0;
  _$jscoverage['plugins/table.core.js'][931] = 0;
  _$jscoverage['plugins/table.core.js'][932] = 0;
  _$jscoverage['plugins/table.core.js'][935] = 0;
  _$jscoverage['plugins/table.core.js'][937] = 0;
  _$jscoverage['plugins/table.core.js'][938] = 0;
  _$jscoverage['plugins/table.core.js'][940] = 0;
  _$jscoverage['plugins/table.core.js'][941] = 0;
  _$jscoverage['plugins/table.core.js'][943] = 0;
  _$jscoverage['plugins/table.core.js'][946] = 0;
  _$jscoverage['plugins/table.core.js'][953] = 0;
  _$jscoverage['plugins/table.core.js'][954] = 0;
  _$jscoverage['plugins/table.core.js'][955] = 0;
  _$jscoverage['plugins/table.core.js'][957] = 0;
  _$jscoverage['plugins/table.core.js'][958] = 0;
  _$jscoverage['plugins/table.core.js'][959] = 0;
  _$jscoverage['plugins/table.core.js'][961] = 0;
  _$jscoverage['plugins/table.core.js'][962] = 0;
  _$jscoverage['plugins/table.core.js'][963] = 0;
  _$jscoverage['plugins/table.core.js'][964] = 0;
  _$jscoverage['plugins/table.core.js'][965] = 0;
  _$jscoverage['plugins/table.core.js'][966] = 0;
  _$jscoverage['plugins/table.core.js'][967] = 0;
  _$jscoverage['plugins/table.core.js'][970] = 0;
  _$jscoverage['plugins/table.core.js'][971] = 0;
  _$jscoverage['plugins/table.core.js'][972] = 0;
  _$jscoverage['plugins/table.core.js'][973] = 0;
  _$jscoverage['plugins/table.core.js'][974] = 0;
  _$jscoverage['plugins/table.core.js'][975] = 0;
  _$jscoverage['plugins/table.core.js'][976] = 0;
  _$jscoverage['plugins/table.core.js'][978] = 0;
  _$jscoverage['plugins/table.core.js'][980] = 0;
  _$jscoverage['plugins/table.core.js'][981] = 0;
  _$jscoverage['plugins/table.core.js'][984] = 0;
  _$jscoverage['plugins/table.core.js'][985] = 0;
  _$jscoverage['plugins/table.core.js'][986] = 0;
  _$jscoverage['plugins/table.core.js'][987] = 0;
  _$jscoverage['plugins/table.core.js'][991] = 0;
  _$jscoverage['plugins/table.core.js'][992] = 0;
  _$jscoverage['plugins/table.core.js'][993] = 0;
  _$jscoverage['plugins/table.core.js'][996] = 0;
  _$jscoverage['plugins/table.core.js'][997] = 0;
  _$jscoverage['plugins/table.core.js'][998] = 0;
  _$jscoverage['plugins/table.core.js'][1000] = 0;
  _$jscoverage['plugins/table.core.js'][1001] = 0;
  _$jscoverage['plugins/table.core.js'][1002] = 0;
  _$jscoverage['plugins/table.core.js'][1003] = 0;
  _$jscoverage['plugins/table.core.js'][1004] = 0;
  _$jscoverage['plugins/table.core.js'][1007] = 0;
  _$jscoverage['plugins/table.core.js'][1011] = 0;
  _$jscoverage['plugins/table.core.js'][1015] = 0;
  _$jscoverage['plugins/table.core.js'][1018] = 0;
  _$jscoverage['plugins/table.core.js'][1020] = 0;
  _$jscoverage['plugins/table.core.js'][1023] = 0;
  _$jscoverage['plugins/table.core.js'][1028] = 0;
  _$jscoverage['plugins/table.core.js'][1029] = 0;
  _$jscoverage['plugins/table.core.js'][1031] = 0;
  _$jscoverage['plugins/table.core.js'][1032] = 0;
  _$jscoverage['plugins/table.core.js'][1034] = 0;
  _$jscoverage['plugins/table.core.js'][1035] = 0;
  _$jscoverage['plugins/table.core.js'][1037] = 0;
  _$jscoverage['plugins/table.core.js'][1038] = 0;
  _$jscoverage['plugins/table.core.js'][1042] = 0;
  _$jscoverage['plugins/table.core.js'][1043] = 0;
  _$jscoverage['plugins/table.core.js'][1044] = 0;
  _$jscoverage['plugins/table.core.js'][1045] = 0;
  _$jscoverage['plugins/table.core.js'][1047] = 0;
  _$jscoverage['plugins/table.core.js'][1048] = 0;
  _$jscoverage['plugins/table.core.js'][1050] = 0;
  _$jscoverage['plugins/table.core.js'][1053] = 0;
  _$jscoverage['plugins/table.core.js'][1054] = 0;
  _$jscoverage['plugins/table.core.js'][1055] = 0;
  _$jscoverage['plugins/table.core.js'][1057] = 0;
  _$jscoverage['plugins/table.core.js'][1058] = 0;
  _$jscoverage['plugins/table.core.js'][1059] = 0;
  _$jscoverage['plugins/table.core.js'][1061] = 0;
  _$jscoverage['plugins/table.core.js'][1065] = 0;
  _$jscoverage['plugins/table.core.js'][1066] = 0;
  _$jscoverage['plugins/table.core.js'][1067] = 0;
  _$jscoverage['plugins/table.core.js'][1069] = 0;
  _$jscoverage['plugins/table.core.js'][1070] = 0;
  _$jscoverage['plugins/table.core.js'][1074] = 0;
  _$jscoverage['plugins/table.core.js'][1078] = 0;
  _$jscoverage['plugins/table.core.js'][1080] = 0;
  _$jscoverage['plugins/table.core.js'][1081] = 0;
  _$jscoverage['plugins/table.core.js'][1082] = 0;
  _$jscoverage['plugins/table.core.js'][1087] = 0;
  _$jscoverage['plugins/table.core.js'][1088] = 0;
  _$jscoverage['plugins/table.core.js'][1094] = 0;
}
_$jscoverage['plugins/table.core.js'].source = ["<span class=\"c\">/**</span>","<span class=\"c\"> * Created with JetBrains WebStorm.</span>","<span class=\"c\"> * User: taoqili</span>","<span class=\"c\"> * Date: 13-1-18</span>","<span class=\"c\"> * Time: &#19978;&#21320;11:09</span>","<span class=\"c\"> * To change this template use File | Settings | File Templates.</span>","<span class=\"c\"> */</span>","<span class=\"c\">/**</span>","<span class=\"c\"> * UE&#34920;&#26684;&#25805;&#20316;&#31867;</span>","<span class=\"c\"> * @param table</span>","<span class=\"c\"> * @constructor</span>","<span class=\"c\"> */</span>","<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> UETable <span class=\"k\">=</span> UE<span class=\"k\">.</span>UETable <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>table<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>table <span class=\"k\">=</span> table<span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>indexTable <span class=\"k\">=</span> <span class=\"k\">[];</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>selectedTds <span class=\"k\">=</span> <span class=\"k\">[];</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>cellsRange <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>update<span class=\"k\">(</span>table<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","","    <span class=\"c\">//===&#20197;&#19979;&#20026;&#38745;&#24577;&#24037;&#20855;&#26041;&#27861;===</span>","    UETable<span class=\"k\">.</span>removeSelectedClass <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>cells<span class=\"k\">)</span> <span class=\"k\">{</span>","        utils<span class=\"k\">.</span>each<span class=\"k\">(</span>cells<span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>cell<span class=\"k\">)</span> <span class=\"k\">{</span>","            domUtils<span class=\"k\">.</span>removeClasses<span class=\"k\">(</span>cell<span class=\"k\">,</span> <span class=\"s\">\"selectTdClass\"</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">)</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","    UETable<span class=\"k\">.</span>addSelectedClass <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>cells<span class=\"k\">)</span> <span class=\"k\">{</span>","        utils<span class=\"k\">.</span>each<span class=\"k\">(</span>cells<span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>cell<span class=\"k\">)</span> <span class=\"k\">{</span>","            domUtils<span class=\"k\">.</span>addClass<span class=\"k\">(</span>cell<span class=\"k\">,</span> <span class=\"s\">\"selectTdClass\"</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">)</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","    UETable<span class=\"k\">.</span>isEmptyBlock <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>node<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> reg <span class=\"k\">=</span> <span class=\"k\">new</span> RegExp<span class=\"k\">(</span>domUtils<span class=\"k\">.</span>fillChar<span class=\"k\">,</span> <span class=\"s\">'g'</span><span class=\"k\">);</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>node<span class=\"k\">[</span>browser<span class=\"k\">.</span>ie <span class=\"k\">?</span> <span class=\"s\">'innerText'</span> <span class=\"k\">:</span> <span class=\"s\">'textContent'</span><span class=\"k\">].</span>replace<span class=\"k\">(</span><span class=\"s\">/^\\s*$/</span><span class=\"k\">,</span> <span class=\"s\">''</span><span class=\"k\">).</span>replace<span class=\"k\">(</span>reg<span class=\"k\">,</span> <span class=\"s\">''</span><span class=\"k\">).</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">0</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">in</span> dtd<span class=\"k\">.</span>$isNotEmpty<span class=\"k\">)</span> <span class=\"k\">if</span> <span class=\"k\">(</span>dtd<span class=\"k\">.</span>$isNotEmpty<span class=\"k\">.</span>hasOwnProperty<span class=\"k\">(</span>i<span class=\"k\">))</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>node<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span>i<span class=\"k\">).</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> <span class=\"s\">1</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","    UETable<span class=\"k\">.</span>getWidth <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>cell<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>cell<span class=\"k\">)</span><span class=\"k\">return</span> <span class=\"s\">0</span><span class=\"k\">;</span>","        <span class=\"k\">return</span> parseInt<span class=\"k\">(</span>domUtils<span class=\"k\">.</span>getComputedStyle<span class=\"k\">(</span>cell<span class=\"k\">,</span> <span class=\"s\">\"width\"</span><span class=\"k\">),</span> <span class=\"s\">10</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * &#26681;&#25454;&#24403;&#21069;&#36873;&#21306;&#33719;&#21462;&#30456;&#20851;&#30340;table&#20449;&#24687;</span>","<span class=\"c\">     * @return {Object}</span>","<span class=\"c\">     */</span>","    UETable<span class=\"k\">.</span>getTableItemsByRange <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>editor<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> start <span class=\"k\">=</span> editor<span class=\"k\">.</span>selection<span class=\"k\">.</span>getStart<span class=\"k\">(),</span>","        <span class=\"c\">//&#22312;table&#25110;&#32773;td&#36793;&#32536;&#26377;&#21487;&#33021;&#23384;&#22312;&#36873;&#20013;tr&#30340;&#24773;&#20917;</span>","            cell <span class=\"k\">=</span> start <span class=\"k\">&amp;&amp;</span> domUtils<span class=\"k\">.</span>findParentByTagName<span class=\"k\">(</span>start<span class=\"k\">,</span> <span class=\"k\">[</span><span class=\"s\">\"td\"</span><span class=\"k\">,</span> <span class=\"s\">\"th\"</span><span class=\"k\">],</span> <span class=\"k\">true</span><span class=\"k\">),</span>","            tr <span class=\"k\">=</span> cell <span class=\"k\">&amp;&amp;</span> cell<span class=\"k\">.</span>parentNode<span class=\"k\">,</span>","            caption <span class=\"k\">=</span> start <span class=\"k\">&amp;&amp;</span> domUtils<span class=\"k\">.</span>findParentByTagName<span class=\"k\">(</span>start<span class=\"k\">,</span> <span class=\"s\">'caption'</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">),</span>","            table <span class=\"k\">=</span> caption <span class=\"k\">?</span> caption<span class=\"k\">.</span>parentNode <span class=\"k\">:</span> tr <span class=\"k\">&amp;&amp;</span> tr<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>parentNode<span class=\"k\">;</span>","","        <span class=\"k\">return</span> <span class=\"k\">{</span>","            cell<span class=\"k\">:</span>cell<span class=\"k\">,</span>","            tr<span class=\"k\">:</span>tr<span class=\"k\">,</span>","            table<span class=\"k\">:</span>table<span class=\"k\">,</span>","            caption<span class=\"k\">:</span>caption","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","    UETable<span class=\"k\">.</span>getUETableBySelected <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>editor<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> table <span class=\"k\">=</span> UETable<span class=\"k\">.</span>getTableItemsByRange<span class=\"k\">(</span>editor<span class=\"k\">).</span>table<span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>table <span class=\"k\">&amp;&amp;</span> table<span class=\"k\">.</span>ueTable <span class=\"k\">&amp;&amp;</span> table<span class=\"k\">.</span>ueTable<span class=\"k\">.</span>selectedTds<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> table<span class=\"k\">.</span>ueTable<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","","    UETable<span class=\"k\">.</span>getDefaultValue <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>editor<span class=\"k\">,</span> table<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> borderMap <span class=\"k\">=</span> <span class=\"k\">{</span>","                thin<span class=\"k\">:</span><span class=\"s\">'0px'</span><span class=\"k\">,</span>","                medium<span class=\"k\">:</span><span class=\"s\">'1px'</span><span class=\"k\">,</span>","                thick<span class=\"k\">:</span><span class=\"s\">'2px'</span>","            <span class=\"k\">}</span><span class=\"k\">,</span>","            tableBorder<span class=\"k\">,</span> tdPadding<span class=\"k\">,</span> tdBorder<span class=\"k\">,</span> tmpValue<span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>table<span class=\"k\">)</span> <span class=\"k\">{</span>","            table <span class=\"k\">=</span> editor<span class=\"k\">.</span>document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">'table'</span><span class=\"k\">);</span>","            table<span class=\"k\">.</span>insertRow<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">).</span>insertCell<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">).</span>innerHTML <span class=\"k\">=</span> <span class=\"s\">'xxx'</span><span class=\"k\">;</span>","            editor<span class=\"k\">.</span>body<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>table<span class=\"k\">);</span>","            <span class=\"k\">var</span> td <span class=\"k\">=</span> table<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span><span class=\"s\">'td'</span><span class=\"k\">)[</span><span class=\"s\">0</span><span class=\"k\">];</span>","            tmpValue <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>getComputedStyle<span class=\"k\">(</span>table<span class=\"k\">,</span> <span class=\"s\">'border-left-width'</span><span class=\"k\">);</span>","            tableBorder <span class=\"k\">=</span> parseInt<span class=\"k\">(</span>borderMap<span class=\"k\">[</span>tmpValue<span class=\"k\">]</span> <span class=\"k\">||</span> tmpValue<span class=\"k\">,</span> <span class=\"s\">10</span><span class=\"k\">);</span>","            tmpValue <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>getComputedStyle<span class=\"k\">(</span>td<span class=\"k\">,</span> <span class=\"s\">'padding-left'</span><span class=\"k\">);</span>","            tdPadding <span class=\"k\">=</span> parseInt<span class=\"k\">(</span>borderMap<span class=\"k\">[</span>tmpValue<span class=\"k\">]</span> <span class=\"k\">||</span> tmpValue<span class=\"k\">,</span> <span class=\"s\">10</span><span class=\"k\">);</span>","            tmpValue <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>getComputedStyle<span class=\"k\">(</span>td<span class=\"k\">,</span> <span class=\"s\">'border-left-width'</span><span class=\"k\">);</span>","            tdBorder <span class=\"k\">=</span> parseInt<span class=\"k\">(</span>borderMap<span class=\"k\">[</span>tmpValue<span class=\"k\">]</span> <span class=\"k\">||</span> tmpValue<span class=\"k\">,</span> <span class=\"s\">10</span><span class=\"k\">);</span>","            domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>table<span class=\"k\">);</span>","            <span class=\"k\">return</span> <span class=\"k\">{</span>","                tableBorder<span class=\"k\">:</span>tableBorder<span class=\"k\">,</span>","                tdPadding<span class=\"k\">:</span>tdPadding<span class=\"k\">,</span>","                tdBorder<span class=\"k\">:</span>tdBorder","            <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            td <span class=\"k\">=</span> table<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span><span class=\"s\">'td'</span><span class=\"k\">)[</span><span class=\"s\">0</span><span class=\"k\">];</span>","            tmpValue <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>getComputedStyle<span class=\"k\">(</span>table<span class=\"k\">,</span> <span class=\"s\">'border-left-width'</span><span class=\"k\">);</span>","            tableBorder <span class=\"k\">=</span> parseInt<span class=\"k\">(</span>borderMap<span class=\"k\">[</span>tmpValue<span class=\"k\">]</span> <span class=\"k\">||</span> tmpValue<span class=\"k\">,</span> <span class=\"s\">10</span><span class=\"k\">);</span>","            tmpValue <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>getComputedStyle<span class=\"k\">(</span>td<span class=\"k\">,</span> <span class=\"s\">'padding-left'</span><span class=\"k\">);</span>","            tdPadding <span class=\"k\">=</span> parseInt<span class=\"k\">(</span>borderMap<span class=\"k\">[</span>tmpValue<span class=\"k\">]</span> <span class=\"k\">||</span> tmpValue<span class=\"k\">,</span> <span class=\"s\">10</span><span class=\"k\">);</span>","            tmpValue <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>getComputedStyle<span class=\"k\">(</span>td<span class=\"k\">,</span> <span class=\"s\">'border-left-width'</span><span class=\"k\">);</span>","            tdBorder <span class=\"k\">=</span> parseInt<span class=\"k\">(</span>borderMap<span class=\"k\">[</span>tmpValue<span class=\"k\">]</span> <span class=\"k\">||</span> tmpValue<span class=\"k\">,</span> <span class=\"s\">10</span><span class=\"k\">);</span>","            <span class=\"k\">return</span> <span class=\"k\">{</span>","                tableBorder<span class=\"k\">:</span>tableBorder<span class=\"k\">,</span>","                tdPadding<span class=\"k\">:</span>tdPadding<span class=\"k\">,</span>","                tdBorder<span class=\"k\">:</span>tdBorder","            <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","    <span class=\"c\">/**</span>","<span class=\"c\">     * &#26681;&#25454;&#24403;&#21069;&#28857;&#20987;&#30340;td&#25110;&#32773;table&#33719;&#21462;&#32034;&#24341;&#23545;&#35937;</span>","<span class=\"c\">     * @param tdOrTable</span>","<span class=\"c\">     */</span>","    UETable<span class=\"k\">.</span>getUETable <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>tdOrTable<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> tag <span class=\"k\">=</span> tdOrTable<span class=\"k\">.</span>tagName<span class=\"k\">.</span>toLowerCase<span class=\"k\">();</span>","        tdOrTable <span class=\"k\">=</span> <span class=\"k\">(</span>tag <span class=\"k\">==</span> <span class=\"s\">\"td\"</span> <span class=\"k\">||</span> tag <span class=\"k\">==</span> <span class=\"s\">\"th\"</span> <span class=\"k\">||</span> tag <span class=\"k\">==</span> <span class=\"s\">'caption'</span><span class=\"k\">)</span> <span class=\"k\">?</span> domUtils<span class=\"k\">.</span>findParentByTagName<span class=\"k\">(</span>tdOrTable<span class=\"k\">,</span> <span class=\"s\">\"table\"</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">)</span> <span class=\"k\">:</span> tdOrTable<span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>tdOrTable<span class=\"k\">.</span>ueTable<span class=\"k\">)</span> <span class=\"k\">{</span>","            tdOrTable<span class=\"k\">.</span>ueTable <span class=\"k\">=</span> <span class=\"k\">new</span> UETable<span class=\"k\">(</span>tdOrTable<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> tdOrTable<span class=\"k\">.</span>ueTable<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","","    UETable<span class=\"k\">.</span>cloneCell <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>cell<span class=\"k\">,</span>ignoreMerge<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>cell <span class=\"k\">||</span> utils<span class=\"k\">.</span>isString<span class=\"k\">(</span>cell<span class=\"k\">))</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>table<span class=\"k\">.</span>ownerDocument<span class=\"k\">.</span>createElement<span class=\"k\">(</span>cell <span class=\"k\">||</span> <span class=\"s\">'td'</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">var</span> flag <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>hasClass<span class=\"k\">(</span>cell<span class=\"k\">,</span> <span class=\"s\">\"selectTdClass\"</span><span class=\"k\">);</span>","        flag <span class=\"k\">&amp;&amp;</span> domUtils<span class=\"k\">.</span>removeClasses<span class=\"k\">(</span>cell<span class=\"k\">,</span> <span class=\"s\">\"selectTdClass\"</span><span class=\"k\">);</span>","        <span class=\"k\">var</span> tmpCell <span class=\"k\">=</span> cell<span class=\"k\">.</span>cloneNode<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>ignoreMerge<span class=\"k\">)</span> <span class=\"k\">{</span>","            tmpCell<span class=\"k\">.</span>rowSpan <span class=\"k\">=</span> tmpCell<span class=\"k\">.</span>colSpan <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        tmpCell<span class=\"k\">.</span>style<span class=\"k\">.</span>borderLeftStyle <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","        tmpCell<span class=\"k\">.</span>style<span class=\"k\">.</span>borderTopStyle <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","        tmpCell<span class=\"k\">.</span>style<span class=\"k\">.</span>borderLeftColor <span class=\"k\">=</span> cell<span class=\"k\">.</span>style<span class=\"k\">.</span>borderRightColor<span class=\"k\">;</span>","        tmpCell<span class=\"k\">.</span>style<span class=\"k\">.</span>borderLeftWidth <span class=\"k\">=</span> cell<span class=\"k\">.</span>style<span class=\"k\">.</span>borderRightWidth<span class=\"k\">;</span>","        tmpCell<span class=\"k\">.</span>style<span class=\"k\">.</span>borderTopColor <span class=\"k\">=</span> cell<span class=\"k\">.</span>style<span class=\"k\">.</span>borderBottomColor<span class=\"k\">;</span>","        tmpCell<span class=\"k\">.</span>style<span class=\"k\">.</span>borderTopWidth <span class=\"k\">=</span> cell<span class=\"k\">.</span>style<span class=\"k\">.</span>borderBottomWidth<span class=\"k\">;</span>","        flag <span class=\"k\">&amp;&amp;</span> domUtils<span class=\"k\">.</span>addClass<span class=\"k\">(</span>cell<span class=\"k\">,</span> <span class=\"s\">\"selectTdClass\"</span><span class=\"k\">);</span>","        <span class=\"k\">return</span> tmpCell<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    UETable<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","        getMaxRows<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> rows <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>table<span class=\"k\">.</span>rows<span class=\"k\">,</span> maxLen <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> row<span class=\"k\">;</span> row <span class=\"k\">=</span> rows<span class=\"k\">[</span>i<span class=\"k\">];</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> currentMax <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> j <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> cj<span class=\"k\">;</span> cj <span class=\"k\">=</span> row<span class=\"k\">.</span>cells<span class=\"k\">[</span>j<span class=\"k\">++];)</span> <span class=\"k\">{</span>","                    currentMax <span class=\"k\">=</span> Math<span class=\"k\">.</span>max<span class=\"k\">(</span>cj<span class=\"k\">.</span>rowSpan <span class=\"k\">||</span> <span class=\"s\">1</span><span class=\"k\">,</span> currentMax<span class=\"k\">);</span>","                <span class=\"k\">}</span>","                maxLen <span class=\"k\">=</span> Math<span class=\"k\">.</span>max<span class=\"k\">(</span>currentMax <span class=\"k\">+</span> i<span class=\"k\">,</span> maxLen<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> maxLen<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#33719;&#21462;&#24403;&#21069;&#34920;&#26684;&#30340;&#26368;&#22823;&#21015;&#25968;</span>","<span class=\"c\">         */</span>","        getMaxCols<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> rows <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>table<span class=\"k\">.</span>rows<span class=\"k\">,</span> maxLen <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> cellRows <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> row<span class=\"k\">;</span> row <span class=\"k\">=</span> rows<span class=\"k\">[</span>i<span class=\"k\">];</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> cellsNum <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> j <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> cj<span class=\"k\">;</span> cj <span class=\"k\">=</span> row<span class=\"k\">.</span>cells<span class=\"k\">[</span>j<span class=\"k\">++];)</span> <span class=\"k\">{</span>","                    cellsNum <span class=\"k\">+=</span> <span class=\"k\">(</span>cj<span class=\"k\">.</span>colSpan <span class=\"k\">||</span> <span class=\"s\">1</span><span class=\"k\">);</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>cj<span class=\"k\">.</span>rowSpan <span class=\"k\">&amp;&amp;</span> cj<span class=\"k\">.</span>rowSpan <span class=\"k\">&gt;</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> k <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span> k <span class=\"k\">&lt;</span> cj<span class=\"k\">.</span>rowSpan<span class=\"k\">;</span> k<span class=\"k\">++)</span> <span class=\"k\">{</span>","                            <span class=\"k\">if</span> <span class=\"k\">(!</span>cellRows<span class=\"k\">[</span><span class=\"s\">'row_'</span> <span class=\"k\">+</span> <span class=\"k\">(</span>i <span class=\"k\">+</span> k<span class=\"k\">)])</span> <span class=\"k\">{</span>","                                cellRows<span class=\"k\">[</span><span class=\"s\">'row_'</span> <span class=\"k\">+</span> <span class=\"k\">(</span>i <span class=\"k\">+</span> k<span class=\"k\">)]</span> <span class=\"k\">=</span> <span class=\"k\">(</span>cj<span class=\"k\">.</span>colSpan <span class=\"k\">||</span> <span class=\"s\">1</span><span class=\"k\">);</span>","                            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                                cellRows<span class=\"k\">[</span><span class=\"s\">'row_'</span> <span class=\"k\">+</span> <span class=\"k\">(</span>i <span class=\"k\">+</span> k<span class=\"k\">)]++</span>","                            <span class=\"k\">}</span>","                        <span class=\"k\">}</span>","","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                cellsNum <span class=\"k\">+=</span> cellRows<span class=\"k\">[</span><span class=\"s\">'row_'</span> <span class=\"k\">+</span> i<span class=\"k\">]</span> <span class=\"k\">||</span> <span class=\"s\">0</span><span class=\"k\">;</span>","                maxLen <span class=\"k\">=</span> Math<span class=\"k\">.</span>max<span class=\"k\">(</span>cellsNum<span class=\"k\">,</span> maxLen<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> maxLen<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        getCellColIndex<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>cell<span class=\"k\">)</span> <span class=\"k\">{</span>","","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#33719;&#21462;&#24403;&#21069;cell&#26049;&#36793;&#30340;&#21333;&#20803;&#26684;&#65292;</span>","<span class=\"c\">         * @param cell</span>","<span class=\"c\">         * @param right</span>","<span class=\"c\">         */</span>","        getHSideCell<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>cell<span class=\"k\">,</span> right<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">try</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> cellInfo <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getCellInfo<span class=\"k\">(</span>cell<span class=\"k\">),</span>","                    previewRowIndex<span class=\"k\">,</span> previewColIndex<span class=\"k\">;</span>","                <span class=\"k\">var</span> len <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>selectedTds<span class=\"k\">.</span>length<span class=\"k\">,</span>","                    range <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>cellsRange<span class=\"k\">;</span>","                <span class=\"c\">//&#39318;&#34892;&#25110;&#32773;&#39318;&#21015;&#27809;&#26377;&#21069;&#32622;&#21333;&#20803;&#26684;</span>","                <span class=\"k\">if</span> <span class=\"k\">((!</span>right <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(!</span>len <span class=\"k\">?</span> <span class=\"k\">!</span>cellInfo<span class=\"k\">.</span>colIndex <span class=\"k\">:</span> <span class=\"k\">!</span>range<span class=\"k\">.</span>beginColIndex<span class=\"k\">))</span> <span class=\"k\">||</span> <span class=\"k\">(</span>right <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(!</span>len <span class=\"k\">?</span> <span class=\"k\">(</span>cellInfo<span class=\"k\">.</span>colIndex <span class=\"k\">==</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>colsNum <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">))</span> <span class=\"k\">:</span> <span class=\"k\">(</span>range<span class=\"k\">.</span>endColIndex <span class=\"k\">==</span> <span class=\"k\">this</span><span class=\"k\">.</span>colsNum <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">))))</span> <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","","                previewRowIndex <span class=\"k\">=</span> <span class=\"k\">!</span>len <span class=\"k\">?</span> cellInfo<span class=\"k\">.</span>rowIndex <span class=\"k\">:</span> range<span class=\"k\">.</span>beginRowIndex<span class=\"k\">;</span>","                previewColIndex <span class=\"k\">=</span> <span class=\"k\">!</span>right <span class=\"k\">?</span> <span class=\"k\">(</span> <span class=\"k\">!</span>len <span class=\"k\">?</span> <span class=\"k\">(</span>cellInfo<span class=\"k\">.</span>colIndex <span class=\"k\">&lt;</span> <span class=\"s\">1</span> <span class=\"k\">?</span> <span class=\"s\">0</span> <span class=\"k\">:</span> <span class=\"k\">(</span>cellInfo<span class=\"k\">.</span>colIndex <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">))</span> <span class=\"k\">:</span> range<span class=\"k\">.</span>beginColIndex <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">)</span>","                    <span class=\"k\">:</span> <span class=\"k\">(</span> <span class=\"k\">!</span>len <span class=\"k\">?</span> cellInfo<span class=\"k\">.</span>colIndex <span class=\"k\">+</span> <span class=\"s\">1</span> <span class=\"k\">:</span> range<span class=\"k\">.</span>endColIndex <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">);</span>","                <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>getCell<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>indexTable<span class=\"k\">[</span>previewRowIndex<span class=\"k\">][</span>previewColIndex<span class=\"k\">].</span>rowIndex<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>indexTable<span class=\"k\">[</span>previewRowIndex<span class=\"k\">][</span>previewColIndex<span class=\"k\">].</span>cellIndex<span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","                showError<span class=\"k\">(</span>e<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        getTabNextCell<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>cell<span class=\"k\">,</span> preRowIndex<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> cellInfo <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getCellInfo<span class=\"k\">(</span>cell<span class=\"k\">),</span>","                rowIndex <span class=\"k\">=</span> preRowIndex <span class=\"k\">||</span> cellInfo<span class=\"k\">.</span>rowIndex<span class=\"k\">,</span>","                colIndex <span class=\"k\">=</span> cellInfo<span class=\"k\">.</span>colIndex <span class=\"k\">+</span> <span class=\"s\">1</span> <span class=\"k\">+</span> <span class=\"k\">(</span>cellInfo<span class=\"k\">.</span>colSpan <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">),</span>","                nextCell<span class=\"k\">;</span>","            <span class=\"k\">try</span> <span class=\"k\">{</span>","                nextCell <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getCell<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>indexTable<span class=\"k\">[</span>rowIndex<span class=\"k\">][</span>colIndex<span class=\"k\">].</span>rowIndex<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>indexTable<span class=\"k\">[</span>rowIndex<span class=\"k\">][</span>colIndex<span class=\"k\">].</span>cellIndex<span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">try</span> <span class=\"k\">{</span>","                    rowIndex <span class=\"k\">=</span> rowIndex <span class=\"k\">*</span> <span class=\"s\">1</span> <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">;</span>","                    colIndex <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","                    nextCell <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getCell<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>indexTable<span class=\"k\">[</span>rowIndex<span class=\"k\">][</span>colIndex<span class=\"k\">].</span>rowIndex<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>indexTable<span class=\"k\">[</span>rowIndex<span class=\"k\">][</span>colIndex<span class=\"k\">].</span>cellIndex<span class=\"k\">);</span>","                <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> nextCell<span class=\"k\">;</span>","","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#33719;&#21462;&#35270;&#35273;&#19978;&#30340;&#21518;&#32622;&#21333;&#20803;&#26684;</span>","<span class=\"c\">         * @param cell</span>","<span class=\"c\">         * @param bottom</span>","<span class=\"c\">         */</span>","        getVSideCell<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>cell<span class=\"k\">,</span> bottom<span class=\"k\">,</span> ignoreRange<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">try</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> cellInfo <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getCellInfo<span class=\"k\">(</span>cell<span class=\"k\">),</span>","                    nextRowIndex<span class=\"k\">,</span> nextColIndex<span class=\"k\">;</span>","                <span class=\"k\">var</span> len <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>selectedTds<span class=\"k\">.</span>length <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>ignoreRange<span class=\"k\">,</span>","                    range <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>cellsRange<span class=\"k\">;</span>","                <span class=\"c\">//&#26411;&#34892;&#25110;&#32773;&#26411;&#21015;&#27809;&#26377;&#21518;&#32622;&#21333;&#20803;&#26684;</span>","                <span class=\"k\">if</span> <span class=\"k\">((!</span>bottom <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>cellInfo<span class=\"k\">.</span>rowIndex <span class=\"k\">==</span> <span class=\"s\">0</span><span class=\"k\">))</span> <span class=\"k\">||</span> <span class=\"k\">(</span>bottom <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(!</span>len <span class=\"k\">?</span> <span class=\"k\">(</span>cellInfo<span class=\"k\">.</span>rowIndex <span class=\"k\">+</span> cellInfo<span class=\"k\">.</span>rowSpan <span class=\"k\">&gt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>rowsNum <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">:</span> <span class=\"k\">(</span>range<span class=\"k\">.</span>endRowIndex <span class=\"k\">==</span> <span class=\"k\">this</span><span class=\"k\">.</span>rowsNum <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">))))</span> <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","","                nextRowIndex <span class=\"k\">=</span> <span class=\"k\">!</span>bottom <span class=\"k\">?</span> <span class=\"k\">(</span> <span class=\"k\">!</span>len <span class=\"k\">?</span> cellInfo<span class=\"k\">.</span>rowIndex <span class=\"k\">-</span> <span class=\"s\">1</span> <span class=\"k\">:</span> range<span class=\"k\">.</span>beginRowIndex <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">)</span>","                    <span class=\"k\">:</span> <span class=\"k\">(</span> <span class=\"k\">!</span>len <span class=\"k\">?</span> <span class=\"k\">(</span>cellInfo<span class=\"k\">.</span>rowIndex <span class=\"k\">+</span> cellInfo<span class=\"k\">.</span>rowSpan<span class=\"k\">)</span> <span class=\"k\">:</span> range<span class=\"k\">.</span>endRowIndex <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">);</span>","                nextColIndex <span class=\"k\">=</span> <span class=\"k\">!</span>len <span class=\"k\">?</span> cellInfo<span class=\"k\">.</span>colIndex <span class=\"k\">:</span> range<span class=\"k\">.</span>beginColIndex<span class=\"k\">;</span>","                <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>getCell<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>indexTable<span class=\"k\">[</span>nextRowIndex<span class=\"k\">][</span>nextColIndex<span class=\"k\">].</span>rowIndex<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>indexTable<span class=\"k\">[</span>nextRowIndex<span class=\"k\">][</span>nextColIndex<span class=\"k\">].</span>cellIndex<span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","                showError<span class=\"k\">(</span>e<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#33719;&#21462;&#30456;&#21516;&#32467;&#26463;&#20301;&#32622;&#30340;&#21333;&#20803;&#26684;&#65292;xOrY&#25351;&#20195;&#20102;&#26159;&#33719;&#21462;x&#36724;&#30456;&#21516;&#36824;&#26159;y&#36724;&#30456;&#21516;</span>","<span class=\"c\">         */</span>","        getSameEndPosCells<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>cell<span class=\"k\">,</span> xOrY<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">try</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> flag <span class=\"k\">=</span> <span class=\"k\">(</span>xOrY<span class=\"k\">.</span>toLowerCase<span class=\"k\">()</span> <span class=\"k\">===</span> <span class=\"s\">\"x\"</span><span class=\"k\">),</span>","                    end <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>getXY<span class=\"k\">(</span>cell<span class=\"k\">)[</span>flag <span class=\"k\">?</span> <span class=\"s\">'x'</span> <span class=\"k\">:</span> <span class=\"s\">'y'</span><span class=\"k\">]</span> <span class=\"k\">+</span> cell<span class=\"k\">[</span><span class=\"s\">\"offset\"</span> <span class=\"k\">+</span> <span class=\"k\">(</span>flag <span class=\"k\">?</span> <span class=\"s\">'Width'</span> <span class=\"k\">:</span> <span class=\"s\">'Height'</span><span class=\"k\">)],</span>","                    rows <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>table<span class=\"k\">.</span>rows<span class=\"k\">,</span>","                    cells <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">,</span> returns <span class=\"k\">=</span> <span class=\"k\">[];</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>rowsNum<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                    cells <span class=\"k\">=</span> rows<span class=\"k\">[</span>i<span class=\"k\">].</span>cells<span class=\"k\">;</span>","                    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> j <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> tmpCell<span class=\"k\">;</span> tmpCell <span class=\"k\">=</span> cells<span class=\"k\">[</span>j<span class=\"k\">++];)</span> <span class=\"k\">{</span>","                        <span class=\"k\">var</span> tmpEnd <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>getXY<span class=\"k\">(</span>tmpCell<span class=\"k\">)[</span>flag <span class=\"k\">?</span> <span class=\"s\">'x'</span> <span class=\"k\">:</span> <span class=\"s\">'y'</span><span class=\"k\">]</span> <span class=\"k\">+</span> tmpCell<span class=\"k\">[</span><span class=\"s\">\"offset\"</span> <span class=\"k\">+</span> <span class=\"k\">(</span>flag <span class=\"k\">?</span> <span class=\"s\">'Width'</span> <span class=\"k\">:</span> <span class=\"s\">'Height'</span><span class=\"k\">)];</span>","                        <span class=\"c\">//&#23545;&#24212;&#34892;&#30340;td&#24050;&#32463;&#34987;&#19978;&#38754;&#34892;rowSpan&#20102;</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span>tmpEnd <span class=\"k\">&gt;</span> end <span class=\"k\">&amp;&amp;</span> flag<span class=\"k\">)</span> <span class=\"k\">break</span><span class=\"k\">;</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span>cell <span class=\"k\">==</span> tmpCell <span class=\"k\">||</span> end <span class=\"k\">==</span> tmpEnd<span class=\"k\">)</span> <span class=\"k\">{</span>","                            <span class=\"c\">//&#21482;&#33719;&#21462;&#21333;&#19968;&#30340;&#21333;&#20803;&#26684;</span>","                            <span class=\"c\">//todo &#20165;&#33719;&#21462;&#21333;&#19968;&#21333;&#20803;&#26684;&#22312;&#29305;&#23450;&#24773;&#20917;&#19979;&#20250;&#36896;&#25104;returns&#20026;&#31354;&#65292;&#20174;&#32780;&#24433;&#21709;&#21518;&#32493;&#30340;&#25302;&#25341;&#23454;&#29616;&#65292;&#20462;&#27491;&#36825;&#20010;&#12290;&#38656;&#32771;&#34385;&#24615;&#33021;</span>","                            <span class=\"k\">if</span> <span class=\"k\">(</span>tmpCell<span class=\"k\">[</span>flag <span class=\"k\">?</span> <span class=\"s\">\"colSpan\"</span> <span class=\"k\">:</span> <span class=\"s\">\"rowSpan\"</span><span class=\"k\">]</span> <span class=\"k\">==</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                                returns<span class=\"k\">.</span>push<span class=\"k\">(</span>tmpCell<span class=\"k\">);</span>","                            <span class=\"k\">}</span>","                            <span class=\"k\">if</span> <span class=\"k\">(</span>flag<span class=\"k\">)</span> <span class=\"k\">break</span><span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                <span class=\"k\">return</span> returns<span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","                showError<span class=\"k\">(</span>e<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        setCellContent<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>cell<span class=\"k\">,</span> content<span class=\"k\">)</span> <span class=\"k\">{</span>","            cell<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> content <span class=\"k\">||</span> <span class=\"k\">(</span>browser<span class=\"k\">.</span>ie <span class=\"k\">?</span> domUtils<span class=\"k\">.</span>fillChar <span class=\"k\">:</span> <span class=\"s\">\"&lt;br /&gt;\"</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        cloneCell<span class=\"k\">:</span>UETable<span class=\"k\">.</span>cloneCell<span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#33719;&#21462;&#36319;&#24403;&#21069;&#21333;&#20803;&#26684;&#30340;&#21491;&#36793;&#31446;&#32447;&#20026;&#24038;&#36793;&#30340;&#25152;&#26377;&#26410;&#21512;&#24182;&#21333;&#20803;&#26684;</span>","<span class=\"c\">         */</span>","        getSameStartPosXCells<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>cell<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">try</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> start <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>getXY<span class=\"k\">(</span>cell<span class=\"k\">).</span>x <span class=\"k\">+</span> cell<span class=\"k\">.</span>offsetWidth<span class=\"k\">,</span>","                    rows <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>table<span class=\"k\">.</span>rows<span class=\"k\">,</span> cells <span class=\"k\">,</span> returns <span class=\"k\">=</span> <span class=\"k\">[];</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>rowsNum<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                    cells <span class=\"k\">=</span> rows<span class=\"k\">[</span>i<span class=\"k\">].</span>cells<span class=\"k\">;</span>","                    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> j <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> tmpCell<span class=\"k\">;</span> tmpCell <span class=\"k\">=</span> cells<span class=\"k\">[</span>j<span class=\"k\">++];)</span> <span class=\"k\">{</span>","                        <span class=\"k\">var</span> tmpStart <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>getXY<span class=\"k\">(</span>tmpCell<span class=\"k\">).</span>x<span class=\"k\">;</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span>tmpStart <span class=\"k\">&gt;</span> start<span class=\"k\">)</span> <span class=\"k\">break</span><span class=\"k\">;</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span>tmpStart <span class=\"k\">==</span> start <span class=\"k\">&amp;&amp;</span> tmpCell<span class=\"k\">.</span>colSpan <span class=\"k\">==</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                            returns<span class=\"k\">.</span>push<span class=\"k\">(</span>tmpCell<span class=\"k\">);</span>","                            <span class=\"k\">break</span><span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                <span class=\"k\">return</span> returns<span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","                showError<span class=\"k\">(</span>e<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#26356;&#26032;table&#23545;&#24212;&#30340;&#32034;&#24341;&#34920;</span>","<span class=\"c\">         */</span>","        update<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>table<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>table <span class=\"k\">=</span> table <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>table<span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>selectedTds <span class=\"k\">=</span> <span class=\"k\">[];</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>cellsRange <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>indexTable <span class=\"k\">=</span> <span class=\"k\">[];</span>","            <span class=\"k\">var</span> rows <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>table<span class=\"k\">.</span>rows<span class=\"k\">,</span>","                rowsNum <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getMaxRows<span class=\"k\">(),</span>","                dNum <span class=\"k\">=</span> rowsNum <span class=\"k\">-</span> rows<span class=\"k\">.</span>length<span class=\"k\">,</span>","                colsNum <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getMaxCols<span class=\"k\">();</span>","            <span class=\"k\">while</span> <span class=\"k\">(</span>dNum<span class=\"k\">--)</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>table<span class=\"k\">.</span>insertRow<span class=\"k\">(</span>rows<span class=\"k\">.</span>length<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>rowsNum <span class=\"k\">=</span> rowsNum<span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>colsNum <span class=\"k\">=</span> colsNum<span class=\"k\">;</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> len <span class=\"k\">=</span> rows<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">&lt;</span> len<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>indexTable<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">new</span> Array<span class=\"k\">(</span>colsNum<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"c\">//&#22635;&#20805;&#32034;&#24341;&#34920;</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> rowIndex <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> row<span class=\"k\">;</span> row <span class=\"k\">=</span> rows<span class=\"k\">[</span>rowIndex<span class=\"k\">];</span> rowIndex<span class=\"k\">++)</span> <span class=\"k\">{</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> cellIndex <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> cell<span class=\"k\">,</span> cells <span class=\"k\">=</span> row<span class=\"k\">.</span>cells<span class=\"k\">;</span> cell <span class=\"k\">=</span> cells<span class=\"k\">[</span>cellIndex<span class=\"k\">];</span> cellIndex<span class=\"k\">++)</span> <span class=\"k\">{</span>","                    <span class=\"c\">//&#20462;&#27491;&#25972;&#34892;&#34987;rowSpan&#26102;&#23548;&#33268;&#30340;&#34892;&#25968;&#35745;&#31639;&#38169;&#35823;</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>cell<span class=\"k\">.</span>rowSpan <span class=\"k\">&gt;</span> rowsNum<span class=\"k\">)</span> <span class=\"k\">{</span>","                        cell<span class=\"k\">.</span>rowSpan <span class=\"k\">=</span> rowsNum<span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    <span class=\"k\">var</span> colIndex <span class=\"k\">=</span> cellIndex<span class=\"k\">,</span>","                        rowSpan <span class=\"k\">=</span> cell<span class=\"k\">.</span>rowSpan <span class=\"k\">||</span> <span class=\"s\">1</span><span class=\"k\">,</span>","                        colSpan <span class=\"k\">=</span> cell<span class=\"k\">.</span>colSpan <span class=\"k\">||</span> <span class=\"s\">1</span><span class=\"k\">;</span>","                    <span class=\"c\">//&#24403;&#24050;&#32463;&#34987;&#19978;&#19968;&#34892;rowSpan&#25110;&#32773;&#34987;&#21069;&#19968;&#21015;colSpan&#20102;&#65292;&#21017;&#36339;&#21040;&#19979;&#19968;&#20010;&#21333;&#20803;&#26684;&#36827;&#34892;</span>","                    <span class=\"k\">while</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>indexTable<span class=\"k\">[</span>rowIndex<span class=\"k\">][</span>colIndex<span class=\"k\">])</span> colIndex<span class=\"k\">++;</span>","                    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> j <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> j <span class=\"k\">&lt;</span> rowSpan<span class=\"k\">;</span> j<span class=\"k\">++)</span> <span class=\"k\">{</span>","                        <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> k <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> k <span class=\"k\">&lt;</span> colSpan<span class=\"k\">;</span> k<span class=\"k\">++)</span> <span class=\"k\">{</span>","                            <span class=\"k\">this</span><span class=\"k\">.</span>indexTable<span class=\"k\">[</span>rowIndex <span class=\"k\">+</span> j<span class=\"k\">][</span>colIndex <span class=\"k\">+</span> k<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">{</span>","                                rowIndex<span class=\"k\">:</span>rowIndex<span class=\"k\">,</span>","                                cellIndex<span class=\"k\">:</span>cellIndex<span class=\"k\">,</span>","                                colIndex<span class=\"k\">:</span>colIndex<span class=\"k\">,</span>","                                rowSpan<span class=\"k\">:</span>rowSpan<span class=\"k\">,</span>","                                colSpan<span class=\"k\">:</span>colSpan","                            <span class=\"k\">}</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            <span class=\"c\">//&#20462;&#22797;&#27531;&#32570;td</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span>j <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> j <span class=\"k\">&lt;</span> rowsNum<span class=\"k\">;</span> j<span class=\"k\">++)</span> <span class=\"k\">{</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span>k <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> k <span class=\"k\">&lt;</span> colsNum<span class=\"k\">;</span> k<span class=\"k\">++)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>indexTable<span class=\"k\">[</span>j<span class=\"k\">][</span>k<span class=\"k\">]</span> <span class=\"k\">===</span> undefined<span class=\"k\">)</span> <span class=\"k\">{</span>","                        row <span class=\"k\">=</span> rows<span class=\"k\">[</span>j<span class=\"k\">];</span>","                        cell <span class=\"k\">=</span> row<span class=\"k\">.</span>cells<span class=\"k\">[</span>row<span class=\"k\">.</span>cells<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">];</span>","                        cell <span class=\"k\">=</span> cell <span class=\"k\">?</span> cell<span class=\"k\">.</span>cloneNode<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">)</span> <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>table<span class=\"k\">.</span>ownerDocument<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"td\"</span><span class=\"k\">);</span>","                        <span class=\"k\">this</span><span class=\"k\">.</span>setCellContent<span class=\"k\">(</span>cell<span class=\"k\">);</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span>cell<span class=\"k\">.</span>colSpan <span class=\"k\">!==</span> <span class=\"s\">1</span><span class=\"k\">)</span>cell<span class=\"k\">.</span>colSpan <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span>cell<span class=\"k\">.</span>rowSpan <span class=\"k\">!==</span> <span class=\"s\">1</span><span class=\"k\">)</span>cell<span class=\"k\">.</span>rowSpan <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","                        row<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>cell<span class=\"k\">);</span>","                        <span class=\"k\">this</span><span class=\"k\">.</span>indexTable<span class=\"k\">[</span>j<span class=\"k\">][</span>k<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">{</span>","                            rowIndex<span class=\"k\">:</span>j<span class=\"k\">,</span>","                            cellIndex<span class=\"k\">:</span>cell<span class=\"k\">.</span>cellIndex<span class=\"k\">,</span>","                            colIndex<span class=\"k\">:</span>k<span class=\"k\">,</span>","                            rowSpan<span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>","                            colSpan<span class=\"k\">:</span><span class=\"s\">1</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            <span class=\"c\">//&#24403;&#26694;&#36873;&#21518;&#21024;&#38500;&#34892;&#25110;&#32773;&#21015;&#21518;&#25764;&#38144;&#65292;&#38656;&#35201;&#37325;&#24314;&#36873;&#21306;&#12290;</span>","            <span class=\"k\">var</span> tds <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>table<span class=\"k\">,</span> <span class=\"s\">\"td\"</span><span class=\"k\">),</span>","                selectTds <span class=\"k\">=</span> <span class=\"k\">[];</span>","            utils<span class=\"k\">.</span>each<span class=\"k\">(</span>tds<span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>td<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>domUtils<span class=\"k\">.</span>hasClass<span class=\"k\">(</span>td<span class=\"k\">,</span> <span class=\"s\">\"selectTdClass\"</span><span class=\"k\">))</span> <span class=\"k\">{</span>","                    selectTds<span class=\"k\">.</span>push<span class=\"k\">(</span>td<span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>selectTds<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> start <span class=\"k\">=</span> selectTds<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">],</span>","                    end <span class=\"k\">=</span> selectTds<span class=\"k\">[</span>selectTds<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">],</span>","                    startInfo <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getCellInfo<span class=\"k\">(</span>start<span class=\"k\">),</span>","                    endInfo <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getCellInfo<span class=\"k\">(</span>end<span class=\"k\">);</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>selectedTds <span class=\"k\">=</span> selectTds<span class=\"k\">;</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>cellsRange <span class=\"k\">=</span> <span class=\"k\">{</span>","                    beginRowIndex<span class=\"k\">:</span>startInfo<span class=\"k\">.</span>rowIndex<span class=\"k\">,</span>","                    beginColIndex<span class=\"k\">:</span>startInfo<span class=\"k\">.</span>colIndex<span class=\"k\">,</span>","                    endRowIndex<span class=\"k\">:</span>endInfo<span class=\"k\">.</span>rowIndex <span class=\"k\">+</span> endInfo<span class=\"k\">.</span>rowSpan <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">,</span>","                    endColIndex<span class=\"k\">:</span>endInfo<span class=\"k\">.</span>colIndex <span class=\"k\">+</span> endInfo<span class=\"k\">.</span>colSpan <span class=\"k\">-</span> <span class=\"s\">1</span>","                <span class=\"k\">}</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#33719;&#21462;&#21333;&#20803;&#26684;&#30340;&#32034;&#24341;&#20449;&#24687;</span>","<span class=\"c\">         */</span>","        getCellInfo<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>cell<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span>cell<span class=\"k\">)</span> <span class=\"k\">return</span><span class=\"k\">;</span>","            <span class=\"k\">var</span> cellIndex <span class=\"k\">=</span> cell<span class=\"k\">.</span>cellIndex<span class=\"k\">,</span>","                rowIndex <span class=\"k\">=</span> cell<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>rowIndex<span class=\"k\">,</span>","                rowInfo <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>indexTable<span class=\"k\">[</span>rowIndex<span class=\"k\">],</span>","                numCols <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>colsNum<span class=\"k\">;</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> colIndex <span class=\"k\">=</span> cellIndex<span class=\"k\">;</span> colIndex <span class=\"k\">&lt;</span> numCols<span class=\"k\">;</span> colIndex<span class=\"k\">++)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> cellInfo <span class=\"k\">=</span> rowInfo<span class=\"k\">[</span>colIndex<span class=\"k\">];</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>cellInfo<span class=\"k\">.</span>rowIndex <span class=\"k\">===</span> rowIndex <span class=\"k\">&amp;&amp;</span> cellInfo<span class=\"k\">.</span>cellIndex <span class=\"k\">===</span> cellIndex<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> cellInfo<span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#26681;&#25454;&#34892;&#21015;&#21495;&#33719;&#21462;&#21333;&#20803;&#26684;</span>","<span class=\"c\">         */</span>","        getCell<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>rowIndex<span class=\"k\">,</span> cellIndex<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> rowIndex <span class=\"k\">&lt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>rowsNum <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>table<span class=\"k\">.</span>rows<span class=\"k\">[</span>rowIndex<span class=\"k\">].</span>cells<span class=\"k\">[</span>cellIndex<span class=\"k\">]</span> <span class=\"k\">||</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#21024;&#38500;&#21333;&#20803;&#26684;</span>","<span class=\"c\">         */</span>","        deleteCell<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>cell<span class=\"k\">,</span> rowIndex<span class=\"k\">)</span> <span class=\"k\">{</span>","            rowIndex <span class=\"k\">=</span> <span class=\"k\">typeof</span> rowIndex <span class=\"k\">==</span> <span class=\"s\">'number'</span> <span class=\"k\">?</span> rowIndex <span class=\"k\">:</span> cell<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>rowIndex<span class=\"k\">;</span>","            <span class=\"k\">var</span> row <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>table<span class=\"k\">.</span>rows<span class=\"k\">[</span>rowIndex<span class=\"k\">];</span>","            row<span class=\"k\">.</span>deleteCell<span class=\"k\">(</span>cell<span class=\"k\">.</span>cellIndex<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#26681;&#25454;&#22987;&#26411;&#20004;&#20010;&#21333;&#20803;&#26684;&#33719;&#21462;&#34987;&#26694;&#36873;&#30340;&#25152;&#26377;&#21333;&#20803;&#26684;&#33539;&#22260;</span>","<span class=\"c\">         */</span>","        getCellsRange<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>cellA<span class=\"k\">,</span> cellB<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">function</span> checkRange<span class=\"k\">(</span>beginRowIndex<span class=\"k\">,</span> beginColIndex<span class=\"k\">,</span> endRowIndex<span class=\"k\">,</span> endColIndex<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> tmpBeginRowIndex <span class=\"k\">=</span> beginRowIndex<span class=\"k\">,</span>","                    tmpBeginColIndex <span class=\"k\">=</span> beginColIndex<span class=\"k\">,</span>","                    tmpEndRowIndex <span class=\"k\">=</span> endRowIndex<span class=\"k\">,</span>","                    tmpEndColIndex <span class=\"k\">=</span> endColIndex<span class=\"k\">,</span>","                    cellInfo<span class=\"k\">,</span> colIndex<span class=\"k\">,</span> rowIndex<span class=\"k\">;</span>","                <span class=\"c\">// &#36890;&#36807;indexTable&#26816;&#26597;&#26159;&#21542;&#23384;&#22312;&#36229;&#20986;TableRange&#19978;&#36793;&#30028;&#30340;&#24773;&#20917;</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>beginRowIndex <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">for</span> <span class=\"k\">(</span>colIndex <span class=\"k\">=</span> beginColIndex<span class=\"k\">;</span> colIndex <span class=\"k\">&lt;</span> endColIndex<span class=\"k\">;</span> colIndex<span class=\"k\">++)</span> <span class=\"k\">{</span>","                        cellInfo <span class=\"k\">=</span> me<span class=\"k\">.</span>indexTable<span class=\"k\">[</span>beginRowIndex<span class=\"k\">][</span>colIndex<span class=\"k\">];</span>","                        rowIndex <span class=\"k\">=</span> cellInfo<span class=\"k\">.</span>rowIndex<span class=\"k\">;</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span>rowIndex <span class=\"k\">&lt;</span> beginRowIndex<span class=\"k\">)</span> <span class=\"k\">{</span>","                            tmpBeginRowIndex <span class=\"k\">=</span> Math<span class=\"k\">.</span>min<span class=\"k\">(</span>rowIndex<span class=\"k\">,</span> tmpBeginRowIndex<span class=\"k\">);</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                <span class=\"c\">// &#36890;&#36807;indexTable&#26816;&#26597;&#26159;&#21542;&#23384;&#22312;&#36229;&#20986;TableRange&#21491;&#36793;&#30028;&#30340;&#24773;&#20917;</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>endColIndex <span class=\"k\">&lt;</span> me<span class=\"k\">.</span>colsNum<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">for</span> <span class=\"k\">(</span>rowIndex <span class=\"k\">=</span> beginRowIndex<span class=\"k\">;</span> rowIndex <span class=\"k\">&lt;</span> endRowIndex<span class=\"k\">;</span> rowIndex<span class=\"k\">++)</span> <span class=\"k\">{</span>","                        cellInfo <span class=\"k\">=</span> me<span class=\"k\">.</span>indexTable<span class=\"k\">[</span>rowIndex<span class=\"k\">][</span>endColIndex<span class=\"k\">];</span>","                        colIndex <span class=\"k\">=</span> cellInfo<span class=\"k\">.</span>colIndex <span class=\"k\">+</span> cellInfo<span class=\"k\">.</span>colSpan <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">;</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span>colIndex <span class=\"k\">&gt;</span> endColIndex<span class=\"k\">)</span> <span class=\"k\">{</span>","                            tmpEndColIndex <span class=\"k\">=</span> Math<span class=\"k\">.</span>max<span class=\"k\">(</span>colIndex<span class=\"k\">,</span> tmpEndColIndex<span class=\"k\">);</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                <span class=\"c\">// &#26816;&#26597;&#26159;&#21542;&#26377;&#36229;&#20986;TableRange&#19979;&#36793;&#30028;&#30340;&#24773;&#20917;</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>endRowIndex <span class=\"k\">&lt;</span> me<span class=\"k\">.</span>rowsNum<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">for</span> <span class=\"k\">(</span>colIndex <span class=\"k\">=</span> beginColIndex<span class=\"k\">;</span> colIndex <span class=\"k\">&lt;</span> endColIndex<span class=\"k\">;</span> colIndex<span class=\"k\">++)</span> <span class=\"k\">{</span>","                        cellInfo <span class=\"k\">=</span> me<span class=\"k\">.</span>indexTable<span class=\"k\">[</span>endRowIndex<span class=\"k\">][</span>colIndex<span class=\"k\">];</span>","                        rowIndex <span class=\"k\">=</span> cellInfo<span class=\"k\">.</span>rowIndex <span class=\"k\">+</span> cellInfo<span class=\"k\">.</span>rowSpan <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">;</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span>rowIndex <span class=\"k\">&gt;</span> endRowIndex<span class=\"k\">)</span> <span class=\"k\">{</span>","                            tmpEndRowIndex <span class=\"k\">=</span> Math<span class=\"k\">.</span>max<span class=\"k\">(</span>rowIndex<span class=\"k\">,</span> tmpEndRowIndex<span class=\"k\">);</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                <span class=\"c\">// &#26816;&#26597;&#26159;&#21542;&#26377;&#36229;&#20986;TableRange&#24038;&#36793;&#30028;&#30340;&#24773;&#20917;</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>beginColIndex <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">for</span> <span class=\"k\">(</span>rowIndex <span class=\"k\">=</span> beginRowIndex<span class=\"k\">;</span> rowIndex <span class=\"k\">&lt;</span> endRowIndex<span class=\"k\">;</span> rowIndex<span class=\"k\">++)</span> <span class=\"k\">{</span>","                        cellInfo <span class=\"k\">=</span> me<span class=\"k\">.</span>indexTable<span class=\"k\">[</span>rowIndex<span class=\"k\">][</span>beginColIndex<span class=\"k\">];</span>","                        colIndex <span class=\"k\">=</span> cellInfo<span class=\"k\">.</span>colIndex<span class=\"k\">;</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span>colIndex <span class=\"k\">&lt;</span> beginColIndex<span class=\"k\">)</span> <span class=\"k\">{</span>","                            tmpBeginColIndex <span class=\"k\">=</span> Math<span class=\"k\">.</span>min<span class=\"k\">(</span>cellInfo<span class=\"k\">.</span>colIndex<span class=\"k\">,</span> tmpBeginColIndex<span class=\"k\">);</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                <span class=\"c\">//&#36882;&#24402;&#35843;&#29992;&#30452;&#33267;&#25152;&#26377;&#23436;&#25104;&#25152;&#26377;&#26694;&#36873;&#21333;&#20803;&#26684;&#30340;&#25193;&#23637;</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>tmpBeginRowIndex <span class=\"k\">!=</span> beginRowIndex <span class=\"k\">||</span> tmpBeginColIndex <span class=\"k\">!=</span> beginColIndex <span class=\"k\">||</span> tmpEndRowIndex <span class=\"k\">!=</span> endRowIndex <span class=\"k\">||</span> tmpEndColIndex <span class=\"k\">!=</span> endColIndex<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> checkRange<span class=\"k\">(</span>tmpBeginRowIndex<span class=\"k\">,</span> tmpBeginColIndex<span class=\"k\">,</span> tmpEndRowIndex<span class=\"k\">,</span> tmpEndColIndex<span class=\"k\">);</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    <span class=\"c\">// &#19981;&#38656;&#35201;&#25193;&#23637;TableRange&#30340;&#24773;&#20917;</span>","                    <span class=\"k\">return</span> <span class=\"k\">{</span>","                        beginRowIndex<span class=\"k\">:</span>beginRowIndex<span class=\"k\">,</span>","                        beginColIndex<span class=\"k\">:</span>beginColIndex<span class=\"k\">,</span>","                        endRowIndex<span class=\"k\">:</span>endRowIndex<span class=\"k\">,</span>","                        endColIndex<span class=\"k\">:</span>endColIndex","                    <span class=\"k\">}</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">try</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> me <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">,</span>","                    cellAInfo <span class=\"k\">=</span> me<span class=\"k\">.</span>getCellInfo<span class=\"k\">(</span>cellA<span class=\"k\">);</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>cellA <span class=\"k\">===</span> cellB<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> <span class=\"k\">{</span>","                        beginRowIndex<span class=\"k\">:</span>cellAInfo<span class=\"k\">.</span>rowIndex<span class=\"k\">,</span>","                        beginColIndex<span class=\"k\">:</span>cellAInfo<span class=\"k\">.</span>colIndex<span class=\"k\">,</span>","                        endRowIndex<span class=\"k\">:</span>cellAInfo<span class=\"k\">.</span>rowIndex <span class=\"k\">+</span> cellAInfo<span class=\"k\">.</span>rowSpan <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">,</span>","                        endColIndex<span class=\"k\">:</span>cellAInfo<span class=\"k\">.</span>colIndex <span class=\"k\">+</span> cellAInfo<span class=\"k\">.</span>colSpan <span class=\"k\">-</span> <span class=\"s\">1</span>","                    <span class=\"k\">}</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","                <span class=\"k\">var</span> cellBInfo <span class=\"k\">=</span> me<span class=\"k\">.</span>getCellInfo<span class=\"k\">(</span>cellB<span class=\"k\">);</span>","                <span class=\"c\">// &#35745;&#31639;TableRange&#30340;&#22235;&#20010;&#36793;</span>","                <span class=\"k\">var</span> beginRowIndex <span class=\"k\">=</span> Math<span class=\"k\">.</span>min<span class=\"k\">(</span>cellAInfo<span class=\"k\">.</span>rowIndex<span class=\"k\">,</span> cellBInfo<span class=\"k\">.</span>rowIndex<span class=\"k\">),</span>","                    beginColIndex <span class=\"k\">=</span> Math<span class=\"k\">.</span>min<span class=\"k\">(</span>cellAInfo<span class=\"k\">.</span>colIndex<span class=\"k\">,</span> cellBInfo<span class=\"k\">.</span>colIndex<span class=\"k\">),</span>","                    endRowIndex <span class=\"k\">=</span> Math<span class=\"k\">.</span>max<span class=\"k\">(</span>cellAInfo<span class=\"k\">.</span>rowIndex <span class=\"k\">+</span> cellAInfo<span class=\"k\">.</span>rowSpan <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">,</span> cellBInfo<span class=\"k\">.</span>rowIndex <span class=\"k\">+</span> cellBInfo<span class=\"k\">.</span>rowSpan <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">),</span>","                    endColIndex <span class=\"k\">=</span> Math<span class=\"k\">.</span>max<span class=\"k\">(</span>cellAInfo<span class=\"k\">.</span>colIndex <span class=\"k\">+</span> cellAInfo<span class=\"k\">.</span>colSpan <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">,</span> cellBInfo<span class=\"k\">.</span>colIndex <span class=\"k\">+</span> cellBInfo<span class=\"k\">.</span>colSpan <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">);</span>","","                <span class=\"k\">return</span> checkRange<span class=\"k\">(</span>beginRowIndex<span class=\"k\">,</span> beginColIndex<span class=\"k\">,</span> endRowIndex<span class=\"k\">,</span> endColIndex<span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>debug<span class=\"k\">)</span> <span class=\"k\">throw</span> e<span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#20381;&#25454;cellsRange&#33719;&#21462;&#23545;&#24212;&#30340;&#21333;&#20803;&#26684;&#38598;&#21512;</span>","<span class=\"c\">         */</span>","        getCells<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>range<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"c\">//&#27599;&#27425;&#33719;&#21462;cells&#20043;&#21069;&#24517;&#39035;&#20808;&#28165;&#38500;&#19978;&#27425;&#30340;&#36873;&#25321;&#65292;&#21542;&#21017;&#20250;&#23545;&#21518;&#32493;&#33719;&#21462;&#25805;&#20316;&#36896;&#25104;&#24433;&#21709;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>clearSelected<span class=\"k\">();</span>","            <span class=\"k\">var</span> beginRowIndex <span class=\"k\">=</span> range<span class=\"k\">.</span>beginRowIndex<span class=\"k\">,</span>","                beginColIndex <span class=\"k\">=</span> range<span class=\"k\">.</span>beginColIndex<span class=\"k\">,</span>","                endRowIndex <span class=\"k\">=</span> range<span class=\"k\">.</span>endRowIndex<span class=\"k\">,</span>","                endColIndex <span class=\"k\">=</span> range<span class=\"k\">.</span>endColIndex<span class=\"k\">,</span>","                cellInfo<span class=\"k\">,</span> rowIndex<span class=\"k\">,</span> colIndex<span class=\"k\">,</span> tdHash <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">,</span> returnTds <span class=\"k\">=</span> <span class=\"k\">[];</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> beginRowIndex<span class=\"k\">;</span> i <span class=\"k\">&lt;=</span> endRowIndex<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> j <span class=\"k\">=</span> beginColIndex<span class=\"k\">;</span> j <span class=\"k\">&lt;=</span> endColIndex<span class=\"k\">;</span> j<span class=\"k\">++)</span> <span class=\"k\">{</span>","                    cellInfo <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>indexTable<span class=\"k\">[</span>i<span class=\"k\">][</span>j<span class=\"k\">];</span>","                    rowIndex <span class=\"k\">=</span> cellInfo<span class=\"k\">.</span>rowIndex<span class=\"k\">;</span>","                    colIndex <span class=\"k\">=</span> cellInfo<span class=\"k\">.</span>colIndex<span class=\"k\">;</span>","                    <span class=\"c\">// &#22914;&#26524;Cells&#37324;&#24050;&#32463;&#21253;&#21547;&#20102;&#27492;Cell&#21017;&#36339;&#36807;</span>","                    <span class=\"k\">var</span> key <span class=\"k\">=</span> rowIndex <span class=\"k\">+</span> <span class=\"s\">'|'</span> <span class=\"k\">+</span> colIndex<span class=\"k\">;</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>tdHash<span class=\"k\">[</span>key<span class=\"k\">])</span> <span class=\"k\">continue</span><span class=\"k\">;</span>","                    tdHash<span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>rowIndex <span class=\"k\">&lt;</span> i <span class=\"k\">||</span> colIndex <span class=\"k\">&lt;</span> j <span class=\"k\">||</span> rowIndex <span class=\"k\">+</span> cellInfo<span class=\"k\">.</span>rowSpan <span class=\"k\">-</span> <span class=\"s\">1</span> <span class=\"k\">&gt;</span> endRowIndex <span class=\"k\">||</span> colIndex <span class=\"k\">+</span> cellInfo<span class=\"k\">.</span>colSpan <span class=\"k\">-</span> <span class=\"s\">1</span> <span class=\"k\">&gt;</span> endColIndex<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    returnTds<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>getCell<span class=\"k\">(</span>rowIndex<span class=\"k\">,</span> cellInfo<span class=\"k\">.</span>cellIndex<span class=\"k\">));</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> returnTds<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#28165;&#29702;&#24050;&#32463;&#36873;&#20013;&#30340;&#21333;&#20803;&#26684;</span>","<span class=\"c\">         */</span>","        clearSelected<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","            UETable<span class=\"k\">.</span>removeSelectedClass<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>selectedTds<span class=\"k\">);</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>selectedTds <span class=\"k\">=</span> <span class=\"k\">[];</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>cellsRange <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#26681;&#25454;range&#35774;&#32622;&#24050;&#32463;&#36873;&#20013;&#30340;&#21333;&#20803;&#26684;</span>","<span class=\"c\">         */</span>","        setSelected<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>range<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> cells <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getCells<span class=\"k\">(</span>range<span class=\"k\">);</span>","            UETable<span class=\"k\">.</span>addSelectedClass<span class=\"k\">(</span>cells<span class=\"k\">);</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>selectedTds <span class=\"k\">=</span> cells<span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>cellsRange <span class=\"k\">=</span> range<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        isFullRow<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> range <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>cellsRange<span class=\"k\">;</span>","            <span class=\"k\">return</span> <span class=\"k\">(</span>range<span class=\"k\">.</span>endColIndex <span class=\"k\">-</span> range<span class=\"k\">.</span>beginColIndex <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">==</span> <span class=\"k\">this</span><span class=\"k\">.</span>colsNum<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        isFullCol<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> range <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>cellsRange<span class=\"k\">,</span>","                table <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>table<span class=\"k\">,</span>","                ths <span class=\"k\">=</span> table<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span><span class=\"s\">\"th\"</span><span class=\"k\">),</span>","                rows <span class=\"k\">=</span> range<span class=\"k\">.</span>endRowIndex <span class=\"k\">-</span> range<span class=\"k\">.</span>beginRowIndex <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">;</span>","            <span class=\"k\">return</span>  <span class=\"k\">!</span>ths<span class=\"k\">.</span>length <span class=\"k\">?</span> rows <span class=\"k\">==</span> <span class=\"k\">this</span><span class=\"k\">.</span>rowsNum <span class=\"k\">:</span> rows <span class=\"k\">==</span> <span class=\"k\">this</span><span class=\"k\">.</span>rowsNum <span class=\"k\">||</span> <span class=\"k\">(</span>rows <span class=\"k\">==</span> <span class=\"k\">this</span><span class=\"k\">.</span>rowsNum <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">);</span>","","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#33719;&#21462;&#35270;&#35273;&#19978;&#30340;&#21069;&#32622;&#21333;&#20803;&#26684;&#65292;&#40664;&#35748;&#26159;&#24038;&#36793;&#65292;top&#20256;&#20837;&#26102;</span>","<span class=\"c\">         * @param cell</span>","<span class=\"c\">         * @param top</span>","<span class=\"c\">         */</span>","        getNextCell<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>cell<span class=\"k\">,</span> bottom<span class=\"k\">,</span> ignoreRange<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">try</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> cellInfo <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getCellInfo<span class=\"k\">(</span>cell<span class=\"k\">),</span>","                    nextRowIndex<span class=\"k\">,</span> nextColIndex<span class=\"k\">;</span>","                <span class=\"k\">var</span> len <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>selectedTds<span class=\"k\">.</span>length <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>ignoreRange<span class=\"k\">,</span>","                    range <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>cellsRange<span class=\"k\">;</span>","                <span class=\"c\">//&#26411;&#34892;&#25110;&#32773;&#26411;&#21015;&#27809;&#26377;&#21518;&#32622;&#21333;&#20803;&#26684;</span>","                <span class=\"k\">if</span> <span class=\"k\">((!</span>bottom <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>cellInfo<span class=\"k\">.</span>rowIndex <span class=\"k\">==</span> <span class=\"s\">0</span><span class=\"k\">))</span> <span class=\"k\">||</span> <span class=\"k\">(</span>bottom <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(!</span>len <span class=\"k\">?</span> <span class=\"k\">(</span>cellInfo<span class=\"k\">.</span>rowIndex <span class=\"k\">+</span> cellInfo<span class=\"k\">.</span>rowSpan <span class=\"k\">&gt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>rowsNum <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">:</span> <span class=\"k\">(</span>range<span class=\"k\">.</span>endRowIndex <span class=\"k\">==</span> <span class=\"k\">this</span><span class=\"k\">.</span>rowsNum <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">))))</span> <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","","                nextRowIndex <span class=\"k\">=</span> <span class=\"k\">!</span>bottom <span class=\"k\">?</span> <span class=\"k\">(</span> <span class=\"k\">!</span>len <span class=\"k\">?</span> cellInfo<span class=\"k\">.</span>rowIndex <span class=\"k\">-</span> <span class=\"s\">1</span> <span class=\"k\">:</span> range<span class=\"k\">.</span>beginRowIndex <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">)</span>","                    <span class=\"k\">:</span> <span class=\"k\">(</span> <span class=\"k\">!</span>len <span class=\"k\">?</span> <span class=\"k\">(</span>cellInfo<span class=\"k\">.</span>rowIndex <span class=\"k\">+</span> cellInfo<span class=\"k\">.</span>rowSpan<span class=\"k\">)</span> <span class=\"k\">:</span> range<span class=\"k\">.</span>endRowIndex <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">);</span>","                nextColIndex <span class=\"k\">=</span> <span class=\"k\">!</span>len <span class=\"k\">?</span> cellInfo<span class=\"k\">.</span>colIndex <span class=\"k\">:</span> range<span class=\"k\">.</span>beginColIndex<span class=\"k\">;</span>","                <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>getCell<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>indexTable<span class=\"k\">[</span>nextRowIndex<span class=\"k\">][</span>nextColIndex<span class=\"k\">].</span>rowIndex<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>indexTable<span class=\"k\">[</span>nextRowIndex<span class=\"k\">][</span>nextColIndex<span class=\"k\">].</span>cellIndex<span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","                showError<span class=\"k\">(</span>e<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        getPreviewCell<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>cell<span class=\"k\">,</span> top<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">try</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> cellInfo <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getCellInfo<span class=\"k\">(</span>cell<span class=\"k\">),</span>","                    previewRowIndex<span class=\"k\">,</span> previewColIndex<span class=\"k\">;</span>","                <span class=\"k\">var</span> len <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>selectedTds<span class=\"k\">.</span>length<span class=\"k\">,</span>","                    range <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>cellsRange<span class=\"k\">;</span>","                <span class=\"c\">//&#39318;&#34892;&#25110;&#32773;&#39318;&#21015;&#27809;&#26377;&#21069;&#32622;&#21333;&#20803;&#26684;</span>","                <span class=\"k\">if</span> <span class=\"k\">((!</span>top <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(!</span>len <span class=\"k\">?</span> <span class=\"k\">!</span>cellInfo<span class=\"k\">.</span>colIndex <span class=\"k\">:</span> <span class=\"k\">!</span>range<span class=\"k\">.</span>beginColIndex<span class=\"k\">))</span> <span class=\"k\">||</span> <span class=\"k\">(</span>top <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(!</span>len <span class=\"k\">?</span> <span class=\"k\">(</span>cellInfo<span class=\"k\">.</span>rowIndex <span class=\"k\">&gt;</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>colsNum <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">))</span> <span class=\"k\">:</span> <span class=\"k\">(</span>range<span class=\"k\">.</span>endColIndex <span class=\"k\">==</span> <span class=\"k\">this</span><span class=\"k\">.</span>colsNum <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">))))</span> <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","","                previewRowIndex <span class=\"k\">=</span> <span class=\"k\">!</span>top <span class=\"k\">?</span> <span class=\"k\">(</span> <span class=\"k\">!</span>len <span class=\"k\">?</span> cellInfo<span class=\"k\">.</span>rowIndex <span class=\"k\">:</span> range<span class=\"k\">.</span>beginRowIndex <span class=\"k\">)</span>","                    <span class=\"k\">:</span> <span class=\"k\">(</span> <span class=\"k\">!</span>len <span class=\"k\">?</span> <span class=\"k\">(</span>cellInfo<span class=\"k\">.</span>rowIndex <span class=\"k\">&lt;</span> <span class=\"s\">1</span> <span class=\"k\">?</span> <span class=\"s\">0</span> <span class=\"k\">:</span> <span class=\"k\">(</span>cellInfo<span class=\"k\">.</span>rowIndex <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">))</span> <span class=\"k\">:</span> range<span class=\"k\">.</span>beginRowIndex<span class=\"k\">);</span>","                previewColIndex <span class=\"k\">=</span> <span class=\"k\">!</span>top <span class=\"k\">?</span> <span class=\"k\">(</span> <span class=\"k\">!</span>len <span class=\"k\">?</span> <span class=\"k\">(</span>cellInfo<span class=\"k\">.</span>colIndex <span class=\"k\">&lt;</span> <span class=\"s\">1</span> <span class=\"k\">?</span> <span class=\"s\">0</span> <span class=\"k\">:</span> <span class=\"k\">(</span>cellInfo<span class=\"k\">.</span>colIndex <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">))</span> <span class=\"k\">:</span> range<span class=\"k\">.</span>beginColIndex <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">)</span>","                    <span class=\"k\">:</span> <span class=\"k\">(</span> <span class=\"k\">!</span>len <span class=\"k\">?</span> cellInfo<span class=\"k\">.</span>colIndex <span class=\"k\">:</span> range<span class=\"k\">.</span>endColIndex <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">);</span>","                <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>getCell<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>indexTable<span class=\"k\">[</span>previewRowIndex<span class=\"k\">][</span>previewColIndex<span class=\"k\">].</span>rowIndex<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>indexTable<span class=\"k\">[</span>previewRowIndex<span class=\"k\">][</span>previewColIndex<span class=\"k\">].</span>cellIndex<span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","                showError<span class=\"k\">(</span>e<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#31227;&#21160;&#21333;&#20803;&#26684;&#20013;&#30340;&#20869;&#23481;</span>","<span class=\"c\">         */</span>","        moveContent<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>cellTo<span class=\"k\">,</span> cellFrom<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>UETable<span class=\"k\">.</span>isEmptyBlock<span class=\"k\">(</span>cellFrom<span class=\"k\">))</span> <span class=\"k\">return</span><span class=\"k\">;</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>UETable<span class=\"k\">.</span>isEmptyBlock<span class=\"k\">(</span>cellTo<span class=\"k\">))</span> <span class=\"k\">{</span>","                cellTo<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> cellFrom<span class=\"k\">.</span>innerHTML<span class=\"k\">;</span>","                <span class=\"k\">return</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">var</span> child <span class=\"k\">=</span> cellTo<span class=\"k\">.</span>lastChild<span class=\"k\">;</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>child<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">3</span> <span class=\"k\">||</span> <span class=\"k\">!</span>dtd<span class=\"k\">.</span>$block<span class=\"k\">[</span>child<span class=\"k\">.</span>tagName<span class=\"k\">])</span> <span class=\"k\">{</span>","                cellTo<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>cellTo<span class=\"k\">.</span>ownerDocument<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">'br'</span><span class=\"k\">))</span>","            <span class=\"k\">}</span>","            <span class=\"k\">while</span> <span class=\"k\">(</span>child <span class=\"k\">=</span> cellFrom<span class=\"k\">.</span>firstChild<span class=\"k\">)</span> <span class=\"k\">{</span>","                cellTo<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>child<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#21521;&#21491;&#21512;&#24182;&#21333;&#20803;&#26684;</span>","<span class=\"c\">         */</span>","        mergeRight<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>cell<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> cellInfo <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getCellInfo<span class=\"k\">(</span>cell<span class=\"k\">),</span>","                rightColIndex <span class=\"k\">=</span> cellInfo<span class=\"k\">.</span>colIndex <span class=\"k\">+</span> cellInfo<span class=\"k\">.</span>colSpan<span class=\"k\">,</span>","                rightCellInfo <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>indexTable<span class=\"k\">[</span>cellInfo<span class=\"k\">.</span>rowIndex<span class=\"k\">][</span>rightColIndex<span class=\"k\">],</span>","                rightCell <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getCell<span class=\"k\">(</span>rightCellInfo<span class=\"k\">.</span>rowIndex<span class=\"k\">,</span> rightCellInfo<span class=\"k\">.</span>cellIndex<span class=\"k\">);</span>","            <span class=\"c\">//&#21512;&#24182;</span>","            cell<span class=\"k\">.</span>colSpan <span class=\"k\">=</span> cellInfo<span class=\"k\">.</span>colSpan <span class=\"k\">+</span> rightCellInfo<span class=\"k\">.</span>colSpan<span class=\"k\">;</span>","            <span class=\"c\">//&#34987;&#21512;&#24182;&#30340;&#21333;&#20803;&#26684;&#19981;&#24212;&#23384;&#22312;&#23485;&#24230;&#23646;&#24615;</span>","            cell<span class=\"k\">.</span>removeAttribute<span class=\"k\">(</span><span class=\"s\">\"width\"</span><span class=\"k\">);</span>","            <span class=\"c\">//&#31227;&#21160;&#20869;&#23481;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>moveContent<span class=\"k\">(</span>cell<span class=\"k\">,</span> rightCell<span class=\"k\">);</span>","            <span class=\"c\">//&#21024;&#25481;&#34987;&#21512;&#24182;&#30340;Cell</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>deleteCell<span class=\"k\">(</span>rightCell<span class=\"k\">,</span> rightCellInfo<span class=\"k\">.</span>rowIndex<span class=\"k\">);</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>update<span class=\"k\">();</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#21521;&#19979;&#21512;&#24182;&#21333;&#20803;&#26684;</span>","<span class=\"c\">         */</span>","        mergeDown<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>cell<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> cellInfo <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getCellInfo<span class=\"k\">(</span>cell<span class=\"k\">),</span>","                downRowIndex <span class=\"k\">=</span> cellInfo<span class=\"k\">.</span>rowIndex <span class=\"k\">+</span> cellInfo<span class=\"k\">.</span>rowSpan<span class=\"k\">,</span>","                downCellInfo <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>indexTable<span class=\"k\">[</span>downRowIndex<span class=\"k\">][</span>cellInfo<span class=\"k\">.</span>colIndex<span class=\"k\">],</span>","                downCell <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getCell<span class=\"k\">(</span>downCellInfo<span class=\"k\">.</span>rowIndex<span class=\"k\">,</span> downCellInfo<span class=\"k\">.</span>cellIndex<span class=\"k\">);</span>","            cell<span class=\"k\">.</span>rowSpan <span class=\"k\">=</span> cellInfo<span class=\"k\">.</span>rowSpan <span class=\"k\">+</span> downCellInfo<span class=\"k\">.</span>rowSpan<span class=\"k\">;</span>","            cell<span class=\"k\">.</span>removeAttribute<span class=\"k\">(</span><span class=\"s\">\"height\"</span><span class=\"k\">);</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>moveContent<span class=\"k\">(</span>cell<span class=\"k\">,</span> downCell<span class=\"k\">);</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>deleteCell<span class=\"k\">(</span>downCell<span class=\"k\">,</span> downCellInfo<span class=\"k\">.</span>rowIndex<span class=\"k\">);</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>update<span class=\"k\">();</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#21512;&#24182;&#25972;&#20010;range&#20013;&#30340;&#20869;&#23481;</span>","<span class=\"c\">         */</span>","        mergeRange<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"c\">//&#30001;&#20110;&#21512;&#24182;&#25805;&#20316;&#21487;&#20197;&#22312;&#20219;&#24847;&#26102;&#21051;&#36827;&#34892;&#65292;&#25152;&#20197;&#26080;&#27861;&#36890;&#36807;&#40736;&#26631;&#20301;&#32622;&#31561;&#20449;&#24687;&#23454;&#26102;&#29983;&#25104;range&#65292;&#21482;&#33021;&#36890;&#36807;&#32531;&#23384;&#23454;&#20363;&#20013;&#30340;cellsRange&#23545;&#35937;&#26469;&#35775;&#38382;</span>","            <span class=\"k\">var</span> range <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>cellsRange<span class=\"k\">,</span>","                leftTopCell <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getCell<span class=\"k\">(</span>range<span class=\"k\">.</span>beginRowIndex<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>indexTable<span class=\"k\">[</span>range<span class=\"k\">.</span>beginRowIndex<span class=\"k\">][</span>range<span class=\"k\">.</span>beginColIndex<span class=\"k\">].</span>cellIndex<span class=\"k\">);</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>leftTopCell<span class=\"k\">.</span>tagName <span class=\"k\">==</span> <span class=\"s\">\"TH\"</span> <span class=\"k\">&amp;&amp;</span> range<span class=\"k\">.</span>endRowIndex <span class=\"k\">!==</span> range<span class=\"k\">.</span>beginRowIndex<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> index <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>indexTable<span class=\"k\">,</span>","                    info <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getCellInfo<span class=\"k\">(</span>leftTopCell<span class=\"k\">);</span>","                leftTopCell <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getCell<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">,</span> index<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">][</span>info<span class=\"k\">.</span>colIndex<span class=\"k\">].</span>cellIndex<span class=\"k\">);</span>","                range <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getCellsRange<span class=\"k\">(</span>leftTopCell<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>getCell<span class=\"k\">(</span>index<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>rowsNum <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">][</span>info<span class=\"k\">.</span>colIndex<span class=\"k\">].</span>rowIndex<span class=\"k\">,</span> index<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>rowsNum <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">][</span>info<span class=\"k\">.</span>colIndex<span class=\"k\">].</span>cellIndex<span class=\"k\">));</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// &#21024;&#38500;&#21097;&#20313;&#30340;Cells</span>","            <span class=\"k\">var</span> cells <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getCells<span class=\"k\">(</span>range<span class=\"k\">),</span>","                len <span class=\"k\">=</span> cells<span class=\"k\">.</span>length<span class=\"k\">,</span> cell<span class=\"k\">;</span>","            <span class=\"k\">while</span> <span class=\"k\">(</span>len<span class=\"k\">--)</span> <span class=\"k\">{</span>","                cell <span class=\"k\">=</span> cells<span class=\"k\">[</span>len<span class=\"k\">];</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>cell <span class=\"k\">!==</span> leftTopCell<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>moveContent<span class=\"k\">(</span>leftTopCell<span class=\"k\">,</span> cell<span class=\"k\">);</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>deleteCell<span class=\"k\">(</span>cell<span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            <span class=\"c\">// &#20462;&#25913;&#24038;&#19978;&#35282;Cell&#30340;rowSpan&#21644;colSpan&#65292;&#24182;&#35843;&#25972;&#23485;&#24230;&#23646;&#24615;&#35774;&#32622;</span>","            leftTopCell<span class=\"k\">.</span>rowSpan <span class=\"k\">=</span> range<span class=\"k\">.</span>endRowIndex <span class=\"k\">-</span> range<span class=\"k\">.</span>beginRowIndex <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">;</span>","            leftTopCell<span class=\"k\">.</span>rowSpan <span class=\"k\">&gt;</span> <span class=\"s\">1</span> <span class=\"k\">&amp;&amp;</span> leftTopCell<span class=\"k\">.</span>removeAttribute<span class=\"k\">(</span><span class=\"s\">\"height\"</span><span class=\"k\">);</span>","            leftTopCell<span class=\"k\">.</span>colSpan <span class=\"k\">=</span> range<span class=\"k\">.</span>endColIndex <span class=\"k\">-</span> range<span class=\"k\">.</span>beginColIndex <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">;</span>","            leftTopCell<span class=\"k\">.</span>colSpan <span class=\"k\">&gt;</span> <span class=\"s\">1</span> <span class=\"k\">&amp;&amp;</span> leftTopCell<span class=\"k\">.</span>removeAttribute<span class=\"k\">(</span><span class=\"s\">\"width\"</span><span class=\"k\">);</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>leftTopCell<span class=\"k\">.</span>rowSpan <span class=\"k\">==</span> <span class=\"k\">this</span><span class=\"k\">.</span>rowsNum <span class=\"k\">&amp;&amp;</span> leftTopCell<span class=\"k\">.</span>colSpan <span class=\"k\">!=</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                leftTopCell<span class=\"k\">.</span>colSpan <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>leftTopCell<span class=\"k\">.</span>colSpan <span class=\"k\">==</span> <span class=\"k\">this</span><span class=\"k\">.</span>colsNum <span class=\"k\">&amp;&amp;</span> leftTopCell<span class=\"k\">.</span>rowSpan <span class=\"k\">!=</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> rowIndex <span class=\"k\">=</span> leftTopCell<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>rowIndex<span class=\"k\">;</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> leftTopCell<span class=\"k\">.</span>rowSpan <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> row <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>table<span class=\"k\">.</span>rows<span class=\"k\">[</span>rowIndex <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">];</span>","                    row<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>removeChild<span class=\"k\">(</span>row<span class=\"k\">);</span>","                <span class=\"k\">}</span>","                leftTopCell<span class=\"k\">.</span>rowSpan <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>update<span class=\"k\">();</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#25554;&#20837;&#19968;&#34892;&#21333;&#20803;&#26684;</span>","<span class=\"c\">         */</span>","        insertRow<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>rowIndex<span class=\"k\">,</span> sourceCell<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> numCols <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>colsNum<span class=\"k\">,</span>","                table <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>table<span class=\"k\">,</span>","                row <span class=\"k\">=</span> table<span class=\"k\">.</span>insertRow<span class=\"k\">(</span>rowIndex<span class=\"k\">),</span> cell<span class=\"k\">,</span>","                width <span class=\"k\">=</span> parseInt<span class=\"k\">((</span>table<span class=\"k\">.</span>offsetWidth <span class=\"k\">-</span> numCols <span class=\"k\">*</span> <span class=\"s\">20</span> <span class=\"k\">-</span> numCols <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">/</span> numCols<span class=\"k\">,</span> <span class=\"s\">10</span><span class=\"k\">);</span>","            <span class=\"c\">//&#39318;&#34892;&#30452;&#25509;&#25554;&#20837;,&#26080;&#38656;&#32771;&#34385;&#37096;&#20998;&#21333;&#20803;&#26684;&#34987;rowspan&#30340;&#24773;&#20917;</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>rowIndex <span class=\"k\">==</span> <span class=\"s\">0</span> <span class=\"k\">||</span> rowIndex <span class=\"k\">==</span> <span class=\"k\">this</span><span class=\"k\">.</span>rowsNum<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> colIndex <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> colIndex <span class=\"k\">&lt;</span> numCols<span class=\"k\">;</span> colIndex<span class=\"k\">++)</span> <span class=\"k\">{</span>","                    cell <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>cloneCell<span class=\"k\">(</span>sourceCell<span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">);</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>setCellContent<span class=\"k\">(</span>cell<span class=\"k\">);</span>","                    cell<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">'vAlign'</span><span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> cell<span class=\"k\">.</span>setAttribute<span class=\"k\">(</span><span class=\"s\">'vAlign'</span><span class=\"k\">,</span> cell<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">'vAlign'</span><span class=\"k\">));</span>","                    row<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>cell<span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> infoRow <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>indexTable<span class=\"k\">[</span>rowIndex<span class=\"k\">],</span>","                    cellIndex <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span>colIndex <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> colIndex <span class=\"k\">&lt;</span> numCols<span class=\"k\">;</span> colIndex<span class=\"k\">++)</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> cellInfo <span class=\"k\">=</span> infoRow<span class=\"k\">[</span>colIndex<span class=\"k\">];</span>","                    <span class=\"c\">//&#22914;&#26524;&#23384;&#22312;&#26576;&#20010;&#21333;&#20803;&#26684;&#30340;rowspan&#31359;&#36807;&#24453;&#25554;&#20837;&#34892;&#30340;&#20301;&#32622;&#65292;&#21017;&#20462;&#25913;&#35813;&#21333;&#20803;&#26684;&#30340;rowspan&#21363;&#21487;&#65292;&#26080;&#38656;&#25554;&#20837;&#21333;&#20803;&#26684;</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>cellInfo<span class=\"k\">.</span>rowIndex <span class=\"k\">&lt;</span> rowIndex<span class=\"k\">)</span> <span class=\"k\">{</span>","                        cell <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getCell<span class=\"k\">(</span>cellInfo<span class=\"k\">.</span>rowIndex<span class=\"k\">,</span> cellInfo<span class=\"k\">.</span>cellIndex<span class=\"k\">);</span>","                        cell<span class=\"k\">.</span>rowSpan <span class=\"k\">=</span> cellInfo<span class=\"k\">.</span>rowSpan <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        cell <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>cloneCell<span class=\"k\">(</span>sourceCell<span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">);</span>","                        <span class=\"k\">this</span><span class=\"k\">.</span>setCellContent<span class=\"k\">(</span>cell<span class=\"k\">);</span>","                        row<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>cell<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            <span class=\"c\">//&#26694;&#36873;&#26102;&#25554;&#20837;&#19981;&#35302;&#21457;contentchange&#65292;&#38656;&#35201;&#25163;&#21160;&#26356;&#26032;&#32034;&#24341;&#12290;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>update<span class=\"k\">();</span>","            <span class=\"k\">return</span> row<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        <span class=\"c\">/**</span>","<span class=\"c\">         * &#21024;&#38500;&#19968;&#34892;&#21333;&#20803;&#26684;</span>","<span class=\"c\">         * @param rowIndex</span>","<span class=\"c\">         */</span>","        deleteRow<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>rowIndex<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> row <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>table<span class=\"k\">.</span>rows<span class=\"k\">[</span>rowIndex<span class=\"k\">],</span>","                infoRow <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>indexTable<span class=\"k\">[</span>rowIndex<span class=\"k\">],</span>","                colsNum <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>colsNum<span class=\"k\">,</span>","                count <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>     <span class=\"c\">//&#22788;&#29702;&#35745;&#25968;</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> colIndex <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> colIndex <span class=\"k\">&lt;</span> colsNum<span class=\"k\">;)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> cellInfo <span class=\"k\">=</span> infoRow<span class=\"k\">[</span>colIndex<span class=\"k\">],</span>","                    cell <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getCell<span class=\"k\">(</span>cellInfo<span class=\"k\">.</span>rowIndex<span class=\"k\">,</span> cellInfo<span class=\"k\">.</span>cellIndex<span class=\"k\">);</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>cell<span class=\"k\">.</span>rowSpan <span class=\"k\">&gt;</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>cellInfo<span class=\"k\">.</span>rowIndex <span class=\"k\">==</span> rowIndex<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">var</span> clone <span class=\"k\">=</span> cell<span class=\"k\">.</span>cloneNode<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","                        clone<span class=\"k\">.</span>rowSpan <span class=\"k\">=</span> cell<span class=\"k\">.</span>rowSpan <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">;</span>","                        clone<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","                        cell<span class=\"k\">.</span>rowSpan <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","                        <span class=\"k\">var</span> nextRowIndex <span class=\"k\">=</span> rowIndex <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">,</span>","                            nextRow <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>table<span class=\"k\">.</span>rows<span class=\"k\">[</span>nextRowIndex<span class=\"k\">],</span>","                            insertCellIndex<span class=\"k\">,</span>","                            preMerged <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getPreviewMergedCellsNum<span class=\"k\">(</span>nextRowIndex<span class=\"k\">,</span> colIndex<span class=\"k\">)</span> <span class=\"k\">-</span> count<span class=\"k\">;</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span>preMerged <span class=\"k\">&lt;</span> colIndex<span class=\"k\">)</span> <span class=\"k\">{</span>","                            insertCellIndex <span class=\"k\">=</span> colIndex <span class=\"k\">-</span> preMerged <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">;</span>","                            <span class=\"c\">//nextRow.insertCell(insertCellIndex);</span>","                            domUtils<span class=\"k\">.</span>insertAfter<span class=\"k\">(</span>nextRow<span class=\"k\">.</span>cells<span class=\"k\">[</span>insertCellIndex<span class=\"k\">],</span> clone<span class=\"k\">);</span>","                        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                            <span class=\"k\">if</span> <span class=\"k\">(</span>nextRow<span class=\"k\">.</span>cells<span class=\"k\">.</span>length<span class=\"k\">)</span> nextRow<span class=\"k\">.</span>insertBefore<span class=\"k\">(</span>clone<span class=\"k\">,</span> nextRow<span class=\"k\">.</span>cells<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">])</span>","                        <span class=\"k\">}</span>","                        count <span class=\"k\">+=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","                        <span class=\"c\">//cell.parentNode.removeChild(cell);</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                colIndex <span class=\"k\">+=</span> cell<span class=\"k\">.</span>colSpan <span class=\"k\">||</span> <span class=\"s\">1</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">var</span> deleteTds <span class=\"k\">=</span> <span class=\"k\">[],</span> cacheMap <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span>colIndex <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> colIndex <span class=\"k\">&lt;</span> colsNum<span class=\"k\">;</span> colIndex<span class=\"k\">++)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> tmpRowIndex <span class=\"k\">=</span> infoRow<span class=\"k\">[</span>colIndex<span class=\"k\">].</span>rowIndex<span class=\"k\">,</span>","                    tmpCellIndex <span class=\"k\">=</span> infoRow<span class=\"k\">[</span>colIndex<span class=\"k\">].</span>cellIndex<span class=\"k\">,</span>","                    key <span class=\"k\">=</span> tmpRowIndex <span class=\"k\">+</span> <span class=\"s\">\"_\"</span> <span class=\"k\">+</span> tmpCellIndex<span class=\"k\">;</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>cacheMap<span class=\"k\">[</span>key<span class=\"k\">])</span><span class=\"k\">continue</span><span class=\"k\">;</span>","                cacheMap<span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","                cell <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getCell<span class=\"k\">(</span>tmpRowIndex<span class=\"k\">,</span> tmpCellIndex<span class=\"k\">);</span>","                deleteTds<span class=\"k\">.</span>push<span class=\"k\">(</span>cell<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">var</span> mergeTds <span class=\"k\">=</span> <span class=\"k\">[];</span>","            utils<span class=\"k\">.</span>each<span class=\"k\">(</span>deleteTds<span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>td<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>td<span class=\"k\">.</span>rowSpan <span class=\"k\">==</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    td<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>removeChild<span class=\"k\">(</span>td<span class=\"k\">);</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    mergeTds<span class=\"k\">.</span>push<span class=\"k\">(</span>td<span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","            utils<span class=\"k\">.</span>each<span class=\"k\">(</span>mergeTds<span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>td<span class=\"k\">)</span> <span class=\"k\">{</span>","                td<span class=\"k\">.</span>rowSpan<span class=\"k\">--;</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","            row<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>removeChild<span class=\"k\">(</span>row<span class=\"k\">);</span>","            <span class=\"c\">//&#27983;&#35272;&#22120;&#26041;&#27861;&#26412;&#36523;&#23384;&#22312;bug,&#37319;&#29992;&#33258;&#23450;&#20041;&#26041;&#27861;&#21024;&#38500;</span>","            <span class=\"c\">//this.table.deleteRow(rowIndex);</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>update<span class=\"k\">();</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        insertCol<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>colIndex<span class=\"k\">,</span> sourceCell<span class=\"k\">,</span> defaultValue<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> rowsNum <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>rowsNum<span class=\"k\">,</span>","                rowIndex <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span>","                tableRow<span class=\"k\">,</span> cell<span class=\"k\">,</span>","                backWidth <span class=\"k\">=</span> parseInt<span class=\"k\">((</span><span class=\"k\">this</span><span class=\"k\">.</span>table<span class=\"k\">.</span>offsetWidth <span class=\"k\">-</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>colsNum <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">*</span> <span class=\"s\">20</span> <span class=\"k\">-</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>colsNum <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">))</span> <span class=\"k\">/</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>colsNum <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">),</span> <span class=\"s\">10</span><span class=\"k\">);</span>","","            <span class=\"k\">function</span> replaceTdToTh<span class=\"k\">(</span>rowIndex<span class=\"k\">,</span> cell<span class=\"k\">,</span> tableRow<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>rowIndex <span class=\"k\">==</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> th <span class=\"k\">=</span> cell<span class=\"k\">.</span>nextSibling <span class=\"k\">||</span> cell<span class=\"k\">.</span>previousSibling<span class=\"k\">;</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>th<span class=\"k\">.</span>tagName <span class=\"k\">==</span> <span class=\"s\">'TH'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        th <span class=\"k\">=</span> cell<span class=\"k\">.</span>ownerDocument<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"th\"</span><span class=\"k\">);</span>","                        th<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>cell<span class=\"k\">.</span>firstChild<span class=\"k\">);</span>","                        tableRow<span class=\"k\">.</span>insertBefore<span class=\"k\">(</span>th<span class=\"k\">,</span> cell<span class=\"k\">);</span>","                        domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>cell<span class=\"k\">)</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>cell<span class=\"k\">.</span>tagName <span class=\"k\">==</span> <span class=\"s\">'TH'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">var</span> td <span class=\"k\">=</span> cell<span class=\"k\">.</span>ownerDocument<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"td\"</span><span class=\"k\">);</span>","                        td<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>cell<span class=\"k\">.</span>firstChild<span class=\"k\">);</span>","                        tableRow<span class=\"k\">.</span>insertBefore<span class=\"k\">(</span>td<span class=\"k\">,</span> cell<span class=\"k\">);</span>","                        domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>cell<span class=\"k\">)</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">var</span> preCell<span class=\"k\">;</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>colIndex <span class=\"k\">==</span> <span class=\"s\">0</span> <span class=\"k\">||</span> colIndex <span class=\"k\">==</span> <span class=\"k\">this</span><span class=\"k\">.</span>colsNum<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">for</span> <span class=\"k\">(;</span> rowIndex <span class=\"k\">&lt;</span> rowsNum<span class=\"k\">;</span> rowIndex<span class=\"k\">++)</span> <span class=\"k\">{</span>","                    tableRow <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>table<span class=\"k\">.</span>rows<span class=\"k\">[</span>rowIndex<span class=\"k\">];</span>","                    preCell <span class=\"k\">=</span> tableRow<span class=\"k\">.</span>cells<span class=\"k\">[</span>colIndex <span class=\"k\">==</span> <span class=\"s\">0</span> <span class=\"k\">?</span> colIndex <span class=\"k\">:</span> tableRow<span class=\"k\">.</span>cells<span class=\"k\">.</span>length<span class=\"k\">];</span>","                    cell <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>cloneCell<span class=\"k\">(</span>sourceCell<span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">);</span> <span class=\"c\">//tableRow.insertCell(colIndex == 0 ? colIndex : tableRow.cells.length);</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>setCellContent<span class=\"k\">(</span>cell<span class=\"k\">);</span>","                    cell<span class=\"k\">.</span>setAttribute<span class=\"k\">(</span><span class=\"s\">'vAlign'</span><span class=\"k\">,</span> cell<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">'vAlign'</span><span class=\"k\">));</span>","                    preCell <span class=\"k\">&amp;&amp;</span> cell<span class=\"k\">.</span>setAttribute<span class=\"k\">(</span><span class=\"s\">'width'</span><span class=\"k\">,</span> preCell<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">'width'</span><span class=\"k\">));</span>","                    <span class=\"k\">if</span> <span class=\"k\">(!</span>colIndex<span class=\"k\">)</span> <span class=\"k\">{</span>","                        tableRow<span class=\"k\">.</span>insertBefore<span class=\"k\">(</span>cell<span class=\"k\">,</span> tableRow<span class=\"k\">.</span>cells<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]);</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        domUtils<span class=\"k\">.</span>insertAfter<span class=\"k\">(</span>tableRow<span class=\"k\">.</span>cells<span class=\"k\">[</span>tableRow<span class=\"k\">.</span>cells<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">],</span> cell<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                    replaceTdToTh<span class=\"k\">(</span>rowIndex<span class=\"k\">,</span> cell<span class=\"k\">,</span> tableRow<span class=\"k\">)</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                <span class=\"k\">for</span> <span class=\"k\">(;</span> rowIndex <span class=\"k\">&lt;</span> rowsNum<span class=\"k\">;</span> rowIndex<span class=\"k\">++)</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> cellInfo <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>indexTable<span class=\"k\">[</span>rowIndex<span class=\"k\">][</span>colIndex<span class=\"k\">];</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>cellInfo<span class=\"k\">.</span>colIndex <span class=\"k\">&lt;</span> colIndex<span class=\"k\">)</span> <span class=\"k\">{</span>","                        cell <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getCell<span class=\"k\">(</span>cellInfo<span class=\"k\">.</span>rowIndex<span class=\"k\">,</span> cellInfo<span class=\"k\">.</span>cellIndex<span class=\"k\">);</span>","                        cell<span class=\"k\">.</span>colSpan <span class=\"k\">=</span> cellInfo<span class=\"k\">.</span>colSpan <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        tableRow <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>table<span class=\"k\">.</span>rows<span class=\"k\">[</span>rowIndex<span class=\"k\">];</span>","                        preCell <span class=\"k\">=</span> tableRow<span class=\"k\">.</span>cells<span class=\"k\">[</span>cellInfo<span class=\"k\">.</span>cellIndex<span class=\"k\">];</span>","","                        cell <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>cloneCell<span class=\"k\">(</span>sourceCell<span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">);</span><span class=\"c\">//tableRow.insertCell(cellInfo.cellIndex);</span>","                        <span class=\"k\">this</span><span class=\"k\">.</span>setCellContent<span class=\"k\">(</span>cell<span class=\"k\">);</span>","                        cell<span class=\"k\">.</span>setAttribute<span class=\"k\">(</span><span class=\"s\">'vAlign'</span><span class=\"k\">,</span> cell<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">'vAlign'</span><span class=\"k\">));</span>","                        preCell <span class=\"k\">&amp;&amp;</span> cell<span class=\"k\">.</span>setAttribute<span class=\"k\">(</span><span class=\"s\">'width'</span><span class=\"k\">,</span> preCell<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">'width'</span><span class=\"k\">))</span>","                        tableRow<span class=\"k\">.</span>insertBefore<span class=\"k\">(</span>cell<span class=\"k\">,</span> preCell<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                    replaceTdToTh<span class=\"k\">(</span>rowIndex<span class=\"k\">,</span> cell<span class=\"k\">,</span> tableRow<span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            <span class=\"c\">//&#26694;&#36873;&#26102;&#25554;&#20837;&#19981;&#35302;&#21457;contentchange&#65292;&#38656;&#35201;&#25163;&#21160;&#26356;&#26032;&#32034;&#24341;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>update<span class=\"k\">();</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>updateWidth<span class=\"k\">(</span>backWidth<span class=\"k\">,</span> defaultValue <span class=\"k\">||</span> <span class=\"k\">{</span>tdPadding<span class=\"k\">:</span><span class=\"s\">10</span><span class=\"k\">,</span> tdBorder<span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">}</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        updateWidth<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>width<span class=\"k\">,</span> defaultValue<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> table <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>table<span class=\"k\">,</span>","                tmpWidth <span class=\"k\">=</span> UETable<span class=\"k\">.</span>getWidth<span class=\"k\">(</span>table<span class=\"k\">)</span> <span class=\"k\">-</span> defaultValue<span class=\"k\">.</span>tdPadding <span class=\"k\">*</span> <span class=\"s\">2</span> <span class=\"k\">-</span> defaultValue<span class=\"k\">.</span>tdBorder <span class=\"k\">+</span> width<span class=\"k\">;</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>tmpWidth <span class=\"k\">&lt;</span> table<span class=\"k\">.</span>ownerDocument<span class=\"k\">.</span>body<span class=\"k\">.</span>offsetWidth<span class=\"k\">)</span> <span class=\"k\">{</span>","                table<span class=\"k\">.</span>setAttribute<span class=\"k\">(</span><span class=\"s\">\"width\"</span><span class=\"k\">,</span> tmpWidth<span class=\"k\">);</span>","                <span class=\"k\">return</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">var</span> tds <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>table<span class=\"k\">,</span> <span class=\"s\">\"td\"</span><span class=\"k\">);</span>","            utils<span class=\"k\">.</span>each<span class=\"k\">(</span>tds<span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>td<span class=\"k\">)</span> <span class=\"k\">{</span>","                td<span class=\"k\">.</span>setAttribute<span class=\"k\">(</span><span class=\"s\">\"width\"</span><span class=\"k\">,</span> width<span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">)</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        deleteCol<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>colIndex<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> indexTable <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>indexTable<span class=\"k\">,</span>","                tableRows <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>table<span class=\"k\">.</span>rows<span class=\"k\">,</span>","                backTableWidth <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>table<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">\"width\"</span><span class=\"k\">),</span>","                backTdWidth <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span>","                rowsNum <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>rowsNum<span class=\"k\">,</span>","                cacheMap <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> rowIndex <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> rowIndex <span class=\"k\">&lt;</span> rowsNum<span class=\"k\">;)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> infoRow <span class=\"k\">=</span> indexTable<span class=\"k\">[</span>rowIndex<span class=\"k\">],</span>","                    cellInfo <span class=\"k\">=</span> infoRow<span class=\"k\">[</span>colIndex<span class=\"k\">],</span>","                    key <span class=\"k\">=</span> cellInfo<span class=\"k\">.</span>rowIndex <span class=\"k\">+</span> <span class=\"s\">'_'</span> <span class=\"k\">+</span> cellInfo<span class=\"k\">.</span>colIndex<span class=\"k\">;</span>","                <span class=\"c\">// &#36339;&#36807;&#24050;&#32463;&#22788;&#29702;&#36807;&#30340;Cell</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>cacheMap<span class=\"k\">[</span>key<span class=\"k\">])</span><span class=\"k\">continue</span><span class=\"k\">;</span>","                cacheMap<span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","                <span class=\"k\">var</span> cell <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getCell<span class=\"k\">(</span>cellInfo<span class=\"k\">.</span>rowIndex<span class=\"k\">,</span> cellInfo<span class=\"k\">.</span>cellIndex<span class=\"k\">);</span>","                <span class=\"k\">if</span> <span class=\"k\">(!</span>backTdWidth<span class=\"k\">)</span> backTdWidth <span class=\"k\">=</span> cell <span class=\"k\">&amp;&amp;</span> parseInt<span class=\"k\">(</span>cell<span class=\"k\">.</span>offsetWidth <span class=\"k\">/</span> cell<span class=\"k\">.</span>colSpan<span class=\"k\">,</span> <span class=\"s\">10</span><span class=\"k\">).</span>toFixed<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">);</span>","                <span class=\"c\">// &#22914;&#26524;Cell&#30340;colSpan&#22823;&#20110;1, &#23601;&#20462;&#25913;colSpan, &#21542;&#21017;&#23601;&#21024;&#25481;&#36825;&#20010;Cell</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>cell<span class=\"k\">.</span>colSpan <span class=\"k\">&gt;</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    cell<span class=\"k\">.</span>colSpan<span class=\"k\">--;</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    tableRows<span class=\"k\">[</span>rowIndex<span class=\"k\">].</span>deleteCell<span class=\"k\">(</span>cellInfo<span class=\"k\">.</span>cellIndex<span class=\"k\">);</span>","                <span class=\"k\">}</span>","                rowIndex <span class=\"k\">+=</span> cellInfo<span class=\"k\">.</span>rowSpan <span class=\"k\">||</span> <span class=\"s\">1</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>table<span class=\"k\">.</span>setAttribute<span class=\"k\">(</span><span class=\"s\">\"width\"</span><span class=\"k\">,</span> backTableWidth <span class=\"k\">-</span> backTdWidth<span class=\"k\">);</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>update<span class=\"k\">();</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        splitToCells<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>cell<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> me <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">,</span>","                cells <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>splitToRows<span class=\"k\">(</span>cell<span class=\"k\">);</span>","            utils<span class=\"k\">.</span>each<span class=\"k\">(</span>cells<span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>cell<span class=\"k\">)</span> <span class=\"k\">{</span>","                me<span class=\"k\">.</span>splitToCols<span class=\"k\">(</span>cell<span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">)</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        splitToRows<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>cell<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> cellInfo <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getCellInfo<span class=\"k\">(</span>cell<span class=\"k\">),</span>","                rowIndex <span class=\"k\">=</span> cellInfo<span class=\"k\">.</span>rowIndex<span class=\"k\">,</span>","                colIndex <span class=\"k\">=</span> cellInfo<span class=\"k\">.</span>colIndex<span class=\"k\">,</span>","                results <span class=\"k\">=</span> <span class=\"k\">[];</span>","            <span class=\"c\">// &#20462;&#25913;Cell&#30340;rowSpan</span>","            cell<span class=\"k\">.</span>rowSpan <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","            results<span class=\"k\">.</span>push<span class=\"k\">(</span>cell<span class=\"k\">);</span>","            <span class=\"c\">// &#34917;&#40784;&#21333;&#20803;&#26684;</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> rowIndex<span class=\"k\">,</span> endRow <span class=\"k\">=</span> rowIndex <span class=\"k\">+</span> cellInfo<span class=\"k\">.</span>rowSpan<span class=\"k\">;</span> i <span class=\"k\">&lt;</span> endRow<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>i <span class=\"k\">==</span> rowIndex<span class=\"k\">)</span><span class=\"k\">continue</span><span class=\"k\">;</span>","                <span class=\"k\">var</span> tableRow <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>table<span class=\"k\">.</span>rows<span class=\"k\">[</span>i<span class=\"k\">],</span>","                    tmpCell <span class=\"k\">=</span> tableRow<span class=\"k\">.</span>insertCell<span class=\"k\">(</span>colIndex <span class=\"k\">-</span> <span class=\"k\">this</span><span class=\"k\">.</span>getPreviewMergedCellsNum<span class=\"k\">(</span>i<span class=\"k\">,</span> colIndex<span class=\"k\">));</span>","                tmpCell<span class=\"k\">.</span>colSpan <span class=\"k\">=</span> cellInfo<span class=\"k\">.</span>colSpan<span class=\"k\">;</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>setCellContent<span class=\"k\">(</span>tmpCell<span class=\"k\">);</span>","                tmpCell<span class=\"k\">.</span>setAttribute<span class=\"k\">(</span><span class=\"s\">'vAlign'</span><span class=\"k\">,</span> cell<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">'vAlign'</span><span class=\"k\">));</span>","                tmpCell<span class=\"k\">.</span>setAttribute<span class=\"k\">(</span><span class=\"s\">'align'</span><span class=\"k\">,</span> cell<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">'align'</span><span class=\"k\">));</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>cell<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText<span class=\"k\">)</span> <span class=\"k\">{</span>","                    tmpCell<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText <span class=\"k\">=</span> cell<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText<span class=\"k\">;</span>","                <span class=\"k\">}</span>","                results<span class=\"k\">.</span>push<span class=\"k\">(</span>tmpCell<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>update<span class=\"k\">();</span>","            <span class=\"k\">return</span> results<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        getPreviewMergedCellsNum<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>rowIndex<span class=\"k\">,</span> colIndex<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> indexRow <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>indexTable<span class=\"k\">[</span>rowIndex<span class=\"k\">],</span>","                num <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> colIndex<span class=\"k\">;)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> colSpan <span class=\"k\">=</span> indexRow<span class=\"k\">[</span>i<span class=\"k\">].</span>colSpan<span class=\"k\">,</span>","                    tmpRowIndex <span class=\"k\">=</span> indexRow<span class=\"k\">[</span>i<span class=\"k\">].</span>rowIndex<span class=\"k\">;</span>","                num <span class=\"k\">+=</span> <span class=\"k\">(</span>colSpan <span class=\"k\">-</span> <span class=\"k\">(</span>tmpRowIndex <span class=\"k\">==</span> rowIndex <span class=\"k\">?</span> <span class=\"s\">1</span> <span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">));</span>","                i <span class=\"k\">+=</span> colSpan<span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> num<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        splitToCols<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>cell<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> backWidth <span class=\"k\">=</span> <span class=\"k\">(</span>cell<span class=\"k\">.</span>offsetWidth <span class=\"k\">/</span> cell<span class=\"k\">.</span>colSpan <span class=\"k\">-</span> <span class=\"s\">22</span><span class=\"k\">).</span>toFixed<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">),</span>","","                cellInfo <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getCellInfo<span class=\"k\">(</span>cell<span class=\"k\">),</span>","                rowIndex <span class=\"k\">=</span> cellInfo<span class=\"k\">.</span>rowIndex<span class=\"k\">,</span>","                colIndex <span class=\"k\">=</span> cellInfo<span class=\"k\">.</span>colIndex<span class=\"k\">,</span>","                results <span class=\"k\">=</span> <span class=\"k\">[];</span>","            <span class=\"c\">// &#20462;&#25913;Cell&#30340;rowSpan</span>","            cell<span class=\"k\">.</span>colSpan <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","            cell<span class=\"k\">.</span>setAttribute<span class=\"k\">(</span><span class=\"s\">\"width\"</span><span class=\"k\">,</span> backWidth<span class=\"k\">);</span>","            results<span class=\"k\">.</span>push<span class=\"k\">(</span>cell<span class=\"k\">);</span>","            <span class=\"c\">// &#34917;&#40784;&#21333;&#20803;&#26684;</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> j <span class=\"k\">=</span> colIndex<span class=\"k\">,</span> endCol <span class=\"k\">=</span> colIndex <span class=\"k\">+</span> cellInfo<span class=\"k\">.</span>colSpan<span class=\"k\">;</span> j <span class=\"k\">&lt;</span> endCol<span class=\"k\">;</span> j<span class=\"k\">++)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>j <span class=\"k\">==</span> colIndex<span class=\"k\">)</span><span class=\"k\">continue</span><span class=\"k\">;</span>","                <span class=\"k\">var</span> tableRow <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>table<span class=\"k\">.</span>rows<span class=\"k\">[</span>rowIndex<span class=\"k\">],</span>","                    tmpCell <span class=\"k\">=</span> tableRow<span class=\"k\">.</span>insertCell<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>indexTable<span class=\"k\">[</span>rowIndex<span class=\"k\">][</span>j<span class=\"k\">].</span>cellIndex <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">);</span>","                tmpCell<span class=\"k\">.</span>rowSpan <span class=\"k\">=</span> cellInfo<span class=\"k\">.</span>rowSpan<span class=\"k\">;</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>setCellContent<span class=\"k\">(</span>tmpCell<span class=\"k\">);</span>","                tmpCell<span class=\"k\">.</span>setAttribute<span class=\"k\">(</span><span class=\"s\">'vAlign'</span><span class=\"k\">,</span> cell<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">'vAlign'</span><span class=\"k\">));</span>","                tmpCell<span class=\"k\">.</span>setAttribute<span class=\"k\">(</span><span class=\"s\">'align'</span><span class=\"k\">,</span> cell<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">'align'</span><span class=\"k\">));</span>","                tmpCell<span class=\"k\">.</span>setAttribute<span class=\"k\">(</span><span class=\"s\">'width'</span><span class=\"k\">,</span> backWidth<span class=\"k\">);</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>cell<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText<span class=\"k\">)</span> <span class=\"k\">{</span>","                    tmpCell<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText <span class=\"k\">=</span> cell<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText<span class=\"k\">;</span>","                <span class=\"k\">}</span>","                <span class=\"c\">//&#22788;&#29702;th&#30340;&#24773;&#20917;</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>cell<span class=\"k\">.</span>tagName <span class=\"k\">==</span> <span class=\"s\">'TH'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> th <span class=\"k\">=</span> cell<span class=\"k\">.</span>ownerDocument<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">'th'</span><span class=\"k\">);</span>","                    th<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>tmpCell<span class=\"k\">.</span>firstChild<span class=\"k\">);</span>","                    th<span class=\"k\">.</span>setAttribute<span class=\"k\">(</span><span class=\"s\">'vAlign'</span><span class=\"k\">,</span> cell<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">'vAlign'</span><span class=\"k\">));</span>","                    th<span class=\"k\">.</span>rowSpan <span class=\"k\">=</span> tmpCell<span class=\"k\">.</span>rowSpan<span class=\"k\">;</span>","                    tableRow<span class=\"k\">.</span>insertBefore<span class=\"k\">(</span>th<span class=\"k\">,</span> tmpCell<span class=\"k\">);</span>","                    domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>tmpCell<span class=\"k\">);</span>","                <span class=\"k\">}</span>","                results<span class=\"k\">.</span>push<span class=\"k\">(</span>tmpCell<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>update<span class=\"k\">();</span>","            <span class=\"k\">return</span> results<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        isLastCell<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>cell<span class=\"k\">,</span> rowsNum<span class=\"k\">,</span> colsNum<span class=\"k\">)</span> <span class=\"k\">{</span>","            rowsNum <span class=\"k\">=</span> rowsNum <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>rowsNum<span class=\"k\">;</span>","            colsNum <span class=\"k\">=</span> colsNum <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>colsNum<span class=\"k\">;</span>","            <span class=\"k\">var</span> cellInfo <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getCellInfo<span class=\"k\">(</span>cell<span class=\"k\">);</span>","            <span class=\"k\">return</span> <span class=\"k\">((</span>cellInfo<span class=\"k\">.</span>rowIndex <span class=\"k\">+</span> cellInfo<span class=\"k\">.</span>rowSpan<span class=\"k\">)</span> <span class=\"k\">==</span> rowsNum<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span>","                <span class=\"k\">((</span>cellInfo<span class=\"k\">.</span>colIndex <span class=\"k\">+</span> cellInfo<span class=\"k\">.</span>colSpan<span class=\"k\">)</span> <span class=\"k\">==</span> colsNum<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        getLastCell<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>cells<span class=\"k\">)</span> <span class=\"k\">{</span>","            cells <span class=\"k\">=</span> cells <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>table<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span><span class=\"s\">\"td\"</span><span class=\"k\">);</span>","            <span class=\"k\">var</span> firstInfo <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getCellInfo<span class=\"k\">(</span>cells<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]);</span>","            <span class=\"k\">var</span> me <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">,</span> last <span class=\"k\">=</span> cells<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">],</span>","                tr <span class=\"k\">=</span> last<span class=\"k\">.</span>parentNode<span class=\"k\">,</span>","                cellsNum <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> cols <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> rows<span class=\"k\">;</span>","            utils<span class=\"k\">.</span>each<span class=\"k\">(</span>cells<span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>cell<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>cell<span class=\"k\">.</span>parentNode <span class=\"k\">==</span> tr<span class=\"k\">)</span>cols <span class=\"k\">+=</span> cell<span class=\"k\">.</span>colSpan <span class=\"k\">||</span> <span class=\"s\">1</span><span class=\"k\">;</span>","                cellsNum <span class=\"k\">+=</span> cell<span class=\"k\">.</span>rowSpan <span class=\"k\">*</span> cell<span class=\"k\">.</span>colSpan <span class=\"k\">||</span> <span class=\"s\">1</span><span class=\"k\">;</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","            rows <span class=\"k\">=</span> cellsNum <span class=\"k\">/</span> cols<span class=\"k\">;</span>","            utils<span class=\"k\">.</span>each<span class=\"k\">(</span>cells<span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>cell<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>me<span class=\"k\">.</span>isLastCell<span class=\"k\">(</span>cell<span class=\"k\">,</span> rows<span class=\"k\">,</span> cols<span class=\"k\">))</span> <span class=\"k\">{</span>","                    last <span class=\"k\">=</span> cell<span class=\"k\">;</span>","                    <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">return</span> last<span class=\"k\">;</span>","","        <span class=\"k\">}</span><span class=\"k\">,</span>","        selectRow<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>rowIndex<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> indexRow <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>indexTable<span class=\"k\">[</span>rowIndex<span class=\"k\">],</span>","                start <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getCell<span class=\"k\">(</span>indexRow<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>rowIndex<span class=\"k\">,</span> indexRow<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>cellIndex<span class=\"k\">),</span>","                end <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getCell<span class=\"k\">(</span>indexRow<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>colsNum <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">].</span>rowIndex<span class=\"k\">,</span> indexRow<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>colsNum <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">].</span>cellIndex<span class=\"k\">),</span>","                range <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getCellsRange<span class=\"k\">(</span>start<span class=\"k\">,</span> end<span class=\"k\">);</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>setSelected<span class=\"k\">(</span>range<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        selectTable<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> tds <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>table<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span><span class=\"s\">\"td\"</span><span class=\"k\">),</span>","                range <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getCellsRange<span class=\"k\">(</span>tds<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">],</span> tds<span class=\"k\">[</span>tds<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">]);</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>setSelected<span class=\"k\">(</span>range<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        sortTable<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>sortByCellIndex<span class=\"k\">,</span> compareFn<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> table <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>table<span class=\"k\">,</span>","                rows <span class=\"k\">=</span> table<span class=\"k\">.</span>rows<span class=\"k\">,</span>","                trArray <span class=\"k\">=</span> <span class=\"k\">[],</span>","                flag <span class=\"k\">=</span> rows<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>cells<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>tagName <span class=\"k\">===</span> <span class=\"s\">\"TH\"</span><span class=\"k\">,</span>","                lastRowIndex <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>selectedTds<span class=\"k\">.</span>length<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> range <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>cellsRange<span class=\"k\">,</span>","                    len <span class=\"k\">=</span> range<span class=\"k\">.</span>endRowIndex <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">;</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> range<span class=\"k\">.</span>beginRowIndex<span class=\"k\">;</span> i <span class=\"k\">&lt;</span> len<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                    trArray<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">=</span> rows<span class=\"k\">[</span>i<span class=\"k\">];</span>","                <span class=\"k\">}</span>","                trArray<span class=\"k\">.</span>splice<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span>range<span class=\"k\">.</span>beginRowIndex<span class=\"k\">);</span>","                lastRowIndex <span class=\"k\">=</span> <span class=\"k\">(</span>range<span class=\"k\">.</span>endRowIndex <span class=\"k\">+</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"k\">this</span><span class=\"k\">.</span>rowsNum <span class=\"k\">?</span> <span class=\"s\">0</span> <span class=\"k\">:</span> range<span class=\"k\">.</span>endRowIndex <span class=\"k\">+</span><span class=\"s\">1</span><span class=\"k\">;</span>","            <span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span>len <span class=\"k\">=</span> rows<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">&lt;</span> len<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                    trArray<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">=</span> rows<span class=\"k\">[</span>i<span class=\"k\">];</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            <span class=\"c\">//th&#19981;&#21442;&#19982;&#25490;&#24207;</span>","            flag <span class=\"k\">&amp;&amp;</span> trArray<span class=\"k\">.</span>splice<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">);</span>","            trArray <span class=\"k\">=</span> utils<span class=\"k\">.</span>sort<span class=\"k\">(</span>trArray<span class=\"k\">,</span><span class=\"k\">function</span> <span class=\"k\">(</span>tr1<span class=\"k\">,</span> tr2<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> txt <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>node<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">return</span> node<span class=\"k\">.</span>innerText<span class=\"k\">||</span>node<span class=\"k\">.</span>textContent<span class=\"k\">;</span>","                <span class=\"k\">}</span><span class=\"k\">;</span>","                <span class=\"k\">return</span> compareFn <span class=\"k\">?</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> compareFn <span class=\"k\">===</span> <span class=\"s\">\"number\"</span> <span class=\"k\">?</span> compareFn <span class=\"k\">:</span> compareFn<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> tr1<span class=\"k\">.</span>cells<span class=\"k\">[</span>sortByCellIndex<span class=\"k\">],</span> tr2<span class=\"k\">.</span>cells<span class=\"k\">[</span>sortByCellIndex<span class=\"k\">]))</span> <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> value1 <span class=\"k\">=</span> txt<span class=\"k\">(</span>tr1<span class=\"k\">.</span>cells<span class=\"k\">[</span>sortByCellIndex<span class=\"k\">]),</span>","                        value2 <span class=\"k\">=</span> txt<span class=\"k\">(</span>tr2<span class=\"k\">.</span>cells<span class=\"k\">[</span>sortByCellIndex<span class=\"k\">]);</span>","                    <span class=\"k\">return</span> value1<span class=\"k\">.</span>localeCompare<span class=\"k\">(</span>value2<span class=\"k\">);</span>","                <span class=\"k\">}</span><span class=\"k\">();</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">var</span> fragment <span class=\"k\">=</span> table<span class=\"k\">.</span>ownerDocument<span class=\"k\">.</span>createDocumentFragment<span class=\"k\">();</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> j <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> len <span class=\"k\">=</span> trArray<span class=\"k\">.</span>length<span class=\"k\">;</span> j <span class=\"k\">&lt;</span> len<span class=\"k\">;</span> j<span class=\"k\">++)</span> <span class=\"k\">{</span>","                fragment<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>trArray<span class=\"k\">[</span>j<span class=\"k\">]);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">var</span> tbody <span class=\"k\">=</span> table<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span><span class=\"s\">\"tbody\"</span><span class=\"k\">)[</span><span class=\"s\">0</span><span class=\"k\">];</span>","            <span class=\"k\">if</span><span class=\"k\">(!</span>lastRowIndex<span class=\"k\">)</span><span class=\"k\">{</span>","                tbody<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>fragment<span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>","                tbody<span class=\"k\">.</span>insertBefore<span class=\"k\">(</span>fragment<span class=\"k\">,</span>rows<span class=\"k\">[</span>lastRowIndex<span class=\"k\">-</span> range<span class=\"k\">.</span>endRowIndex <span class=\"k\">+</span> range<span class=\"k\">.</span>beginRowIndex <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">])</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        setBackground<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>cells<span class=\"k\">,</span> value<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> value <span class=\"k\">===</span> <span class=\"s\">\"string\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                utils<span class=\"k\">.</span>each<span class=\"k\">(</span>cells<span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>cell<span class=\"k\">)</span> <span class=\"k\">{</span>","                    cell<span class=\"k\">.</span>style<span class=\"k\">.</span>backgroundColor <span class=\"k\">=</span> value<span class=\"k\">;</span>","                <span class=\"k\">}</span><span class=\"k\">)</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> value <span class=\"k\">===</span> <span class=\"s\">\"object\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                value <span class=\"k\">=</span> utils<span class=\"k\">.</span>extend<span class=\"k\">(</span><span class=\"k\">{</span>","                    repeat<span class=\"k\">:</span><span class=\"k\">true</span><span class=\"k\">,</span>","                    colorList<span class=\"k\">:[</span><span class=\"s\">\"#ddd\"</span><span class=\"k\">,</span> <span class=\"s\">\"#fff\"</span><span class=\"k\">]</span>","                <span class=\"k\">}</span><span class=\"k\">,</span> value<span class=\"k\">);</span>","                <span class=\"k\">var</span> rowIndex <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getCellInfo<span class=\"k\">(</span>cells<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]).</span>rowIndex<span class=\"k\">,</span>","                    count <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span>","                    colors <span class=\"k\">=</span> value<span class=\"k\">.</span>colorList<span class=\"k\">,</span>","                    getColor <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>list<span class=\"k\">,</span> index<span class=\"k\">,</span> repeat<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">return</span> list<span class=\"k\">[</span>index<span class=\"k\">]</span> <span class=\"k\">?</span> list<span class=\"k\">[</span>index<span class=\"k\">]</span> <span class=\"k\">:</span> repeat <span class=\"k\">?</span> list<span class=\"k\">[</span>index <span class=\"k\">%</span> list<span class=\"k\">.</span>length<span class=\"k\">]</span> <span class=\"k\">:</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span><span class=\"k\">;</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> cell<span class=\"k\">;</span> cell <span class=\"k\">=</span> cells<span class=\"k\">[</span>i<span class=\"k\">++];)</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> cellInfo <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getCellInfo<span class=\"k\">(</span>cell<span class=\"k\">);</span>","                    cell<span class=\"k\">.</span>style<span class=\"k\">.</span>backgroundColor <span class=\"k\">=</span> getColor<span class=\"k\">(</span>colors<span class=\"k\">,</span> <span class=\"k\">((</span>rowIndex <span class=\"k\">+</span> count<span class=\"k\">)</span> <span class=\"k\">==</span> cellInfo<span class=\"k\">.</span>rowIndex<span class=\"k\">)</span> <span class=\"k\">?</span> count <span class=\"k\">:</span> <span class=\"k\">++</span>count<span class=\"k\">,</span> value<span class=\"k\">.</span>repeat<span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        removeBackground<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>cells<span class=\"k\">)</span> <span class=\"k\">{</span>","            utils<span class=\"k\">.</span>each<span class=\"k\">(</span>cells<span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>cell<span class=\"k\">)</span> <span class=\"k\">{</span>","                cell<span class=\"k\">.</span>style<span class=\"k\">.</span>backgroundColor <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","            <span class=\"k\">}</span><span class=\"k\">)</span>","        <span class=\"k\">}</span>","","","    <span class=\"k\">}</span><span class=\"k\">;</span>","    <span class=\"k\">function</span> showError<span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">)();</span>"];
_$jscoverage['plugins/table.core.js'][13]++;
(function () {
  _$jscoverage['plugins/table.core.js'][14]++;
  var UETable = (UE.UETable = (function (table) {
  _$jscoverage['plugins/table.core.js'][15]++;
  this.table = table;
  _$jscoverage['plugins/table.core.js'][16]++;
  this.indexTable = [];
  _$jscoverage['plugins/table.core.js'][17]++;
  this.selectedTds = [];
  _$jscoverage['plugins/table.core.js'][18]++;
  this.cellsRange = {};
  _$jscoverage['plugins/table.core.js'][19]++;
  this.update(table);
}));
  _$jscoverage['plugins/table.core.js'][23]++;
  UETable.removeSelectedClass = (function (cells) {
  _$jscoverage['plugins/table.core.js'][24]++;
  utils.each(cells, (function (cell) {
  _$jscoverage['plugins/table.core.js'][25]++;
  domUtils.removeClasses(cell, "selectTdClass");
}));
});
  _$jscoverage['plugins/table.core.js'][28]++;
  UETable.addSelectedClass = (function (cells) {
  _$jscoverage['plugins/table.core.js'][29]++;
  utils.each(cells, (function (cell) {
  _$jscoverage['plugins/table.core.js'][30]++;
  domUtils.addClass(cell, "selectTdClass");
}));
});
  _$jscoverage['plugins/table.core.js'][33]++;
  UETable.isEmptyBlock = (function (node) {
  _$jscoverage['plugins/table.core.js'][34]++;
  var reg = new RegExp(domUtils.fillChar, "g");
  _$jscoverage['plugins/table.core.js'][35]++;
  if ((node[(browser.ie? "innerText": "textContent")].replace(/^\s*$/, "").replace(reg, "").length > 0)) {
    _$jscoverage['plugins/table.core.js'][36]++;
    return 0;
  }
  _$jscoverage['plugins/table.core.js'][38]++;
  for (var i in dtd.$isNotEmpty) {
    _$jscoverage['plugins/table.core.js'][38]++;
    if (dtd.$isNotEmpty.hasOwnProperty(i)) {
      _$jscoverage['plugins/table.core.js'][39]++;
      if (node.getElementsByTagName(i).length) {
        _$jscoverage['plugins/table.core.js'][40]++;
        return 0;
      }
    }
}
  _$jscoverage['plugins/table.core.js'][43]++;
  return 1;
});
  _$jscoverage['plugins/table.core.js'][45]++;
  UETable.getWidth = (function (cell) {
  _$jscoverage['plugins/table.core.js'][46]++;
  if ((! cell)) {
    _$jscoverage['plugins/table.core.js'][46]++;
    return 0;
  }
  _$jscoverage['plugins/table.core.js'][47]++;
  return parseInt(domUtils.getComputedStyle(cell, "width"), 10);
});
  _$jscoverage['plugins/table.core.js'][54]++;
  UETable.getTableItemsByRange = (function (editor) {
  _$jscoverage['plugins/table.core.js'][55]++;
  var start = editor.selection.getStart(), cell = (start && domUtils.findParentByTagName(start, ["td", "th"], true)), tr = (cell && cell.parentNode), caption = (start && domUtils.findParentByTagName(start, "caption", true)), table = (caption? caption.parentNode: (tr && tr.parentNode.parentNode));
  _$jscoverage['plugins/table.core.js'][62]++;
  return ({cell: cell, tr: tr, table: table, caption: caption});
});
  _$jscoverage['plugins/table.core.js'][69]++;
  UETable.getUETableBySelected = (function (editor) {
  _$jscoverage['plugins/table.core.js'][70]++;
  var table = UETable.getTableItemsByRange(editor).table;
  _$jscoverage['plugins/table.core.js'][71]++;
  if ((table && table.ueTable && table.ueTable.selectedTds.length)) {
    _$jscoverage['plugins/table.core.js'][72]++;
    return table.ueTable;
  }
  _$jscoverage['plugins/table.core.js'][74]++;
  return null;
});
  _$jscoverage['plugins/table.core.js'][77]++;
  UETable.getDefaultValue = (function (editor, table) {
  _$jscoverage['plugins/table.core.js'][78]++;
  var borderMap = {thin: "0px", medium: "1px", thick: "2px"}, tableBorder, tdPadding, tdBorder, tmpValue;
  _$jscoverage['plugins/table.core.js'][84]++;
  if ((! table)) {
    _$jscoverage['plugins/table.core.js'][85]++;
    table = editor.document.createElement("table");
    _$jscoverage['plugins/table.core.js'][86]++;
    table.insertRow(0).insertCell(0).innerHTML = "xxx";
    _$jscoverage['plugins/table.core.js'][87]++;
    editor.body.appendChild(table);
    _$jscoverage['plugins/table.core.js'][88]++;
    var td = table.getElementsByTagName("td")[0];
    _$jscoverage['plugins/table.core.js'][89]++;
    tmpValue = domUtils.getComputedStyle(table, "border-left-width");
    _$jscoverage['plugins/table.core.js'][90]++;
    tableBorder = parseInt((borderMap[tmpValue] || tmpValue), 10);
    _$jscoverage['plugins/table.core.js'][91]++;
    tmpValue = domUtils.getComputedStyle(td, "padding-left");
    _$jscoverage['plugins/table.core.js'][92]++;
    tdPadding = parseInt((borderMap[tmpValue] || tmpValue), 10);
    _$jscoverage['plugins/table.core.js'][93]++;
    tmpValue = domUtils.getComputedStyle(td, "border-left-width");
    _$jscoverage['plugins/table.core.js'][94]++;
    tdBorder = parseInt((borderMap[tmpValue] || tmpValue), 10);
    _$jscoverage['plugins/table.core.js'][95]++;
    domUtils.remove(table);
    _$jscoverage['plugins/table.core.js'][96]++;
    return ({tableBorder: tableBorder, tdPadding: tdPadding, tdBorder: tdBorder});
  }
  else {
    _$jscoverage['plugins/table.core.js'][102]++;
    td = table.getElementsByTagName("td")[0];
    _$jscoverage['plugins/table.core.js'][103]++;
    tmpValue = domUtils.getComputedStyle(table, "border-left-width");
    _$jscoverage['plugins/table.core.js'][104]++;
    tableBorder = parseInt((borderMap[tmpValue] || tmpValue), 10);
    _$jscoverage['plugins/table.core.js'][105]++;
    tmpValue = domUtils.getComputedStyle(td, "padding-left");
    _$jscoverage['plugins/table.core.js'][106]++;
    tdPadding = parseInt((borderMap[tmpValue] || tmpValue), 10);
    _$jscoverage['plugins/table.core.js'][107]++;
    tmpValue = domUtils.getComputedStyle(td, "border-left-width");
    _$jscoverage['plugins/table.core.js'][108]++;
    tdBorder = parseInt((borderMap[tmpValue] || tmpValue), 10);
    _$jscoverage['plugins/table.core.js'][109]++;
    return ({tableBorder: tableBorder, tdPadding: tdPadding, tdBorder: tdBorder});
  }
});
  _$jscoverage['plugins/table.core.js'][120]++;
  UETable.getUETable = (function (tdOrTable) {
  _$jscoverage['plugins/table.core.js'][121]++;
  var tag = tdOrTable.tagName.toLowerCase();
  _$jscoverage['plugins/table.core.js'][122]++;
  tdOrTable = (((tag == "td") || (tag == "th") || (tag == "caption"))? domUtils.findParentByTagName(tdOrTable, "table", true): tdOrTable);
  _$jscoverage['plugins/table.core.js'][123]++;
  if ((! tdOrTable.ueTable)) {
    _$jscoverage['plugins/table.core.js'][124]++;
    tdOrTable.ueTable = new UETable(tdOrTable);
  }
  _$jscoverage['plugins/table.core.js'][126]++;
  return tdOrTable.ueTable;
});
  _$jscoverage['plugins/table.core.js'][129]++;
  UETable.cloneCell = (function (cell, ignoreMerge) {
  _$jscoverage['plugins/table.core.js'][130]++;
  if (((! cell) || utils.isString(cell))) {
    _$jscoverage['plugins/table.core.js'][131]++;
    return this.table.ownerDocument.createElement((cell || "td"));
  }
  _$jscoverage['plugins/table.core.js'][133]++;
  var flag = domUtils.hasClass(cell, "selectTdClass");
  _$jscoverage['plugins/table.core.js'][134]++;
  (flag && domUtils.removeClasses(cell, "selectTdClass"));
  _$jscoverage['plugins/table.core.js'][135]++;
  var tmpCell = cell.cloneNode(true);
  _$jscoverage['plugins/table.core.js'][136]++;
  if (ignoreMerge) {
    _$jscoverage['plugins/table.core.js'][137]++;
    tmpCell.rowSpan = (tmpCell.colSpan = 1);
  }
  _$jscoverage['plugins/table.core.js'][139]++;
  tmpCell.style.borderLeftStyle = "";
  _$jscoverage['plugins/table.core.js'][140]++;
  tmpCell.style.borderTopStyle = "";
  _$jscoverage['plugins/table.core.js'][141]++;
  tmpCell.style.borderLeftColor = cell.style.borderRightColor;
  _$jscoverage['plugins/table.core.js'][142]++;
  tmpCell.style.borderLeftWidth = cell.style.borderRightWidth;
  _$jscoverage['plugins/table.core.js'][143]++;
  tmpCell.style.borderTopColor = cell.style.borderBottomColor;
  _$jscoverage['plugins/table.core.js'][144]++;
  tmpCell.style.borderTopWidth = cell.style.borderBottomWidth;
  _$jscoverage['plugins/table.core.js'][145]++;
  (flag && domUtils.addClass(cell, "selectTdClass"));
  _$jscoverage['plugins/table.core.js'][146]++;
  return tmpCell;
});
  _$jscoverage['plugins/table.core.js'][149]++;
  UETable.prototype = {getMaxRows: (function () {
  _$jscoverage['plugins/table.core.js'][151]++;
  var rows = this.table.rows, maxLen = 1;
  _$jscoverage['plugins/table.core.js'][152]++;
  for (var i = 0, row; (row = rows[i]); (i++)) {
    _$jscoverage['plugins/table.core.js'][153]++;
    var currentMax = 1;
    _$jscoverage['plugins/table.core.js'][154]++;
    for (var j = 0, cj; (cj = row.cells[(j++)]);) {
      _$jscoverage['plugins/table.core.js'][155]++;
      currentMax = Math.max((cj.rowSpan || 1), currentMax);
}
    _$jscoverage['plugins/table.core.js'][157]++;
    maxLen = Math.max((currentMax + i), maxLen);
}
  _$jscoverage['plugins/table.core.js'][159]++;
  return maxLen;
}), getMaxCols: (function () {
  _$jscoverage['plugins/table.core.js'][165]++;
  var rows = this.table.rows, maxLen = 0, cellRows = {};
  _$jscoverage['plugins/table.core.js'][166]++;
  for (var i = 0, row; (row = rows[i]); (i++)) {
    _$jscoverage['plugins/table.core.js'][167]++;
    var cellsNum = 0;
    _$jscoverage['plugins/table.core.js'][168]++;
    for (var j = 0, cj; (cj = row.cells[(j++)]);) {
      _$jscoverage['plugins/table.core.js'][169]++;
      cellsNum += (cj.colSpan || 1);
      _$jscoverage['plugins/table.core.js'][170]++;
      if ((cj.rowSpan && (cj.rowSpan > 1))) {
        _$jscoverage['plugins/table.core.js'][171]++;
        for (var k = 1; (k < cj.rowSpan); (k++)) {
          _$jscoverage['plugins/table.core.js'][172]++;
          if ((! cellRows[("row_" + (i + k))])) {
            _$jscoverage['plugins/table.core.js'][173]++;
            cellRows[("row_" + (i + k))] = (cj.colSpan || 1);
          }
          else {
            _$jscoverage['plugins/table.core.js'][175]++;
            (cellRows[("row_" + (i + k))]++);
          }
}
      }
}
    _$jscoverage['plugins/table.core.js'][181]++;
    cellsNum += (cellRows[("row_" + i)] || 0);
    _$jscoverage['plugins/table.core.js'][182]++;
    maxLen = Math.max(cellsNum, maxLen);
}
  _$jscoverage['plugins/table.core.js'][184]++;
  return maxLen;
}), getCellColIndex: (function (cell) {
}), getHSideCell: (function (cell, right) {
  _$jscoverage['plugins/table.core.js'][195]++;
  try {
    _$jscoverage['plugins/table.core.js'][196]++;
    var cellInfo = this.getCellInfo(cell), previewRowIndex, previewColIndex;
    _$jscoverage['plugins/table.core.js'][198]++;
    var len = this.selectedTds.length, range = this.cellsRange;
    _$jscoverage['plugins/table.core.js'][201]++;
    if ((((! right) && ((! len)? (! cellInfo.colIndex): (! range.beginColIndex))) || (right && ((! len)? (cellInfo.colIndex == (this.colsNum - 1)): (range.endColIndex == (this.colsNum - 1)))))) {
      _$jscoverage['plugins/table.core.js'][201]++;
      return null;
    }
    _$jscoverage['plugins/table.core.js'][203]++;
    previewRowIndex = ((! len)? cellInfo.rowIndex: range.beginRowIndex);
    _$jscoverage['plugins/table.core.js'][204]++;
    previewColIndex = ((! right)? ((! len)? ((cellInfo.colIndex < 1)? 0: (cellInfo.colIndex - 1)): (range.beginColIndex - 1)): ((! len)? (cellInfo.colIndex + 1): (range.endColIndex + 1)));
    _$jscoverage['plugins/table.core.js'][206]++;
    return this.getCell(this.indexTable[previewRowIndex][previewColIndex].rowIndex, this.indexTable[previewRowIndex][previewColIndex].cellIndex);
  }
  catch (e) {
    _$jscoverage['plugins/table.core.js'][208]++;
    showError(e);
  }
}), getTabNextCell: (function (cell, preRowIndex) {
  _$jscoverage['plugins/table.core.js'][212]++;
  var cellInfo = this.getCellInfo(cell), rowIndex = (preRowIndex || cellInfo.rowIndex), colIndex = (cellInfo.colIndex + 1 + (cellInfo.colSpan - 1)), nextCell;
  _$jscoverage['plugins/table.core.js'][216]++;
  try {
    _$jscoverage['plugins/table.core.js'][217]++;
    nextCell = this.getCell(this.indexTable[rowIndex][colIndex].rowIndex, this.indexTable[rowIndex][colIndex].cellIndex);
  }
  catch (e) {
    _$jscoverage['plugins/table.core.js'][219]++;
    try {
      _$jscoverage['plugins/table.core.js'][220]++;
      rowIndex = ((rowIndex * 1) + 1);
      _$jscoverage['plugins/table.core.js'][221]++;
      colIndex = 0;
      _$jscoverage['plugins/table.core.js'][222]++;
      nextCell = this.getCell(this.indexTable[rowIndex][colIndex].rowIndex, this.indexTable[rowIndex][colIndex].cellIndex);
    }
    catch (e) {
    }
  }
  _$jscoverage['plugins/table.core.js'][226]++;
  return nextCell;
}), getVSideCell: (function (cell, bottom, ignoreRange) {
  _$jscoverage['plugins/table.core.js'][235]++;
  try {
    _$jscoverage['plugins/table.core.js'][236]++;
    var cellInfo = this.getCellInfo(cell), nextRowIndex, nextColIndex;
    _$jscoverage['plugins/table.core.js'][238]++;
    var len = (this.selectedTds.length && (! ignoreRange)), range = this.cellsRange;
    _$jscoverage['plugins/table.core.js'][241]++;
    if ((((! bottom) && (cellInfo.rowIndex == 0)) || (bottom && ((! len)? ((cellInfo.rowIndex + cellInfo.rowSpan) > (this.rowsNum - 1)): (range.endRowIndex == (this.rowsNum - 1)))))) {
      _$jscoverage['plugins/table.core.js'][241]++;
      return null;
    }
    _$jscoverage['plugins/table.core.js'][243]++;
    nextRowIndex = ((! bottom)? ((! len)? (cellInfo.rowIndex - 1): (range.beginRowIndex - 1)): ((! len)? (cellInfo.rowIndex + cellInfo.rowSpan): (range.endRowIndex + 1)));
    _$jscoverage['plugins/table.core.js'][245]++;
    nextColIndex = ((! len)? cellInfo.colIndex: range.beginColIndex);
    _$jscoverage['plugins/table.core.js'][246]++;
    return this.getCell(this.indexTable[nextRowIndex][nextColIndex].rowIndex, this.indexTable[nextRowIndex][nextColIndex].cellIndex);
  }
  catch (e) {
    _$jscoverage['plugins/table.core.js'][248]++;
    showError(e);
  }
}), getSameEndPosCells: (function (cell, xOrY) {
  _$jscoverage['plugins/table.core.js'][255]++;
  try {
    _$jscoverage['plugins/table.core.js'][256]++;
    var flag = (xOrY.toLowerCase() === "x"), end = (domUtils.getXY(cell)[(flag? "x": "y")] + cell[("offset" + (flag? "Width": "Height"))]), rows = this.table.rows, cells = null, returns = [];
    _$jscoverage['plugins/table.core.js'][260]++;
    for (var i = 0; (i < this.rowsNum); (i++)) {
      _$jscoverage['plugins/table.core.js'][261]++;
      cells = rows[i].cells;
      _$jscoverage['plugins/table.core.js'][262]++;
      for (var j = 0, tmpCell; (tmpCell = cells[(j++)]);) {
        _$jscoverage['plugins/table.core.js'][263]++;
        var tmpEnd = (domUtils.getXY(tmpCell)[(flag? "x": "y")] + tmpCell[("offset" + (flag? "Width": "Height"))]);
        _$jscoverage['plugins/table.core.js'][265]++;
        if (((tmpEnd > end) && flag)) {
          _$jscoverage['plugins/table.core.js'][265]++;
          break;
        }
        _$jscoverage['plugins/table.core.js'][266]++;
        if (((cell == tmpCell) || (end == tmpEnd))) {
          _$jscoverage['plugins/table.core.js'][269]++;
          if ((tmpCell[(flag? "colSpan": "rowSpan")] == 1)) {
            _$jscoverage['plugins/table.core.js'][270]++;
            returns.push(tmpCell);
          }
          _$jscoverage['plugins/table.core.js'][272]++;
          if (flag) {
            _$jscoverage['plugins/table.core.js'][272]++;
            break;
          }
        }
}
}
    _$jscoverage['plugins/table.core.js'][276]++;
    return returns;
  }
  catch (e) {
    _$jscoverage['plugins/table.core.js'][278]++;
    showError(e);
  }
}), setCellContent: (function (cell, content) {
  _$jscoverage['plugins/table.core.js'][282]++;
  cell.innerHTML = (content || (browser.ie? domUtils.fillChar: "<br />"));
}), cloneCell: UETable.cloneCell, getSameStartPosXCells: (function (cell) {
  _$jscoverage['plugins/table.core.js'][289]++;
  try {
    _$jscoverage['plugins/table.core.js'][290]++;
    var start = (domUtils.getXY(cell).x + cell.offsetWidth), rows = this.table.rows, cells, returns = [];
    _$jscoverage['plugins/table.core.js'][292]++;
    for (var i = 0; (i < this.rowsNum); (i++)) {
      _$jscoverage['plugins/table.core.js'][293]++;
      cells = rows[i].cells;
      _$jscoverage['plugins/table.core.js'][294]++;
      for (var j = 0, tmpCell; (tmpCell = cells[(j++)]);) {
        _$jscoverage['plugins/table.core.js'][295]++;
        var tmpStart = domUtils.getXY(tmpCell).x;
        _$jscoverage['plugins/table.core.js'][296]++;
        if ((tmpStart > start)) {
          _$jscoverage['plugins/table.core.js'][296]++;
          break;
        }
        _$jscoverage['plugins/table.core.js'][297]++;
        if (((tmpStart == start) && (tmpCell.colSpan == 1))) {
          _$jscoverage['plugins/table.core.js'][298]++;
          returns.push(tmpCell);
          _$jscoverage['plugins/table.core.js'][299]++;
          break;
        }
}
}
    _$jscoverage['plugins/table.core.js'][303]++;
    return returns;
  }
  catch (e) {
    _$jscoverage['plugins/table.core.js'][305]++;
    showError(e);
  }
}), update: (function (table) {
  _$jscoverage['plugins/table.core.js'][312]++;
  this.table = (table || this.table);
  _$jscoverage['plugins/table.core.js'][313]++;
  this.selectedTds = [];
  _$jscoverage['plugins/table.core.js'][314]++;
  this.cellsRange = {};
  _$jscoverage['plugins/table.core.js'][315]++;
  this.indexTable = [];
  _$jscoverage['plugins/table.core.js'][316]++;
  var rows = this.table.rows, rowsNum = this.getMaxRows(), dNum = (rowsNum - rows.length), colsNum = this.getMaxCols();
  _$jscoverage['plugins/table.core.js'][320]++;
  while ((dNum--)) {
    _$jscoverage['plugins/table.core.js'][321]++;
    this.table.insertRow(rows.length);
}
  _$jscoverage['plugins/table.core.js'][323]++;
  this.rowsNum = rowsNum;
  _$jscoverage['plugins/table.core.js'][324]++;
  this.colsNum = colsNum;
  _$jscoverage['plugins/table.core.js'][325]++;
  for (var i = 0, len = rows.length; (i < len); (i++)) {
    _$jscoverage['plugins/table.core.js'][326]++;
    this.indexTable[i] = new Array(colsNum);
}
  _$jscoverage['plugins/table.core.js'][329]++;
  for (var rowIndex = 0, row; (row = rows[rowIndex]); (rowIndex++)) {
    _$jscoverage['plugins/table.core.js'][330]++;
    for (var cellIndex = 0, cell, cells = row.cells; (cell = cells[cellIndex]); (cellIndex++)) {
      _$jscoverage['plugins/table.core.js'][332]++;
      if ((cell.rowSpan > rowsNum)) {
        _$jscoverage['plugins/table.core.js'][333]++;
        cell.rowSpan = rowsNum;
      }
      _$jscoverage['plugins/table.core.js'][335]++;
      var colIndex = cellIndex, rowSpan = (cell.rowSpan || 1), colSpan = (cell.colSpan || 1);
      _$jscoverage['plugins/table.core.js'][339]++;
      while (this.indexTable[rowIndex][colIndex]) {
        _$jscoverage['plugins/table.core.js'][339]++;
        (colIndex++);
}
      _$jscoverage['plugins/table.core.js'][340]++;
      for (var j = 0; (j < rowSpan); (j++)) {
        _$jscoverage['plugins/table.core.js'][341]++;
        for (var k = 0; (k < colSpan); (k++)) {
          _$jscoverage['plugins/table.core.js'][342]++;
          this.indexTable[(rowIndex + j)][(colIndex + k)] = {rowIndex: rowIndex, cellIndex: cellIndex, colIndex: colIndex, rowSpan: rowSpan, colSpan: colSpan};
}
}
}
}
  _$jscoverage['plugins/table.core.js'][354]++;
  for (j = 0; (j < rowsNum); (j++)) {
    _$jscoverage['plugins/table.core.js'][355]++;
    for (k = 0; (k < colsNum); (k++)) {
      _$jscoverage['plugins/table.core.js'][356]++;
      if ((this.indexTable[j][k] === undefined)) {
        _$jscoverage['plugins/table.core.js'][357]++;
        row = rows[j];
        _$jscoverage['plugins/table.core.js'][358]++;
        cell = row.cells[(row.cells.length - 1)];
        _$jscoverage['plugins/table.core.js'][359]++;
        cell = (cell? cell.cloneNode(true): this.table.ownerDocument.createElement("td"));
        _$jscoverage['plugins/table.core.js'][360]++;
        this.setCellContent(cell);
        _$jscoverage['plugins/table.core.js'][361]++;
        if ((cell.colSpan !== 1)) {
          _$jscoverage['plugins/table.core.js'][361]++;
          cell.colSpan = 1;
        }
        _$jscoverage['plugins/table.core.js'][362]++;
        if ((cell.rowSpan !== 1)) {
          _$jscoverage['plugins/table.core.js'][362]++;
          cell.rowSpan = 1;
        }
        _$jscoverage['plugins/table.core.js'][363]++;
        row.appendChild(cell);
        _$jscoverage['plugins/table.core.js'][364]++;
        this.indexTable[j][k] = {rowIndex: j, cellIndex: cell.cellIndex, colIndex: k, rowSpan: 1, colSpan: 1};
      }
}
}
  _$jscoverage['plugins/table.core.js'][375]++;
  var tds = domUtils.getElementsByTagName(this.table, "td"), selectTds = [];
  _$jscoverage['plugins/table.core.js'][377]++;
  utils.each(tds, (function (td) {
  _$jscoverage['plugins/table.core.js'][378]++;
  if (domUtils.hasClass(td, "selectTdClass")) {
    _$jscoverage['plugins/table.core.js'][379]++;
    selectTds.push(td);
  }
}));
  _$jscoverage['plugins/table.core.js'][382]++;
  if (selectTds.length) {
    _$jscoverage['plugins/table.core.js'][383]++;
    var start = selectTds[0], end = selectTds[(selectTds.length - 1)], startInfo = this.getCellInfo(start), endInfo = this.getCellInfo(end);
    _$jscoverage['plugins/table.core.js'][387]++;
    this.selectedTds = selectTds;
    _$jscoverage['plugins/table.core.js'][388]++;
    this.cellsRange = {beginRowIndex: startInfo.rowIndex, beginColIndex: startInfo.colIndex, endRowIndex: ((endInfo.rowIndex + endInfo.rowSpan) - 1), endColIndex: ((endInfo.colIndex + endInfo.colSpan) - 1)};
  }
}), getCellInfo: (function (cell) {
  _$jscoverage['plugins/table.core.js'][401]++;
  if ((! cell)) {
    _$jscoverage['plugins/table.core.js'][401]++;
    return;
  }
  _$jscoverage['plugins/table.core.js'][402]++;
  var cellIndex = cell.cellIndex, rowIndex = cell.parentNode.rowIndex, rowInfo = this.indexTable[rowIndex], numCols = this.colsNum;
  _$jscoverage['plugins/table.core.js'][406]++;
  for (var colIndex = cellIndex; (colIndex < numCols); (colIndex++)) {
    _$jscoverage['plugins/table.core.js'][407]++;
    var cellInfo = rowInfo[colIndex];
    _$jscoverage['plugins/table.core.js'][408]++;
    if (((cellInfo.rowIndex === rowIndex) && (cellInfo.cellIndex === cellIndex))) {
      _$jscoverage['plugins/table.core.js'][409]++;
      return cellInfo;
    }
}
}), getCell: (function (rowIndex, cellIndex) {
  _$jscoverage['plugins/table.core.js'][417]++;
  return (((rowIndex < this.rowsNum) && this.table.rows[rowIndex].cells[cellIndex]) || null);
}), deleteCell: (function (cell, rowIndex) {
  _$jscoverage['plugins/table.core.js'][423]++;
  rowIndex = (((typeof rowIndex) == "number")? rowIndex: cell.parentNode.rowIndex);
  _$jscoverage['plugins/table.core.js'][424]++;
  var row = this.table.rows[rowIndex];
  _$jscoverage['plugins/table.core.js'][425]++;
  row.deleteCell(cell.cellIndex);
}), getCellsRange: (function (cellA, cellB) {
  _$jscoverage['plugins/table.core.js'][431]++;
  function checkRange(beginRowIndex, beginColIndex, endRowIndex, endColIndex) {
    _$jscoverage['plugins/table.core.js'][432]++;
    var tmpBeginRowIndex = beginRowIndex, tmpBeginColIndex = beginColIndex, tmpEndRowIndex = endRowIndex, tmpEndColIndex = endColIndex, cellInfo, colIndex, rowIndex;
    _$jscoverage['plugins/table.core.js'][438]++;
    if ((beginRowIndex > 0)) {
      _$jscoverage['plugins/table.core.js'][439]++;
      for (colIndex = beginColIndex; (colIndex < endColIndex); (colIndex++)) {
        _$jscoverage['plugins/table.core.js'][440]++;
        cellInfo = me.indexTable[beginRowIndex][colIndex];
        _$jscoverage['plugins/table.core.js'][441]++;
        rowIndex = cellInfo.rowIndex;
        _$jscoverage['plugins/table.core.js'][442]++;
        if ((rowIndex < beginRowIndex)) {
          _$jscoverage['plugins/table.core.js'][443]++;
          tmpBeginRowIndex = Math.min(rowIndex, tmpBeginRowIndex);
        }
}
    }
    _$jscoverage['plugins/table.core.js'][448]++;
    if ((endColIndex < me.colsNum)) {
      _$jscoverage['plugins/table.core.js'][449]++;
      for (rowIndex = beginRowIndex; (rowIndex < endRowIndex); (rowIndex++)) {
        _$jscoverage['plugins/table.core.js'][450]++;
        cellInfo = me.indexTable[rowIndex][endColIndex];
        _$jscoverage['plugins/table.core.js'][451]++;
        colIndex = ((cellInfo.colIndex + cellInfo.colSpan) - 1);
        _$jscoverage['plugins/table.core.js'][452]++;
        if ((colIndex > endColIndex)) {
          _$jscoverage['plugins/table.core.js'][453]++;
          tmpEndColIndex = Math.max(colIndex, tmpEndColIndex);
        }
}
    }
    _$jscoverage['plugins/table.core.js'][458]++;
    if ((endRowIndex < me.rowsNum)) {
      _$jscoverage['plugins/table.core.js'][459]++;
      for (colIndex = beginColIndex; (colIndex < endColIndex); (colIndex++)) {
        _$jscoverage['plugins/table.core.js'][460]++;
        cellInfo = me.indexTable[endRowIndex][colIndex];
        _$jscoverage['plugins/table.core.js'][461]++;
        rowIndex = ((cellInfo.rowIndex + cellInfo.rowSpan) - 1);
        _$jscoverage['plugins/table.core.js'][462]++;
        if ((rowIndex > endRowIndex)) {
          _$jscoverage['plugins/table.core.js'][463]++;
          tmpEndRowIndex = Math.max(rowIndex, tmpEndRowIndex);
        }
}
    }
    _$jscoverage['plugins/table.core.js'][468]++;
    if ((beginColIndex > 0)) {
      _$jscoverage['plugins/table.core.js'][469]++;
      for (rowIndex = beginRowIndex; (rowIndex < endRowIndex); (rowIndex++)) {
        _$jscoverage['plugins/table.core.js'][470]++;
        cellInfo = me.indexTable[rowIndex][beginColIndex];
        _$jscoverage['plugins/table.core.js'][471]++;
        colIndex = cellInfo.colIndex;
        _$jscoverage['plugins/table.core.js'][472]++;
        if ((colIndex < beginColIndex)) {
          _$jscoverage['plugins/table.core.js'][473]++;
          tmpBeginColIndex = Math.min(cellInfo.colIndex, tmpBeginColIndex);
        }
}
    }
    _$jscoverage['plugins/table.core.js'][478]++;
    if (((tmpBeginRowIndex != beginRowIndex) || (tmpBeginColIndex != beginColIndex) || (tmpEndRowIndex != endRowIndex) || (tmpEndColIndex != endColIndex))) {
      _$jscoverage['plugins/table.core.js'][479]++;
      return checkRange(tmpBeginRowIndex, tmpBeginColIndex, tmpEndRowIndex, tmpEndColIndex);
    }
    else {
      _$jscoverage['plugins/table.core.js'][482]++;
      return ({beginRowIndex: beginRowIndex, beginColIndex: beginColIndex, endRowIndex: endRowIndex, endColIndex: endColIndex});
    }
}
  _$jscoverage['plugins/table.core.js'][491]++;
  try {
    _$jscoverage['plugins/table.core.js'][492]++;
    var me = this, cellAInfo = me.getCellInfo(cellA);
    _$jscoverage['plugins/table.core.js'][494]++;
    if ((cellA === cellB)) {
      _$jscoverage['plugins/table.core.js'][495]++;
      return ({beginRowIndex: cellAInfo.rowIndex, beginColIndex: cellAInfo.colIndex, endRowIndex: ((cellAInfo.rowIndex + cellAInfo.rowSpan) - 1), endColIndex: ((cellAInfo.colIndex + cellAInfo.colSpan) - 1)});
    }
    _$jscoverage['plugins/table.core.js'][502]++;
    var cellBInfo = me.getCellInfo(cellB);
    _$jscoverage['plugins/table.core.js'][504]++;
    var beginRowIndex = Math.min(cellAInfo.rowIndex, cellBInfo.rowIndex), beginColIndex = Math.min(cellAInfo.colIndex, cellBInfo.colIndex), endRowIndex = Math.max(((cellAInfo.rowIndex + cellAInfo.rowSpan) - 1), ((cellBInfo.rowIndex + cellBInfo.rowSpan) - 1)), endColIndex = Math.max(((cellAInfo.colIndex + cellAInfo.colSpan) - 1), ((cellBInfo.colIndex + cellBInfo.colSpan) - 1));
    _$jscoverage['plugins/table.core.js'][509]++;
    return checkRange(beginRowIndex, beginColIndex, endRowIndex, endColIndex);
  }
  catch (e) {
    _$jscoverage['plugins/table.core.js'][511]++;
    if (debug) {
      _$jscoverage['plugins/table.core.js'][511]++;
      throw e;
    }
  }
}), getCells: (function (range) {
  _$jscoverage['plugins/table.core.js'][519]++;
  this.clearSelected();
  _$jscoverage['plugins/table.core.js'][520]++;
  var beginRowIndex = range.beginRowIndex, beginColIndex = range.beginColIndex, endRowIndex = range.endRowIndex, endColIndex = range.endColIndex, cellInfo, rowIndex, colIndex, tdHash = {}, returnTds = [];
  _$jscoverage['plugins/table.core.js'][525]++;
  for (var i = beginRowIndex; (i <= endRowIndex); (i++)) {
    _$jscoverage['plugins/table.core.js'][526]++;
    for (var j = beginColIndex; (j <= endColIndex); (j++)) {
      _$jscoverage['plugins/table.core.js'][527]++;
      cellInfo = this.indexTable[i][j];
      _$jscoverage['plugins/table.core.js'][528]++;
      rowIndex = cellInfo.rowIndex;
      _$jscoverage['plugins/table.core.js'][529]++;
      colIndex = cellInfo.colIndex;
      _$jscoverage['plugins/table.core.js'][531]++;
      var key = (rowIndex + "|" + colIndex);
      _$jscoverage['plugins/table.core.js'][532]++;
      if (tdHash[key]) {
        _$jscoverage['plugins/table.core.js'][532]++;
        continue;
      }
      _$jscoverage['plugins/table.core.js'][533]++;
      tdHash[key] = 1;
      _$jscoverage['plugins/table.core.js'][534]++;
      if (((rowIndex < i) || (colIndex < j) || (((rowIndex + cellInfo.rowSpan) - 1) > endRowIndex) || (((colIndex + cellInfo.colSpan) - 1) > endColIndex))) {
        _$jscoverage['plugins/table.core.js'][535]++;
        return null;
      }
      _$jscoverage['plugins/table.core.js'][537]++;
      returnTds.push(this.getCell(rowIndex, cellInfo.cellIndex));
}
}
  _$jscoverage['plugins/table.core.js'][540]++;
  return returnTds;
}), clearSelected: (function () {
  _$jscoverage['plugins/table.core.js'][546]++;
  UETable.removeSelectedClass(this.selectedTds);
  _$jscoverage['plugins/table.core.js'][547]++;
  this.selectedTds = [];
  _$jscoverage['plugins/table.core.js'][548]++;
  this.cellsRange = {};
}), setSelected: (function (range) {
  _$jscoverage['plugins/table.core.js'][554]++;
  var cells = this.getCells(range);
  _$jscoverage['plugins/table.core.js'][555]++;
  UETable.addSelectedClass(cells);
  _$jscoverage['plugins/table.core.js'][556]++;
  this.selectedTds = cells;
  _$jscoverage['plugins/table.core.js'][557]++;
  this.cellsRange = range;
}), isFullRow: (function () {
  _$jscoverage['plugins/table.core.js'][560]++;
  var range = this.cellsRange;
  _$jscoverage['plugins/table.core.js'][561]++;
  return (((range.endColIndex - range.beginColIndex) + 1) == this.colsNum);
}), isFullCol: (function () {
  _$jscoverage['plugins/table.core.js'][564]++;
  var range = this.cellsRange, table = this.table, ths = table.getElementsByTagName("th"), rows = ((range.endRowIndex - range.beginRowIndex) + 1);
  _$jscoverage['plugins/table.core.js'][568]++;
  return ((! ths.length)? (rows == this.rowsNum): ((rows == this.rowsNum) || (rows == (this.rowsNum - 1))));
}), getNextCell: (function (cell, bottom, ignoreRange) {
  _$jscoverage['plugins/table.core.js'][577]++;
  try {
    _$jscoverage['plugins/table.core.js'][578]++;
    var cellInfo = this.getCellInfo(cell), nextRowIndex, nextColIndex;
    _$jscoverage['plugins/table.core.js'][580]++;
    var len = (this.selectedTds.length && (! ignoreRange)), range = this.cellsRange;
    _$jscoverage['plugins/table.core.js'][583]++;
    if ((((! bottom) && (cellInfo.rowIndex == 0)) || (bottom && ((! len)? ((cellInfo.rowIndex + cellInfo.rowSpan) > (this.rowsNum - 1)): (range.endRowIndex == (this.rowsNum - 1)))))) {
      _$jscoverage['plugins/table.core.js'][583]++;
      return null;
    }
    _$jscoverage['plugins/table.core.js'][585]++;
    nextRowIndex = ((! bottom)? ((! len)? (cellInfo.rowIndex - 1): (range.beginRowIndex - 1)): ((! len)? (cellInfo.rowIndex + cellInfo.rowSpan): (range.endRowIndex + 1)));
    _$jscoverage['plugins/table.core.js'][587]++;
    nextColIndex = ((! len)? cellInfo.colIndex: range.beginColIndex);
    _$jscoverage['plugins/table.core.js'][588]++;
    return this.getCell(this.indexTable[nextRowIndex][nextColIndex].rowIndex, this.indexTable[nextRowIndex][nextColIndex].cellIndex);
  }
  catch (e) {
    _$jscoverage['plugins/table.core.js'][590]++;
    showError(e);
  }
}), getPreviewCell: (function (cell, top) {
  _$jscoverage['plugins/table.core.js'][594]++;
  try {
    _$jscoverage['plugins/table.core.js'][595]++;
    var cellInfo = this.getCellInfo(cell), previewRowIndex, previewColIndex;
    _$jscoverage['plugins/table.core.js'][597]++;
    var len = this.selectedTds.length, range = this.cellsRange;
    _$jscoverage['plugins/table.core.js'][600]++;
    if ((((! top) && ((! len)? (! cellInfo.colIndex): (! range.beginColIndex))) || (top && ((! len)? (cellInfo.rowIndex > (this.colsNum - 1)): (range.endColIndex == (this.colsNum - 1)))))) {
      _$jscoverage['plugins/table.core.js'][600]++;
      return null;
    }
    _$jscoverage['plugins/table.core.js'][602]++;
    previewRowIndex = ((! top)? ((! len)? cellInfo.rowIndex: range.beginRowIndex): ((! len)? ((cellInfo.rowIndex < 1)? 0: (cellInfo.rowIndex - 1)): range.beginRowIndex));
    _$jscoverage['plugins/table.core.js'][604]++;
    previewColIndex = ((! top)? ((! len)? ((cellInfo.colIndex < 1)? 0: (cellInfo.colIndex - 1)): (range.beginColIndex - 1)): ((! len)? cellInfo.colIndex: (range.endColIndex + 1)));
    _$jscoverage['plugins/table.core.js'][606]++;
    return this.getCell(this.indexTable[previewRowIndex][previewColIndex].rowIndex, this.indexTable[previewRowIndex][previewColIndex].cellIndex);
  }
  catch (e) {
    _$jscoverage['plugins/table.core.js'][608]++;
    showError(e);
  }
}), moveContent: (function (cellTo, cellFrom) {
  _$jscoverage['plugins/table.core.js'][615]++;
  if (UETable.isEmptyBlock(cellFrom)) {
    _$jscoverage['plugins/table.core.js'][615]++;
    return;
  }
  _$jscoverage['plugins/table.core.js'][616]++;
  if (UETable.isEmptyBlock(cellTo)) {
    _$jscoverage['plugins/table.core.js'][617]++;
    cellTo.innerHTML = cellFrom.innerHTML;
    _$jscoverage['plugins/table.core.js'][618]++;
    return;
  }
  _$jscoverage['plugins/table.core.js'][620]++;
  var child = cellTo.lastChild;
  _$jscoverage['plugins/table.core.js'][621]++;
  if (((child.nodeType == 3) || (! dtd.$block[child.tagName]))) {
    _$jscoverage['plugins/table.core.js'][622]++;
    cellTo.appendChild(cellTo.ownerDocument.createElement("br"));
  }
  _$jscoverage['plugins/table.core.js'][624]++;
  while ((child = cellFrom.firstChild)) {
    _$jscoverage['plugins/table.core.js'][625]++;
    cellTo.appendChild(child);
}
}), mergeRight: (function (cell) {
  _$jscoverage['plugins/table.core.js'][632]++;
  var cellInfo = this.getCellInfo(cell), rightColIndex = (cellInfo.colIndex + cellInfo.colSpan), rightCellInfo = this.indexTable[cellInfo.rowIndex][rightColIndex], rightCell = this.getCell(rightCellInfo.rowIndex, rightCellInfo.cellIndex);
  _$jscoverage['plugins/table.core.js'][637]++;
  cell.colSpan = (cellInfo.colSpan + rightCellInfo.colSpan);
  _$jscoverage['plugins/table.core.js'][639]++;
  cell.removeAttribute("width");
  _$jscoverage['plugins/table.core.js'][641]++;
  this.moveContent(cell, rightCell);
  _$jscoverage['plugins/table.core.js'][643]++;
  this.deleteCell(rightCell, rightCellInfo.rowIndex);
  _$jscoverage['plugins/table.core.js'][644]++;
  this.update();
}), mergeDown: (function (cell) {
  _$jscoverage['plugins/table.core.js'][650]++;
  var cellInfo = this.getCellInfo(cell), downRowIndex = (cellInfo.rowIndex + cellInfo.rowSpan), downCellInfo = this.indexTable[downRowIndex][cellInfo.colIndex], downCell = this.getCell(downCellInfo.rowIndex, downCellInfo.cellIndex);
  _$jscoverage['plugins/table.core.js'][654]++;
  cell.rowSpan = (cellInfo.rowSpan + downCellInfo.rowSpan);
  _$jscoverage['plugins/table.core.js'][655]++;
  cell.removeAttribute("height");
  _$jscoverage['plugins/table.core.js'][656]++;
  this.moveContent(cell, downCell);
  _$jscoverage['plugins/table.core.js'][657]++;
  this.deleteCell(downCell, downCellInfo.rowIndex);
  _$jscoverage['plugins/table.core.js'][658]++;
  this.update();
}), mergeRange: (function () {
  _$jscoverage['plugins/table.core.js'][665]++;
  var range = this.cellsRange, leftTopCell = this.getCell(range.beginRowIndex, this.indexTable[range.beginRowIndex][range.beginColIndex].cellIndex);
  _$jscoverage['plugins/table.core.js'][667]++;
  if (((leftTopCell.tagName == "TH") && (range.endRowIndex !== range.beginRowIndex))) {
    _$jscoverage['plugins/table.core.js'][668]++;
    var index = this.indexTable, info = this.getCellInfo(leftTopCell);
    _$jscoverage['plugins/table.core.js'][670]++;
    leftTopCell = this.getCell(1, index[1][info.colIndex].cellIndex);
    _$jscoverage['plugins/table.core.js'][671]++;
    range = this.getCellsRange(leftTopCell, this.getCell(index[(this.rowsNum - 1)][info.colIndex].rowIndex, index[(this.rowsNum - 1)][info.colIndex].cellIndex));
  }
  _$jscoverage['plugins/table.core.js'][675]++;
  var cells = this.getCells(range), len = cells.length, cell;
  _$jscoverage['plugins/table.core.js'][677]++;
  while ((len--)) {
    _$jscoverage['plugins/table.core.js'][678]++;
    cell = cells[len];
    _$jscoverage['plugins/table.core.js'][679]++;
    if ((cell !== leftTopCell)) {
      _$jscoverage['plugins/table.core.js'][680]++;
      this.moveContent(leftTopCell, cell);
      _$jscoverage['plugins/table.core.js'][681]++;
      this.deleteCell(cell);
    }
}
  _$jscoverage['plugins/table.core.js'][685]++;
  leftTopCell.rowSpan = ((range.endRowIndex - range.beginRowIndex) + 1);
  _$jscoverage['plugins/table.core.js'][686]++;
  ((leftTopCell.rowSpan > 1) && leftTopCell.removeAttribute("height"));
  _$jscoverage['plugins/table.core.js'][687]++;
  leftTopCell.colSpan = ((range.endColIndex - range.beginColIndex) + 1);
  _$jscoverage['plugins/table.core.js'][688]++;
  ((leftTopCell.colSpan > 1) && leftTopCell.removeAttribute("width"));
  _$jscoverage['plugins/table.core.js'][689]++;
  if (((leftTopCell.rowSpan == this.rowsNum) && (leftTopCell.colSpan != 1))) {
    _$jscoverage['plugins/table.core.js'][690]++;
    leftTopCell.colSpan = 1;
  }
  _$jscoverage['plugins/table.core.js'][692]++;
  if (((leftTopCell.colSpan == this.colsNum) && (leftTopCell.rowSpan != 1))) {
    _$jscoverage['plugins/table.core.js'][693]++;
    var rowIndex = leftTopCell.parentNode.rowIndex;
    _$jscoverage['plugins/table.core.js'][694]++;
    for (var i = 0; (i < (leftTopCell.rowSpan - 1)); (i++)) {
      _$jscoverage['plugins/table.core.js'][695]++;
      var row = this.table.rows[(rowIndex + 1)];
      _$jscoverage['plugins/table.core.js'][696]++;
      row.parentNode.removeChild(row);
}
    _$jscoverage['plugins/table.core.js'][698]++;
    leftTopCell.rowSpan = 1;
  }
  _$jscoverage['plugins/table.core.js'][700]++;
  this.update();
}), insertRow: (function (rowIndex, sourceCell) {
  _$jscoverage['plugins/table.core.js'][706]++;
  var numCols = this.colsNum, table = this.table, row = table.insertRow(rowIndex), cell, width = parseInt(((table.offsetWidth - (numCols * 20) - numCols - 1) / numCols), 10);
  _$jscoverage['plugins/table.core.js'][711]++;
  if (((rowIndex == 0) || (rowIndex == this.rowsNum))) {
    _$jscoverage['plugins/table.core.js'][712]++;
    for (var colIndex = 0; (colIndex < numCols); (colIndex++)) {
      _$jscoverage['plugins/table.core.js'][713]++;
      cell = this.cloneCell(sourceCell, true);
      _$jscoverage['plugins/table.core.js'][714]++;
      this.setCellContent(cell);
      _$jscoverage['plugins/table.core.js'][715]++;
      (cell.getAttribute("vAlign") && cell.setAttribute("vAlign", cell.getAttribute("vAlign")));
      _$jscoverage['plugins/table.core.js'][716]++;
      row.appendChild(cell);
}
  }
  else {
    _$jscoverage['plugins/table.core.js'][719]++;
    var infoRow = this.indexTable[rowIndex], cellIndex = 0;
    _$jscoverage['plugins/table.core.js'][721]++;
    for (colIndex = 0; (colIndex < numCols); (colIndex++)) {
      _$jscoverage['plugins/table.core.js'][722]++;
      var cellInfo = infoRow[colIndex];
      _$jscoverage['plugins/table.core.js'][724]++;
      if ((cellInfo.rowIndex < rowIndex)) {
        _$jscoverage['plugins/table.core.js'][725]++;
        cell = this.getCell(cellInfo.rowIndex, cellInfo.cellIndex);
        _$jscoverage['plugins/table.core.js'][726]++;
        cell.rowSpan = (cellInfo.rowSpan + 1);
      }
      else {
        _$jscoverage['plugins/table.core.js'][728]++;
        cell = this.cloneCell(sourceCell, true);
        _$jscoverage['plugins/table.core.js'][729]++;
        this.setCellContent(cell);
        _$jscoverage['plugins/table.core.js'][730]++;
        row.appendChild(cell);
      }
}
  }
  _$jscoverage['plugins/table.core.js'][735]++;
  this.update();
  _$jscoverage['plugins/table.core.js'][736]++;
  return row;
}), deleteRow: (function (rowIndex) {
  _$jscoverage['plugins/table.core.js'][743]++;
  var row = this.table.rows[rowIndex], infoRow = this.indexTable[rowIndex], colsNum = this.colsNum, count = 0;
  _$jscoverage['plugins/table.core.js'][747]++;
  for (var colIndex = 0; (colIndex < colsNum);) {
    _$jscoverage['plugins/table.core.js'][748]++;
    var cellInfo = infoRow[colIndex], cell = this.getCell(cellInfo.rowIndex, cellInfo.cellIndex);
    _$jscoverage['plugins/table.core.js'][750]++;
    if ((cell.rowSpan > 1)) {
      _$jscoverage['plugins/table.core.js'][751]++;
      if ((cellInfo.rowIndex == rowIndex)) {
        _$jscoverage['plugins/table.core.js'][752]++;
        var clone = cell.cloneNode(true);
        _$jscoverage['plugins/table.core.js'][753]++;
        clone.rowSpan = (cell.rowSpan - 1);
        _$jscoverage['plugins/table.core.js'][754]++;
        clone.innerHTML = "";
        _$jscoverage['plugins/table.core.js'][755]++;
        cell.rowSpan = 1;
        _$jscoverage['plugins/table.core.js'][756]++;
        var nextRowIndex = (rowIndex + 1), nextRow = this.table.rows[nextRowIndex], insertCellIndex, preMerged = (this.getPreviewMergedCellsNum(nextRowIndex, colIndex) - count);
        _$jscoverage['plugins/table.core.js'][760]++;
        if ((preMerged < colIndex)) {
          _$jscoverage['plugins/table.core.js'][761]++;
          insertCellIndex = (colIndex - preMerged - 1);
          _$jscoverage['plugins/table.core.js'][763]++;
          domUtils.insertAfter(nextRow.cells[insertCellIndex], clone);
        }
        else {
          _$jscoverage['plugins/table.core.js'][765]++;
          if (nextRow.cells.length) {
            _$jscoverage['plugins/table.core.js'][765]++;
            nextRow.insertBefore(clone, nextRow.cells[0]);
          }
        }
        _$jscoverage['plugins/table.core.js'][767]++;
        count += 1;
      }
    }
    _$jscoverage['plugins/table.core.js'][771]++;
    colIndex += (cell.colSpan || 1);
}
  _$jscoverage['plugins/table.core.js'][773]++;
  var deleteTds = [], cacheMap = {};
  _$jscoverage['plugins/table.core.js'][774]++;
  for (colIndex = 0; (colIndex < colsNum); (colIndex++)) {
    _$jscoverage['plugins/table.core.js'][775]++;
    var tmpRowIndex = infoRow[colIndex].rowIndex, tmpCellIndex = infoRow[colIndex].cellIndex, key = (tmpRowIndex + "_" + tmpCellIndex);
    _$jscoverage['plugins/table.core.js'][778]++;
    if (cacheMap[key]) {
      _$jscoverage['plugins/table.core.js'][778]++;
      continue;
    }
    _$jscoverage['plugins/table.core.js'][779]++;
    cacheMap[key] = 1;
    _$jscoverage['plugins/table.core.js'][780]++;
    cell = this.getCell(tmpRowIndex, tmpCellIndex);
    _$jscoverage['plugins/table.core.js'][781]++;
    deleteTds.push(cell);
}
  _$jscoverage['plugins/table.core.js'][783]++;
  var mergeTds = [];
  _$jscoverage['plugins/table.core.js'][784]++;
  utils.each(deleteTds, (function (td) {
  _$jscoverage['plugins/table.core.js'][785]++;
  if ((td.rowSpan == 1)) {
    _$jscoverage['plugins/table.core.js'][786]++;
    td.parentNode.removeChild(td);
  }
  else {
    _$jscoverage['plugins/table.core.js'][788]++;
    mergeTds.push(td);
  }
}));
  _$jscoverage['plugins/table.core.js'][791]++;
  utils.each(mergeTds, (function (td) {
  _$jscoverage['plugins/table.core.js'][792]++;
  (td.rowSpan--);
}));
  _$jscoverage['plugins/table.core.js'][794]++;
  row.parentNode.removeChild(row);
  _$jscoverage['plugins/table.core.js'][797]++;
  this.update();
}), insertCol: (function (colIndex, sourceCell, defaultValue) {
  _$jscoverage['plugins/table.core.js'][800]++;
  var rowsNum = this.rowsNum, rowIndex = 0, tableRow, cell, backWidth = parseInt(((this.table.offsetWidth - ((this.colsNum + 1) * 20) - (this.colsNum + 1)) / (this.colsNum + 1)), 10);
  _$jscoverage['plugins/table.core.js'][805]++;
  function replaceTdToTh(rowIndex, cell, tableRow) {
    _$jscoverage['plugins/table.core.js'][806]++;
    if ((rowIndex == 0)) {
      _$jscoverage['plugins/table.core.js'][807]++;
      var th = (cell.nextSibling || cell.previousSibling);
      _$jscoverage['plugins/table.core.js'][808]++;
      if ((th.tagName == "TH")) {
        _$jscoverage['plugins/table.core.js'][809]++;
        th = cell.ownerDocument.createElement("th");
        _$jscoverage['plugins/table.core.js'][810]++;
        th.appendChild(cell.firstChild);
        _$jscoverage['plugins/table.core.js'][811]++;
        tableRow.insertBefore(th, cell);
        _$jscoverage['plugins/table.core.js'][812]++;
        domUtils.remove(cell);
      }
    }
    else {
      _$jscoverage['plugins/table.core.js'][815]++;
      if ((cell.tagName == "TH")) {
        _$jscoverage['plugins/table.core.js'][816]++;
        var td = cell.ownerDocument.createElement("td");
        _$jscoverage['plugins/table.core.js'][817]++;
        td.appendChild(cell.firstChild);
        _$jscoverage['plugins/table.core.js'][818]++;
        tableRow.insertBefore(td, cell);
        _$jscoverage['plugins/table.core.js'][819]++;
        domUtils.remove(cell);
      }
    }
}
  _$jscoverage['plugins/table.core.js'][824]++;
  var preCell;
  _$jscoverage['plugins/table.core.js'][825]++;
  if (((colIndex == 0) || (colIndex == this.colsNum))) {
    _$jscoverage['plugins/table.core.js'][826]++;
    for (; (rowIndex < rowsNum); (rowIndex++)) {
      _$jscoverage['plugins/table.core.js'][827]++;
      tableRow = this.table.rows[rowIndex];
      _$jscoverage['plugins/table.core.js'][828]++;
      preCell = tableRow.cells[((colIndex == 0)? colIndex: tableRow.cells.length)];
      _$jscoverage['plugins/table.core.js'][829]++;
      cell = this.cloneCell(sourceCell, true);
      _$jscoverage['plugins/table.core.js'][830]++;
      this.setCellContent(cell);
      _$jscoverage['plugins/table.core.js'][831]++;
      cell.setAttribute("vAlign", cell.getAttribute("vAlign"));
      _$jscoverage['plugins/table.core.js'][832]++;
      (preCell && cell.setAttribute("width", preCell.getAttribute("width")));
      _$jscoverage['plugins/table.core.js'][833]++;
      if ((! colIndex)) {
        _$jscoverage['plugins/table.core.js'][834]++;
        tableRow.insertBefore(cell, tableRow.cells[0]);
      }
      else {
        _$jscoverage['plugins/table.core.js'][836]++;
        domUtils.insertAfter(tableRow.cells[(tableRow.cells.length - 1)], cell);
      }
      _$jscoverage['plugins/table.core.js'][838]++;
      replaceTdToTh(rowIndex, cell, tableRow);
}
  }
  else {
    _$jscoverage['plugins/table.core.js'][841]++;
    for (; (rowIndex < rowsNum); (rowIndex++)) {
      _$jscoverage['plugins/table.core.js'][842]++;
      var cellInfo = this.indexTable[rowIndex][colIndex];
      _$jscoverage['plugins/table.core.js'][843]++;
      if ((cellInfo.colIndex < colIndex)) {
        _$jscoverage['plugins/table.core.js'][844]++;
        cell = this.getCell(cellInfo.rowIndex, cellInfo.cellIndex);
        _$jscoverage['plugins/table.core.js'][845]++;
        cell.colSpan = (cellInfo.colSpan + 1);
      }
      else {
        _$jscoverage['plugins/table.core.js'][847]++;
        tableRow = this.table.rows[rowIndex];
        _$jscoverage['plugins/table.core.js'][848]++;
        preCell = tableRow.cells[cellInfo.cellIndex];
        _$jscoverage['plugins/table.core.js'][850]++;
        cell = this.cloneCell(sourceCell, true);
        _$jscoverage['plugins/table.core.js'][851]++;
        this.setCellContent(cell);
        _$jscoverage['plugins/table.core.js'][852]++;
        cell.setAttribute("vAlign", cell.getAttribute("vAlign"));
        _$jscoverage['plugins/table.core.js'][853]++;
        (preCell && cell.setAttribute("width", preCell.getAttribute("width")));
        _$jscoverage['plugins/table.core.js'][854]++;
        tableRow.insertBefore(cell, preCell);
      }
      _$jscoverage['plugins/table.core.js'][856]++;
      replaceTdToTh(rowIndex, cell, tableRow);
}
  }
  _$jscoverage['plugins/table.core.js'][860]++;
  this.update();
  _$jscoverage['plugins/table.core.js'][861]++;
  this.updateWidth(backWidth, (defaultValue || {tdPadding: 10, tdBorder: 1}));
}), updateWidth: (function (width, defaultValue) {
  _$jscoverage['plugins/table.core.js'][864]++;
  var table = this.table, tmpWidth = ((UETable.getWidth(table) - (defaultValue.tdPadding * 2) - defaultValue.tdBorder) + width);
  _$jscoverage['plugins/table.core.js'][866]++;
  if ((tmpWidth < table.ownerDocument.body.offsetWidth)) {
    _$jscoverage['plugins/table.core.js'][867]++;
    table.setAttribute("width", tmpWidth);
    _$jscoverage['plugins/table.core.js'][868]++;
    return;
  }
  _$jscoverage['plugins/table.core.js'][870]++;
  var tds = domUtils.getElementsByTagName(this.table, "td");
  _$jscoverage['plugins/table.core.js'][871]++;
  utils.each(tds, (function (td) {
  _$jscoverage['plugins/table.core.js'][872]++;
  td.setAttribute("width", width);
}));
}), deleteCol: (function (colIndex) {
  _$jscoverage['plugins/table.core.js'][876]++;
  var indexTable = this.indexTable, tableRows = this.table.rows, backTableWidth = this.table.getAttribute("width"), backTdWidth = 0, rowsNum = this.rowsNum, cacheMap = {};
  _$jscoverage['plugins/table.core.js'][882]++;
  for (var rowIndex = 0; (rowIndex < rowsNum);) {
    _$jscoverage['plugins/table.core.js'][883]++;
    var infoRow = indexTable[rowIndex], cellInfo = infoRow[colIndex], key = (cellInfo.rowIndex + "_" + cellInfo.colIndex);
    _$jscoverage['plugins/table.core.js'][887]++;
    if (cacheMap[key]) {
      _$jscoverage['plugins/table.core.js'][887]++;
      continue;
    }
    _$jscoverage['plugins/table.core.js'][888]++;
    cacheMap[key] = 1;
    _$jscoverage['plugins/table.core.js'][889]++;
    var cell = this.getCell(cellInfo.rowIndex, cellInfo.cellIndex);
    _$jscoverage['plugins/table.core.js'][890]++;
    if ((! backTdWidth)) {
      _$jscoverage['plugins/table.core.js'][890]++;
      backTdWidth = (cell && parseInt((cell.offsetWidth / cell.colSpan), 10).toFixed(0));
    }
    _$jscoverage['plugins/table.core.js'][892]++;
    if ((cell.colSpan > 1)) {
      _$jscoverage['plugins/table.core.js'][893]++;
      (cell.colSpan--);
    }
    else {
      _$jscoverage['plugins/table.core.js'][895]++;
      tableRows[rowIndex].deleteCell(cellInfo.cellIndex);
    }
    _$jscoverage['plugins/table.core.js'][897]++;
    rowIndex += (cellInfo.rowSpan || 1);
}
  _$jscoverage['plugins/table.core.js'][899]++;
  this.table.setAttribute("width", (backTableWidth - backTdWidth));
  _$jscoverage['plugins/table.core.js'][900]++;
  this.update();
}), splitToCells: (function (cell) {
  _$jscoverage['plugins/table.core.js'][903]++;
  var me = this, cells = this.splitToRows(cell);
  _$jscoverage['plugins/table.core.js'][905]++;
  utils.each(cells, (function (cell) {
  _$jscoverage['plugins/table.core.js'][906]++;
  me.splitToCols(cell);
}));
}), splitToRows: (function (cell) {
  _$jscoverage['plugins/table.core.js'][910]++;
  var cellInfo = this.getCellInfo(cell), rowIndex = cellInfo.rowIndex, colIndex = cellInfo.colIndex, results = [];
  _$jscoverage['plugins/table.core.js'][915]++;
  cell.rowSpan = 1;
  _$jscoverage['plugins/table.core.js'][916]++;
  results.push(cell);
  _$jscoverage['plugins/table.core.js'][918]++;
  for (var i = rowIndex, endRow = (rowIndex + cellInfo.rowSpan); (i < endRow); (i++)) {
    _$jscoverage['plugins/table.core.js'][919]++;
    if ((i == rowIndex)) {
      _$jscoverage['plugins/table.core.js'][919]++;
      continue;
    }
    _$jscoverage['plugins/table.core.js'][920]++;
    var tableRow = this.table.rows[i], tmpCell = tableRow.insertCell((colIndex - this.getPreviewMergedCellsNum(i, colIndex)));
    _$jscoverage['plugins/table.core.js'][922]++;
    tmpCell.colSpan = cellInfo.colSpan;
    _$jscoverage['plugins/table.core.js'][923]++;
    this.setCellContent(tmpCell);
    _$jscoverage['plugins/table.core.js'][924]++;
    tmpCell.setAttribute("vAlign", cell.getAttribute("vAlign"));
    _$jscoverage['plugins/table.core.js'][925]++;
    tmpCell.setAttribute("align", cell.getAttribute("align"));
    _$jscoverage['plugins/table.core.js'][926]++;
    if (cell.style.cssText) {
      _$jscoverage['plugins/table.core.js'][927]++;
      tmpCell.style.cssText = cell.style.cssText;
    }
    _$jscoverage['plugins/table.core.js'][929]++;
    results.push(tmpCell);
}
  _$jscoverage['plugins/table.core.js'][931]++;
  this.update();
  _$jscoverage['plugins/table.core.js'][932]++;
  return results;
}), getPreviewMergedCellsNum: (function (rowIndex, colIndex) {
  _$jscoverage['plugins/table.core.js'][935]++;
  var indexRow = this.indexTable[rowIndex], num = 0;
  _$jscoverage['plugins/table.core.js'][937]++;
  for (var i = 0; (i < colIndex);) {
    _$jscoverage['plugins/table.core.js'][938]++;
    var colSpan = indexRow[i].colSpan, tmpRowIndex = indexRow[i].rowIndex;
    _$jscoverage['plugins/table.core.js'][940]++;
    num += (colSpan - ((tmpRowIndex == rowIndex)? 1: 0));
    _$jscoverage['plugins/table.core.js'][941]++;
    i += colSpan;
}
  _$jscoverage['plugins/table.core.js'][943]++;
  return num;
}), splitToCols: (function (cell) {
  _$jscoverage['plugins/table.core.js'][946]++;
  var backWidth = ((cell.offsetWidth / cell.colSpan) - 22).toFixed(0), cellInfo = this.getCellInfo(cell), rowIndex = cellInfo.rowIndex, colIndex = cellInfo.colIndex, results = [];
  _$jscoverage['plugins/table.core.js'][953]++;
  cell.colSpan = 1;
  _$jscoverage['plugins/table.core.js'][954]++;
  cell.setAttribute("width", backWidth);
  _$jscoverage['plugins/table.core.js'][955]++;
  results.push(cell);
  _$jscoverage['plugins/table.core.js'][957]++;
  for (var j = colIndex, endCol = (colIndex + cellInfo.colSpan); (j < endCol); (j++)) {
    _$jscoverage['plugins/table.core.js'][958]++;
    if ((j == colIndex)) {
      _$jscoverage['plugins/table.core.js'][958]++;
      continue;
    }
    _$jscoverage['plugins/table.core.js'][959]++;
    var tableRow = this.table.rows[rowIndex], tmpCell = tableRow.insertCell((this.indexTable[rowIndex][j].cellIndex + 1));
    _$jscoverage['plugins/table.core.js'][961]++;
    tmpCell.rowSpan = cellInfo.rowSpan;
    _$jscoverage['plugins/table.core.js'][962]++;
    this.setCellContent(tmpCell);
    _$jscoverage['plugins/table.core.js'][963]++;
    tmpCell.setAttribute("vAlign", cell.getAttribute("vAlign"));
    _$jscoverage['plugins/table.core.js'][964]++;
    tmpCell.setAttribute("align", cell.getAttribute("align"));
    _$jscoverage['plugins/table.core.js'][965]++;
    tmpCell.setAttribute("width", backWidth);
    _$jscoverage['plugins/table.core.js'][966]++;
    if (cell.style.cssText) {
      _$jscoverage['plugins/table.core.js'][967]++;
      tmpCell.style.cssText = cell.style.cssText;
    }
    _$jscoverage['plugins/table.core.js'][970]++;
    if ((cell.tagName == "TH")) {
      _$jscoverage['plugins/table.core.js'][971]++;
      var th = cell.ownerDocument.createElement("th");
      _$jscoverage['plugins/table.core.js'][972]++;
      th.appendChild(tmpCell.firstChild);
      _$jscoverage['plugins/table.core.js'][973]++;
      th.setAttribute("vAlign", cell.getAttribute("vAlign"));
      _$jscoverage['plugins/table.core.js'][974]++;
      th.rowSpan = tmpCell.rowSpan;
      _$jscoverage['plugins/table.core.js'][975]++;
      tableRow.insertBefore(th, tmpCell);
      _$jscoverage['plugins/table.core.js'][976]++;
      domUtils.remove(tmpCell);
    }
    _$jscoverage['plugins/table.core.js'][978]++;
    results.push(tmpCell);
}
  _$jscoverage['plugins/table.core.js'][980]++;
  this.update();
  _$jscoverage['plugins/table.core.js'][981]++;
  return results;
}), isLastCell: (function (cell, rowsNum, colsNum) {
  _$jscoverage['plugins/table.core.js'][984]++;
  rowsNum = (rowsNum || this.rowsNum);
  _$jscoverage['plugins/table.core.js'][985]++;
  colsNum = (colsNum || this.colsNum);
  _$jscoverage['plugins/table.core.js'][986]++;
  var cellInfo = this.getCellInfo(cell);
  _$jscoverage['plugins/table.core.js'][987]++;
  return (((cellInfo.rowIndex + cellInfo.rowSpan) == rowsNum) && ((cellInfo.colIndex + cellInfo.colSpan) == colsNum));
}), getLastCell: (function (cells) {
  _$jscoverage['plugins/table.core.js'][991]++;
  cells = (cells || this.table.getElementsByTagName("td"));
  _$jscoverage['plugins/table.core.js'][992]++;
  var firstInfo = this.getCellInfo(cells[0]);
  _$jscoverage['plugins/table.core.js'][993]++;
  var me = this, last = cells[0], tr = last.parentNode, cellsNum = 0, cols = 0, rows;
  _$jscoverage['plugins/table.core.js'][996]++;
  utils.each(cells, (function (cell) {
  _$jscoverage['plugins/table.core.js'][997]++;
  if ((cell.parentNode == tr)) {
    _$jscoverage['plugins/table.core.js'][997]++;
    cols += (cell.colSpan || 1);
  }
  _$jscoverage['plugins/table.core.js'][998]++;
  cellsNum += ((cell.rowSpan * cell.colSpan) || 1);
}));
  _$jscoverage['plugins/table.core.js'][1000]++;
  rows = (cellsNum / cols);
  _$jscoverage['plugins/table.core.js'][1001]++;
  utils.each(cells, (function (cell) {
  _$jscoverage['plugins/table.core.js'][1002]++;
  if (me.isLastCell(cell, rows, cols)) {
    _$jscoverage['plugins/table.core.js'][1003]++;
    last = cell;
    _$jscoverage['plugins/table.core.js'][1004]++;
    return false;
  }
}));
  _$jscoverage['plugins/table.core.js'][1007]++;
  return last;
}), selectRow: (function (rowIndex) {
  _$jscoverage['plugins/table.core.js'][1011]++;
  var indexRow = this.indexTable[rowIndex], start = this.getCell(indexRow[0].rowIndex, indexRow[0].cellIndex), end = this.getCell(indexRow[(this.colsNum - 1)].rowIndex, indexRow[(this.colsNum - 1)].cellIndex), range = this.getCellsRange(start, end);
  _$jscoverage['plugins/table.core.js'][1015]++;
  this.setSelected(range);
}), selectTable: (function () {
  _$jscoverage['plugins/table.core.js'][1018]++;
  var tds = this.table.getElementsByTagName("td"), range = this.getCellsRange(tds[0], tds[(tds.length - 1)]);
  _$jscoverage['plugins/table.core.js'][1020]++;
  this.setSelected(range);
}), sortTable: (function (sortByCellIndex, compareFn) {
  _$jscoverage['plugins/table.core.js'][1023]++;
  var table = this.table, rows = table.rows, trArray = [], flag = (rows[0].cells[0].tagName === "TH"), lastRowIndex = 0;
  _$jscoverage['plugins/table.core.js'][1028]++;
  if (this.selectedTds.length) {
    _$jscoverage['plugins/table.core.js'][1029]++;
    var range = this.cellsRange, len = (range.endRowIndex + 1);
    _$jscoverage['plugins/table.core.js'][1031]++;
    for (var i = range.beginRowIndex; (i < len); (i++)) {
      _$jscoverage['plugins/table.core.js'][1032]++;
      trArray[i] = rows[i];
}
    _$jscoverage['plugins/table.core.js'][1034]++;
    trArray.splice(0, range.beginRowIndex);
    _$jscoverage['plugins/table.core.js'][1035]++;
    lastRowIndex = (((range.endRowIndex + 1) === this.rowsNum)? 0: (range.endRowIndex + 1));
  }
  else {
    _$jscoverage['plugins/table.core.js'][1037]++;
    for (var i = 0, len = rows.length; (i < len); (i++)) {
      _$jscoverage['plugins/table.core.js'][1038]++;
      trArray[i] = rows[i];
}
  }
  _$jscoverage['plugins/table.core.js'][1042]++;
  (flag && trArray.splice(0, 1));
  _$jscoverage['plugins/table.core.js'][1043]++;
  trArray = utils.sort(trArray, (function (tr1, tr2) {
  _$jscoverage['plugins/table.core.js'][1044]++;
  var txt = (function (node) {
  _$jscoverage['plugins/table.core.js'][1045]++;
  return (node.innerText || node.textContent);
});
  _$jscoverage['plugins/table.core.js'][1047]++;
  return (compareFn? (((typeof compareFn) === "number")? compareFn: compareFn.call(this, tr1.cells[sortByCellIndex], tr2.cells[sortByCellIndex])): (function () {
  _$jscoverage['plugins/table.core.js'][1048]++;
  var value1 = txt(tr1.cells[sortByCellIndex]), value2 = txt(tr2.cells[sortByCellIndex]);
  _$jscoverage['plugins/table.core.js'][1050]++;
  return value1.localeCompare(value2);
})());
}));
  _$jscoverage['plugins/table.core.js'][1053]++;
  var fragment = table.ownerDocument.createDocumentFragment();
  _$jscoverage['plugins/table.core.js'][1054]++;
  for (var j = 0, len = trArray.length; (j < len); (j++)) {
    _$jscoverage['plugins/table.core.js'][1055]++;
    fragment.appendChild(trArray[j]);
}
  _$jscoverage['plugins/table.core.js'][1057]++;
  var tbody = table.getElementsByTagName("tbody")[0];
  _$jscoverage['plugins/table.core.js'][1058]++;
  if ((! lastRowIndex)) {
    _$jscoverage['plugins/table.core.js'][1059]++;
    tbody.appendChild(fragment);
  }
  else {
    _$jscoverage['plugins/table.core.js'][1061]++;
    tbody.insertBefore(fragment, rows[(((lastRowIndex - range.endRowIndex) + range.beginRowIndex) - 1)]);
  }
}), setBackground: (function (cells, value) {
  _$jscoverage['plugins/table.core.js'][1065]++;
  if (((typeof value) === "string")) {
    _$jscoverage['plugins/table.core.js'][1066]++;
    utils.each(cells, (function (cell) {
  _$jscoverage['plugins/table.core.js'][1067]++;
  cell.style.backgroundColor = value;
}));
  }
  else {
    _$jscoverage['plugins/table.core.js'][1069]++;
    if (((typeof value) === "object")) {
      _$jscoverage['plugins/table.core.js'][1070]++;
      value = utils.extend({repeat: true, colorList: ["#ddd", "#fff"]}, value);
      _$jscoverage['plugins/table.core.js'][1074]++;
      var rowIndex = this.getCellInfo(cells[0]).rowIndex, count = 0, colors = value.colorList, getColor = (function (list, index, repeat) {
  _$jscoverage['plugins/table.core.js'][1078]++;
  return (list[index]? list[index]: (repeat? list[(index % list.length)]: ""));
});
      _$jscoverage['plugins/table.core.js'][1080]++;
      for (var i = 0, cell; (cell = cells[(i++)]);) {
        _$jscoverage['plugins/table.core.js'][1081]++;
        var cellInfo = this.getCellInfo(cell);
        _$jscoverage['plugins/table.core.js'][1082]++;
        cell.style.backgroundColor = getColor(colors, (((rowIndex + count) == cellInfo.rowIndex)? count: (++count)), value.repeat);
}
    }
  }
}), removeBackground: (function (cells) {
  _$jscoverage['plugins/table.core.js'][1087]++;
  utils.each(cells, (function (cell) {
  _$jscoverage['plugins/table.core.js'][1088]++;
  cell.style.backgroundColor = "";
}));
})};
  _$jscoverage['plugins/table.core.js'][1094]++;
  function showError(e) {
}
})();
