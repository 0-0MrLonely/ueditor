/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['plugins/font.js']) {
  _$jscoverage['plugins/font.js'] = [];
  _$jscoverage['plugins/font.js'][12] = 0;
  _$jscoverage['plugins/font.js'][13] = 0;
  _$jscoverage['plugins/font.js'][24] = 0;
  _$jscoverage['plugins/font.js'][40] = 0;
  _$jscoverage['plugins/font.js'][41] = 0;
  _$jscoverage['plugins/font.js'][43] = 0;
  _$jscoverage['plugins/font.js'][44] = 0;
  _$jscoverage['plugins/font.js'][45] = 0;
  _$jscoverage['plugins/font.js'][46] = 0;
  _$jscoverage['plugins/font.js'][50] = 0;
  _$jscoverage['plugins/font.js'][53] = 0;
  _$jscoverage['plugins/font.js'][54] = 0;
  _$jscoverage['plugins/font.js'][55] = 0;
  _$jscoverage['plugins/font.js'][57] = 0;
  _$jscoverage['plugins/font.js'][58] = 0;
  _$jscoverage['plugins/font.js'][59] = 0;
  _$jscoverage['plugins/font.js'][60] = 0;
  _$jscoverage['plugins/font.js'][61] = 0;
  _$jscoverage['plugins/font.js'][62] = 0;
  _$jscoverage['plugins/font.js'][63] = 0;
  _$jscoverage['plugins/font.js'][64] = 0;
  _$jscoverage['plugins/font.js'][65] = 0;
  _$jscoverage['plugins/font.js'][68] = 0;
  _$jscoverage['plugins/font.js'][70] = 0;
  _$jscoverage['plugins/font.js'][71] = 0;
  _$jscoverage['plugins/font.js'][72] = 0;
  _$jscoverage['plugins/font.js'][73] = 0;
  _$jscoverage['plugins/font.js'][75] = 0;
  _$jscoverage['plugins/font.js'][78] = 0;
  _$jscoverage['plugins/font.js'][79] = 0;
  _$jscoverage['plugins/font.js'][80] = 0;
  _$jscoverage['plugins/font.js'][81] = 0;
  _$jscoverage['plugins/font.js'][82] = 0;
  _$jscoverage['plugins/font.js'][83] = 0;
  _$jscoverage['plugins/font.js'][84] = 0;
  _$jscoverage['plugins/font.js'][85] = 0;
  _$jscoverage['plugins/font.js'][86] = 0;
  _$jscoverage['plugins/font.js'][87] = 0;
  _$jscoverage['plugins/font.js'][88] = 0;
  _$jscoverage['plugins/font.js'][90] = 0;
  _$jscoverage['plugins/font.js'][92] = 0;
  _$jscoverage['plugins/font.js'][94] = 0;
  _$jscoverage['plugins/font.js'][96] = 0;
  _$jscoverage['plugins/font.js'][97] = 0;
  _$jscoverage['plugins/font.js'][98] = 0;
  _$jscoverage['plugins/font.js'][100] = 0;
  _$jscoverage['plugins/font.js'][103] = 0;
  _$jscoverage['plugins/font.js'][104] = 0;
  _$jscoverage['plugins/font.js'][106] = 0;
  _$jscoverage['plugins/font.js'][107] = 0;
  _$jscoverage['plugins/font.js'][108] = 0;
  _$jscoverage['plugins/font.js'][109] = 0;
  _$jscoverage['plugins/font.js'][111] = 0;
  _$jscoverage['plugins/font.js'][112] = 0;
  _$jscoverage['plugins/font.js'][113] = 0;
  _$jscoverage['plugins/font.js'][114] = 0;
  _$jscoverage['plugins/font.js'][116] = 0;
  _$jscoverage['plugins/font.js'][118] = 0;
  _$jscoverage['plugins/font.js'][120] = 0;
  _$jscoverage['plugins/font.js'][124] = 0;
  _$jscoverage['plugins/font.js'][125] = 0;
  _$jscoverage['plugins/font.js'][126] = 0;
  _$jscoverage['plugins/font.js'][127] = 0;
  _$jscoverage['plugins/font.js'][128] = 0;
  _$jscoverage['plugins/font.js'][129] = 0;
  _$jscoverage['plugins/font.js'][130] = 0;
  _$jscoverage['plugins/font.js'][131] = 0;
  _$jscoverage['plugins/font.js'][133] = 0;
  _$jscoverage['plugins/font.js'][135] = 0;
  _$jscoverage['plugins/font.js'][142] = 0;
  _$jscoverage['plugins/font.js'][144] = 0;
  _$jscoverage['plugins/font.js'][145] = 0;
  _$jscoverage['plugins/font.js'][146] = 0;
  _$jscoverage['plugins/font.js'][147] = 0;
  _$jscoverage['plugins/font.js'][148] = 0;
  _$jscoverage['plugins/font.js'][149] = 0;
  _$jscoverage['plugins/font.js'][151] = 0;
  _$jscoverage['plugins/font.js'][152] = 0;
  _$jscoverage['plugins/font.js'][154] = 0;
  _$jscoverage['plugins/font.js'][155] = 0;
  _$jscoverage['plugins/font.js'][157] = 0;
  _$jscoverage['plugins/font.js'][158] = 0;
  _$jscoverage['plugins/font.js'][160] = 0;
  _$jscoverage['plugins/font.js'][163] = 0;
  _$jscoverage['plugins/font.js'][167] = 0;
  _$jscoverage['plugins/font.js'][168] = 0;
  _$jscoverage['plugins/font.js'][172] = 0;
  _$jscoverage['plugins/font.js'][175] = 0;
  _$jscoverage['plugins/font.js'][176] = 0;
  _$jscoverage['plugins/font.js'][177] = 0;
  _$jscoverage['plugins/font.js'][179] = 0;
  _$jscoverage['plugins/font.js'][182] = 0;
  _$jscoverage['plugins/font.js'][186] = 0;
  _$jscoverage['plugins/font.js'][188] = 0;
  _$jscoverage['plugins/font.js'][189] = 0;
  _$jscoverage['plugins/font.js'][190] = 0;
  _$jscoverage['plugins/font.js'][193] = 0;
  _$jscoverage['plugins/font.js'][194] = 0;
  _$jscoverage['plugins/font.js'][195] = 0;
  _$jscoverage['plugins/font.js'][196] = 0;
  _$jscoverage['plugins/font.js'][201] = 0;
  _$jscoverage['plugins/font.js'][202] = 0;
  _$jscoverage['plugins/font.js'][203] = 0;
  _$jscoverage['plugins/font.js'][205] = 0;
  _$jscoverage['plugins/font.js'][207] = 0;
  _$jscoverage['plugins/font.js'][208] = 0;
  _$jscoverage['plugins/font.js'][209] = 0;
  _$jscoverage['plugins/font.js'][212] = 0;
  _$jscoverage['plugins/font.js'][213] = 0;
  _$jscoverage['plugins/font.js'][214] = 0;
  _$jscoverage['plugins/font.js'][216] = 0;
  _$jscoverage['plugins/font.js'][217] = 0;
  _$jscoverage['plugins/font.js'][218] = 0;
  _$jscoverage['plugins/font.js'][219] = 0;
  _$jscoverage['plugins/font.js'][221] = 0;
  _$jscoverage['plugins/font.js'][222] = 0;
  _$jscoverage['plugins/font.js'][225] = 0;
  _$jscoverage['plugins/font.js'][226] = 0;
  _$jscoverage['plugins/font.js'][230] = 0;
  _$jscoverage['plugins/font.js'][231] = 0;
  _$jscoverage['plugins/font.js'][232] = 0;
  _$jscoverage['plugins/font.js'][234] = 0;
  _$jscoverage['plugins/font.js'][236] = 0;
  _$jscoverage['plugins/font.js'][237] = 0;
  _$jscoverage['plugins/font.js'][238] = 0;
  _$jscoverage['plugins/font.js'][239] = 0;
  _$jscoverage['plugins/font.js'][241] = 0;
  _$jscoverage['plugins/font.js'][244] = 0;
  _$jscoverage['plugins/font.js'][247] = 0;
  _$jscoverage['plugins/font.js'][249] = 0;
  _$jscoverage['plugins/font.js'][250] = 0;
  _$jscoverage['plugins/font.js'][251] = 0;
  _$jscoverage['plugins/font.js'][252] = 0;
  _$jscoverage['plugins/font.js'][254] = 0;
  _$jscoverage['plugins/font.js'][256] = 0;
  _$jscoverage['plugins/font.js'][262] = 0;
  _$jscoverage['plugins/font.js'][263] = 0;
  _$jscoverage['plugins/font.js'][264] = 0;
  _$jscoverage['plugins/font.js'][265] = 0;
  _$jscoverage['plugins/font.js'][266] = 0;
  _$jscoverage['plugins/font.js'][269] = 0;
  _$jscoverage['plugins/font.js'][270] = 0;
  _$jscoverage['plugins/font.js'][271] = 0;
  _$jscoverage['plugins/font.js'][277] = 0;
  _$jscoverage['plugins/font.js'][282] = 0;
  _$jscoverage['plugins/font.js'][285] = 0;
  _$jscoverage['plugins/font.js'][288] = 0;
  _$jscoverage['plugins/font.js'][289] = 0;
  _$jscoverage['plugins/font.js'][290] = 0;
  _$jscoverage['plugins/font.js'][291] = 0;
  _$jscoverage['plugins/font.js'][292] = 0;
  _$jscoverage['plugins/font.js'][294] = 0;
  _$jscoverage['plugins/font.js'][295] = 0;
  _$jscoverage['plugins/font.js'][299] = 0;
  _$jscoverage['plugins/font.js'][301] = 0;
  _$jscoverage['plugins/font.js'][303] = 0;
  _$jscoverage['plugins/font.js'][304] = 0;
  _$jscoverage['plugins/font.js'][305] = 0;
  _$jscoverage['plugins/font.js'][306] = 0;
  _$jscoverage['plugins/font.js'][307] = 0;
  _$jscoverage['plugins/font.js'][308] = 0;
  _$jscoverage['plugins/font.js'][311] = 0;
  _$jscoverage['plugins/font.js'][313] = 0;
  _$jscoverage['plugins/font.js'][315] = 0;
  _$jscoverage['plugins/font.js'][318] = 0;
  _$jscoverage['plugins/font.js'][319] = 0;
  _$jscoverage['plugins/font.js'][320] = 0;
  _$jscoverage['plugins/font.js'][321] = 0;
  _$jscoverage['plugins/font.js'][322] = 0;
  _$jscoverage['plugins/font.js'][324] = 0;
}
_$jscoverage['plugins/font.js'].source = ["<span class=\"c\">///import core</span>","<span class=\"c\">///import plugins\\removeformat.js</span>","<span class=\"c\">///commands &#23383;&#20307;&#39068;&#33394;,&#32972;&#26223;&#33394;,&#23383;&#21495;,&#23383;&#20307;,&#19979;&#21010;&#32447;,&#21024;&#38500;&#32447;</span>","<span class=\"c\">///commandsName  ForeColor,BackColor,FontSize,FontFamily,Underline,StrikeThrough</span>","<span class=\"c\">///commandsTitle  &#23383;&#20307;&#39068;&#33394;,&#32972;&#26223;&#33394;,&#23383;&#21495;,&#23383;&#20307;,&#19979;&#21010;&#32447;,&#21024;&#38500;&#32447;</span>","<span class=\"c\">/**</span>","<span class=\"c\"> * @description &#23383;&#20307;</span>","<span class=\"c\"> * @name baidu.editor.execCommand</span>","<span class=\"c\"> * @param {String}     cmdName    &#25191;&#34892;&#30340;&#21151;&#33021;&#21517;&#31216;</span>","<span class=\"c\"> * @param {String}    value             &#20256;&#20837;&#30340;&#20540;</span>","<span class=\"c\"> */</span>","UE<span class=\"k\">.</span>plugins<span class=\"k\">[</span><span class=\"s\">'font'</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> me <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">,</span>","        fonts <span class=\"k\">=</span> <span class=\"k\">{</span>","            <span class=\"s\">'forecolor'</span><span class=\"k\">:</span><span class=\"s\">'color'</span><span class=\"k\">,</span>","            <span class=\"s\">'backcolor'</span><span class=\"k\">:</span><span class=\"s\">'background-color'</span><span class=\"k\">,</span>","            <span class=\"s\">'fontsize'</span><span class=\"k\">:</span><span class=\"s\">'font-size'</span><span class=\"k\">,</span>","            <span class=\"s\">'fontfamily'</span><span class=\"k\">:</span><span class=\"s\">'font-family'</span><span class=\"k\">,</span>","            <span class=\"s\">'underline'</span><span class=\"k\">:</span><span class=\"s\">'text-decoration'</span><span class=\"k\">,</span>","            <span class=\"s\">'strikethrough'</span><span class=\"k\">:</span><span class=\"s\">'text-decoration'</span><span class=\"k\">,</span>","            <span class=\"s\">'fontborder'</span><span class=\"k\">:</span><span class=\"s\">'border'</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        needCmd <span class=\"k\">=</span> <span class=\"k\">{</span><span class=\"s\">'underline'</span><span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">'strikethrough'</span><span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">'fontborder'</span><span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">}</span><span class=\"k\">;</span>","    me<span class=\"k\">.</span>setOpt<span class=\"k\">(</span><span class=\"k\">{</span>","        <span class=\"s\">'fontfamily'</span><span class=\"k\">:[</span>","            <span class=\"k\">{</span> name<span class=\"k\">:</span><span class=\"s\">'songti'</span><span class=\"k\">,</span>val<span class=\"k\">:</span><span class=\"s\">'&#23435;&#20307;,SimSun'</span><span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">{</span> name<span class=\"k\">:</span><span class=\"s\">'yahei'</span><span class=\"k\">,</span>val<span class=\"k\">:</span><span class=\"s\">'&#24494;&#36719;&#38597;&#40657;,Microsoft YaHei'</span><span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">{</span> name<span class=\"k\">:</span><span class=\"s\">'kaiti'</span><span class=\"k\">,</span>val<span class=\"k\">:</span><span class=\"s\">'&#26999;&#20307;,&#26999;&#20307;_GB2312, SimKai'</span><span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">{</span> name<span class=\"k\">:</span><span class=\"s\">'heiti'</span><span class=\"k\">,</span>val<span class=\"k\">:</span><span class=\"s\">'&#40657;&#20307;, SimHei'</span><span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">{</span> name<span class=\"k\">:</span><span class=\"s\">'lishu'</span><span class=\"k\">,</span>val<span class=\"k\">:</span><span class=\"s\">'&#38582;&#20070;, SimLi'</span><span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">{</span> name<span class=\"k\">:</span><span class=\"s\">'andaleMono'</span><span class=\"k\">,</span>val<span class=\"k\">:</span><span class=\"s\">'andale mono'</span><span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">{</span> name<span class=\"k\">:</span><span class=\"s\">'arial'</span><span class=\"k\">,</span>val<span class=\"k\">:</span><span class=\"s\">'arial, helvetica,sans-serif'</span><span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">{</span> name<span class=\"k\">:</span><span class=\"s\">'arialBlack'</span><span class=\"k\">,</span>val<span class=\"k\">:</span><span class=\"s\">'arial black,avant garde'</span><span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">{</span> name<span class=\"k\">:</span><span class=\"s\">'comicSansMs'</span><span class=\"k\">,</span>val<span class=\"k\">:</span><span class=\"s\">'comic sans ms'</span><span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">{</span> name<span class=\"k\">:</span><span class=\"s\">'impact'</span><span class=\"k\">,</span>val<span class=\"k\">:</span><span class=\"s\">'impact,chicago'</span><span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">{</span> name<span class=\"k\">:</span><span class=\"s\">'timesNewRoman'</span><span class=\"k\">,</span>val<span class=\"k\">:</span><span class=\"s\">'times new roman'</span><span class=\"k\">}</span>","          <span class=\"k\">],</span>","        <span class=\"s\">'fontsize'</span><span class=\"k\">:[</span><span class=\"s\">10</span><span class=\"k\">,</span> <span class=\"s\">11</span><span class=\"k\">,</span> <span class=\"s\">12</span><span class=\"k\">,</span> <span class=\"s\">14</span><span class=\"k\">,</span> <span class=\"s\">16</span><span class=\"k\">,</span> <span class=\"s\">18</span><span class=\"k\">,</span> <span class=\"s\">20</span><span class=\"k\">,</span> <span class=\"s\">24</span><span class=\"k\">,</span> <span class=\"s\">36</span><span class=\"k\">]</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">function</span> mergesibling<span class=\"k\">(</span>range<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> collapsed <span class=\"k\">=</span> range<span class=\"k\">.</span>collapsed<span class=\"k\">,</span>","            bk <span class=\"k\">=</span> range<span class=\"k\">.</span>createBookmark<span class=\"k\">(),</span>common<span class=\"k\">;</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>collapsed<span class=\"k\">)</span><span class=\"k\">{</span>","            common <span class=\"k\">=</span> bk<span class=\"k\">.</span>start<span class=\"k\">.</span>parentNode<span class=\"k\">;</span>","            <span class=\"k\">while</span><span class=\"k\">(</span>dtd<span class=\"k\">.</span>$inline<span class=\"k\">[</span>common<span class=\"k\">.</span>tagName<span class=\"k\">])</span><span class=\"k\">{</span>","                common <span class=\"k\">=</span> common<span class=\"k\">.</span>parentNode<span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>","","            common <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>getCommonAncestor<span class=\"k\">(</span>bk<span class=\"k\">.</span>start<span class=\"k\">,</span>bk<span class=\"k\">.</span>end<span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        utils<span class=\"k\">.</span>each<span class=\"k\">(</span>domUtils<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span>common<span class=\"k\">,</span><span class=\"s\">'span'</span><span class=\"k\">),</span><span class=\"k\">function</span><span class=\"k\">(</span>node<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(!</span>node<span class=\"k\">.</span>parentNode<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">return</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">function</span> isBorder<span class=\"k\">(</span>n<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(!</span>n<span class=\"k\">)</span>","                    <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>n<span class=\"k\">.</span>tagName <span class=\"k\">!=</span> <span class=\"s\">'SPAN'</span><span class=\"k\">)</span>","                    <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                <span class=\"k\">var</span> val<span class=\"k\">;</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>val <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>getComputedStyle<span class=\"k\">(</span> n<span class=\"k\">,</span> <span class=\"s\">'border'</span> <span class=\"k\">))</span><span class=\"k\">{</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"s\">/1px/</span><span class=\"k\">.</span>test<span class=\"k\">(</span>val<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"s\">/solid/</span><span class=\"k\">.</span>test<span class=\"k\">(</span>val<span class=\"k\">))</span><span class=\"k\">{</span>","                        <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">function</span> nextSibling<span class=\"k\">(</span>node<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> next <span class=\"k\">=</span> node<span class=\"k\">.</span>nextSibling<span class=\"k\">;</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>next <span class=\"k\">&amp;&amp;</span> domUtils<span class=\"k\">.</span>isBookmarkNode<span class=\"k\">(</span>next<span class=\"k\">))</span><span class=\"k\">{</span>","                    next <span class=\"k\">=</span> next<span class=\"k\">.</span>nextSibling<span class=\"k\">;</span>","                <span class=\"k\">}</span>","                <span class=\"k\">return</span> next<span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">var</span> span <span class=\"k\">=</span> me<span class=\"k\">.</span>document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">'span'</span><span class=\"k\">);</span>","            span<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText <span class=\"k\">=</span> <span class=\"s\">'border:1px solid #000'</span><span class=\"k\">;</span>","            node<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>insertBefore<span class=\"k\">(</span>span<span class=\"k\">,</span>node<span class=\"k\">);</span>","            <span class=\"k\">while</span><span class=\"k\">(</span>isBorder<span class=\"k\">(</span>node<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> isBorder<span class=\"k\">(</span>nextSibling<span class=\"k\">(</span>node<span class=\"k\">)))</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> val <span class=\"k\">=</span> utils<span class=\"k\">.</span>trim<span class=\"k\">(</span>node<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/border[^:]+:[^;]+;?/gi</span><span class=\"k\">,</span><span class=\"s\">''</span><span class=\"k\">));</span>","                node<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText <span class=\"k\">=</span> val<span class=\"k\">;</span>","                <span class=\"k\">var</span> tmp  <span class=\"k\">=</span> node<span class=\"k\">.</span>nextSibling<span class=\"k\">;</span>","                <span class=\"k\">if</span><span class=\"k\">(!</span>val<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">while</span><span class=\"k\">(</span>node<span class=\"k\">.</span>firstChild<span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"k\">if</span><span class=\"k\">(</span>isBorder<span class=\"k\">(</span>node<span class=\"k\">.</span>firstChild<span class=\"k\">))</span><span class=\"k\">{</span>","                            node<span class=\"k\">.</span>firstChild<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText <span class=\"k\">=</span> node<span class=\"k\">.</span>firstChild<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/border[^:]+:[^;]+;?/gi</span><span class=\"k\">,</span><span class=\"s\">''</span><span class=\"k\">);</span>","                        <span class=\"k\">}</span>","                        span<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>node<span class=\"k\">.</span>firstChild<span class=\"k\">)</span>","                    <span class=\"k\">}</span>","                    domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>node<span class=\"k\">)</span>","                <span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>","                    span<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>node<span class=\"k\">);</span>","                <span class=\"k\">}</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>domUtils<span class=\"k\">.</span>isBookmarkNode<span class=\"k\">(</span>tmp<span class=\"k\">))</span><span class=\"k\">{</span>","                    node <span class=\"k\">=</span> tmp<span class=\"k\">.</span>nextSibling<span class=\"k\">;</span>","                    span<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>tmp<span class=\"k\">)</span>","                <span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>","                    node <span class=\"k\">=</span> tmp<span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            <span class=\"k\">if</span><span class=\"k\">(!</span>span<span class=\"k\">.</span>firstChild<span class=\"k\">)</span><span class=\"k\">{</span>","                domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>span<span class=\"k\">)</span>","            <span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>isBorder<span class=\"k\">(</span>span<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> isBorder<span class=\"k\">(</span>nextSibling<span class=\"k\">(</span>span<span class=\"k\">)))</span><span class=\"k\">{</span>","                    node <span class=\"k\">=</span> span<span class=\"k\">.</span>nextSibling<span class=\"k\">;</span>","                    <span class=\"k\">var</span> val <span class=\"k\">=</span> utils<span class=\"k\">.</span>trim<span class=\"k\">(</span>node<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/border[^:]+:[^;]+;?/gi</span><span class=\"k\">,</span><span class=\"s\">''</span><span class=\"k\">));</span>","                    node<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText <span class=\"k\">=</span> val<span class=\"k\">;</span>","","                    <span class=\"k\">if</span><span class=\"k\">(!</span>val<span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"k\">while</span><span class=\"k\">(</span>node<span class=\"k\">.</span>firstChild<span class=\"k\">)</span><span class=\"k\">{</span>","                            <span class=\"k\">if</span><span class=\"k\">(</span>isBorder<span class=\"k\">(</span>node<span class=\"k\">.</span>firstChild<span class=\"k\">))</span><span class=\"k\">{</span>","                                node<span class=\"k\">.</span>firstChild<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText <span class=\"k\">=</span> node<span class=\"k\">.</span>firstChild<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/border[^:]+:[^;];?/</span><span class=\"k\">,</span><span class=\"s\">''</span><span class=\"k\">);</span>","                            <span class=\"k\">}</span>","                            span<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>node<span class=\"k\">.</span>firstChild<span class=\"k\">)</span>","                        <span class=\"k\">}</span>","                        domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>node<span class=\"k\">)</span>","                    <span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>","                        span<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>node<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>isBorder<span class=\"k\">(</span>node<span class=\"k\">))</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> tmpParent <span class=\"k\">=</span> node<span class=\"k\">.</span>parentNode<span class=\"k\">;</span>","                <span class=\"k\">while</span><span class=\"k\">(</span>dtd<span class=\"k\">.</span>$inline<span class=\"k\">[</span>tmpParent<span class=\"k\">.</span>tagName<span class=\"k\">])</span><span class=\"k\">{</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>isBorder<span class=\"k\">(</span>tmpParent<span class=\"k\">))</span><span class=\"k\">{</span>","                        <span class=\"k\">var</span> val <span class=\"k\">=</span> utils<span class=\"k\">.</span>trim<span class=\"k\">(</span>node<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/border[^:]+:[^;]+;?/gi</span><span class=\"k\">,</span><span class=\"s\">''</span><span class=\"k\">));</span>","                        node<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText <span class=\"k\">=</span> val<span class=\"k\">;</span>","                        <span class=\"k\">if</span><span class=\"k\">(!</span>val<span class=\"k\">)</span><span class=\"k\">{</span>","                            domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>node<span class=\"k\">,</span><span class=\"k\">true</span><span class=\"k\">)</span>","                        <span class=\"k\">}</span>","                        <span class=\"k\">break</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    tmpParent <span class=\"k\">=</span> tmpParent<span class=\"k\">.</span>parentNode<span class=\"k\">;</span>","","                <span class=\"k\">}</span>","","            <span class=\"k\">}</span>","","        <span class=\"k\">}</span><span class=\"k\">);</span>","        range<span class=\"k\">.</span>moveToBookmark<span class=\"k\">(</span>bk<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    me<span class=\"k\">.</span>addInputRule<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>root<span class=\"k\">)</span><span class=\"k\">{</span>","        utils<span class=\"k\">.</span>each<span class=\"k\">(</span>root<span class=\"k\">.</span>getNodesByTagName<span class=\"k\">(</span><span class=\"s\">'u s del font'</span><span class=\"k\">),</span><span class=\"k\">function</span><span class=\"k\">(</span>node<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>node<span class=\"k\">.</span>tagName <span class=\"k\">==</span> <span class=\"s\">'font'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> cssStyle <span class=\"k\">=</span> <span class=\"k\">[];</span>","                <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> p <span class=\"k\">in</span> node<span class=\"k\">.</span>attrs<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">switch</span> <span class=\"k\">(</span>p<span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"k\">case</span> <span class=\"s\">'size'</span><span class=\"k\">:</span>","                            cssStyle<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"s\">'font-size:'</span> <span class=\"k\">+</span> node<span class=\"k\">.</span>attrs<span class=\"k\">[</span>p<span class=\"k\">]</span> <span class=\"k\">+</span> <span class=\"s\">'px'</span><span class=\"k\">);</span>","                            <span class=\"k\">break</span><span class=\"k\">;</span>","                        <span class=\"k\">case</span> <span class=\"s\">'color'</span><span class=\"k\">:</span>","                            cssStyle<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"s\">'color:'</span><span class=\"k\">+</span> node<span class=\"k\">.</span>attrs<span class=\"k\">[</span>p<span class=\"k\">]);</span>","                            <span class=\"k\">break</span><span class=\"k\">;</span>","                        <span class=\"k\">case</span> <span class=\"s\">'face'</span><span class=\"k\">:</span>","                            cssStyle<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"s\">'font-family:'</span><span class=\"k\">+</span> node<span class=\"k\">.</span>attrs<span class=\"k\">[</span>p<span class=\"k\">]);</span>","                            <span class=\"k\">break</span><span class=\"k\">;</span>","                        <span class=\"k\">case</span> <span class=\"s\">'style'</span><span class=\"k\">:</span>","                            cssStyle<span class=\"k\">.</span>push<span class=\"k\">(</span>node<span class=\"k\">.</span>attrs<span class=\"k\">[</span>p<span class=\"k\">]);</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                node<span class=\"k\">.</span>attrs <span class=\"k\">=</span> <span class=\"k\">{</span>","                    <span class=\"s\">'style'</span> <span class=\"k\">:</span> cssStyle<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">';'</span><span class=\"k\">)</span>","                <span class=\"k\">}</span><span class=\"k\">;</span>","            <span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> val <span class=\"k\">=</span> node<span class=\"k\">.</span>tagName <span class=\"k\">==</span> <span class=\"s\">'u'</span> <span class=\"k\">?</span> <span class=\"s\">'underline'</span> <span class=\"k\">:</span> <span class=\"s\">'line-through'</span><span class=\"k\">;</span>","                node<span class=\"k\">.</span>attrs <span class=\"k\">=</span> <span class=\"k\">{</span>","                    <span class=\"s\">'style'</span> <span class=\"k\">:</span> <span class=\"k\">(</span>node<span class=\"k\">.</span>getAttr<span class=\"k\">(</span><span class=\"s\">'style'</span><span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"s\">''</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">'text-decoration:'</span><span class=\"k\">+</span>val<span class=\"k\">+</span><span class=\"s\">';'</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            node<span class=\"k\">.</span>tagName <span class=\"k\">=</span> <span class=\"s\">'span'</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span> <span class=\"k\">var</span> p <span class=\"k\">in</span> fonts <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span> cmd<span class=\"k\">,</span> style <span class=\"k\">)</span> <span class=\"k\">{</span>","            UE<span class=\"k\">.</span>commands<span class=\"k\">[</span>cmd<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">{</span>","                execCommand <span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> cmdName<span class=\"k\">,</span> value <span class=\"k\">)</span> <span class=\"k\">{</span>","                    value <span class=\"k\">=</span> value <span class=\"k\">||</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>queryCommandState<span class=\"k\">(</span>cmdName<span class=\"k\">)</span> <span class=\"k\">?</span> <span class=\"s\">'none'</span> <span class=\"k\">:</span> cmdName <span class=\"k\">==</span> <span class=\"s\">'underline'</span> <span class=\"k\">?</span> <span class=\"s\">'underline'</span> <span class=\"k\">:</span>","                        cmdName <span class=\"k\">==</span> <span class=\"s\">'fontborder'</span> <span class=\"k\">?</span> <span class=\"s\">'1px solid #000'</span> <span class=\"k\">:</span>","                       <span class=\"s\">'line-through'</span><span class=\"k\">);</span>","                    <span class=\"k\">var</span> me <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">,</span>","                        range <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>selection<span class=\"k\">.</span>getRange<span class=\"k\">(),</span>","                        text<span class=\"k\">;</span>","","                    <span class=\"k\">if</span> <span class=\"k\">(</span> value <span class=\"k\">==</span> <span class=\"s\">'default'</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","","                        <span class=\"k\">if</span><span class=\"k\">(</span>range<span class=\"k\">.</span>collapsed<span class=\"k\">)</span><span class=\"k\">{</span>","                            text <span class=\"k\">=</span> me<span class=\"k\">.</span>document<span class=\"k\">.</span>createTextNode<span class=\"k\">(</span><span class=\"s\">'font'</span><span class=\"k\">);</span>","                            range<span class=\"k\">.</span>insertNode<span class=\"k\">(</span>text<span class=\"k\">).</span>select<span class=\"k\">();</span>","","                        <span class=\"k\">}</span>","                        me<span class=\"k\">.</span>execCommand<span class=\"k\">(</span> <span class=\"s\">'removeFormat'</span><span class=\"k\">,</span> <span class=\"s\">'span,a'</span><span class=\"k\">,</span> style<span class=\"k\">);</span>","                        <span class=\"k\">if</span><span class=\"k\">(</span>text<span class=\"k\">)</span><span class=\"k\">{</span>","                            range<span class=\"k\">.</span>setStartBefore<span class=\"k\">(</span>text<span class=\"k\">).</span>setCursor<span class=\"k\">();</span>","                            domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>text<span class=\"k\">);</span>","                        <span class=\"k\">}</span>","","","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                            <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>range<span class=\"k\">.</span>collapsed <span class=\"k\">)</span> <span class=\"k\">{</span>","                                <span class=\"k\">if</span><span class=\"k\">(</span>needCmd<span class=\"k\">[</span>cmd<span class=\"k\">]</span> <span class=\"k\">&amp;&amp;</span> me<span class=\"k\">.</span>queryCommandValue<span class=\"k\">(</span>cmd<span class=\"k\">))</span><span class=\"k\">{</span>","                                     me<span class=\"k\">.</span>execCommand<span class=\"k\">(</span> <span class=\"s\">'removeFormat'</span><span class=\"k\">,</span> <span class=\"s\">'span,a'</span><span class=\"k\">,</span> style <span class=\"k\">);</span>","                                <span class=\"k\">}</span>","                                range <span class=\"k\">=</span> me<span class=\"k\">.</span>selection<span class=\"k\">.</span>getRange<span class=\"k\">();</span>","","                                range<span class=\"k\">.</span>applyInlineStyle<span class=\"k\">(</span> <span class=\"s\">'span'</span><span class=\"k\">,</span> <span class=\"k\">{</span><span class=\"s\">'style'</span><span class=\"k\">:</span>style <span class=\"k\">+</span> <span class=\"s\">':'</span> <span class=\"k\">+</span> value<span class=\"k\">}</span> <span class=\"k\">);</span>","                                mergesibling<span class=\"k\">(</span>range<span class=\"k\">);</span>","                                range<span class=\"k\">.</span>select<span class=\"k\">();</span>","                            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","","                                <span class=\"k\">var</span> span <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>findParentByTagName<span class=\"k\">(</span>range<span class=\"k\">.</span>startContainer<span class=\"k\">,</span><span class=\"s\">'span'</span><span class=\"k\">,</span><span class=\"k\">true</span><span class=\"k\">);</span>","                                text <span class=\"k\">=</span> me<span class=\"k\">.</span>document<span class=\"k\">.</span>createTextNode<span class=\"k\">(</span><span class=\"s\">'font'</span><span class=\"k\">);</span>","                                <span class=\"k\">if</span><span class=\"k\">(</span>span <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>span<span class=\"k\">.</span>children<span class=\"k\">.</span>length <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>span<span class=\"k\">[</span>browser<span class=\"k\">.</span>ie <span class=\"k\">?</span> <span class=\"s\">'innerText'</span><span class=\"k\">:</span><span class=\"s\">'textContent'</span><span class=\"k\">].</span>replace<span class=\"k\">(</span>fillCharReg<span class=\"k\">,</span><span class=\"s\">''</span><span class=\"k\">).</span>length<span class=\"k\">)</span><span class=\"k\">{</span>","                                    <span class=\"c\">//for ie hack when enter</span>","                                    range<span class=\"k\">.</span>insertNode<span class=\"k\">(</span>text<span class=\"k\">);</span>","                                     <span class=\"k\">if</span><span class=\"k\">(</span>needCmd<span class=\"k\">[</span>cmd<span class=\"k\">])</span><span class=\"k\">{</span>","                                         range<span class=\"k\">.</span>selectNode<span class=\"k\">(</span>text<span class=\"k\">).</span>select<span class=\"k\">();</span>","                                         me<span class=\"k\">.</span>execCommand<span class=\"k\">(</span> <span class=\"s\">'removeFormat'</span><span class=\"k\">,</span><span class=\"s\">'span,a'</span><span class=\"k\">,</span> style<span class=\"k\">,</span> <span class=\"k\">null</span> <span class=\"k\">);</span>","","                                         span <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>findParentByTagName<span class=\"k\">(</span>text<span class=\"k\">,</span><span class=\"s\">'span'</span><span class=\"k\">,</span><span class=\"k\">true</span><span class=\"k\">);</span>","                                         range<span class=\"k\">.</span>setStartBefore<span class=\"k\">(</span>text<span class=\"k\">);</span>","","                                    <span class=\"k\">}</span>","                                    span<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText <span class=\"k\">+=</span> <span class=\"s\">';'</span> <span class=\"k\">+</span> style <span class=\"k\">+</span> <span class=\"s\">':'</span> <span class=\"k\">+</span> value<span class=\"k\">;</span>","                                    range<span class=\"k\">.</span>collapse<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">).</span>select<span class=\"k\">();</span>","","","                                <span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>","                                    range<span class=\"k\">.</span>insertNode<span class=\"k\">(</span>text<span class=\"k\">);</span>","                                    range<span class=\"k\">.</span>selectNode<span class=\"k\">(</span>text<span class=\"k\">).</span>select<span class=\"k\">();</span>","                                    span <span class=\"k\">=</span> range<span class=\"k\">.</span>document<span class=\"k\">.</span>createElement<span class=\"k\">(</span> <span class=\"s\">'span'</span> <span class=\"k\">);</span>","","                                    <span class=\"k\">if</span><span class=\"k\">(</span>needCmd<span class=\"k\">[</span>cmd<span class=\"k\">])</span><span class=\"k\">{</span>","                                        <span class=\"c\">//a&#26631;&#31614;&#20869;&#30340;&#19981;&#22788;&#29702;&#36339;&#36807;</span>","                                        <span class=\"k\">if</span><span class=\"k\">(</span>domUtils<span class=\"k\">.</span>findParentByTagName<span class=\"k\">(</span>text<span class=\"k\">,</span><span class=\"s\">'a'</span><span class=\"k\">,</span><span class=\"k\">true</span><span class=\"k\">))</span><span class=\"k\">{</span>","                                            range<span class=\"k\">.</span>setStartBefore<span class=\"k\">(</span>text<span class=\"k\">).</span>setCursor<span class=\"k\">();</span>","                                             domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>text<span class=\"k\">);</span>","                                             <span class=\"k\">return</span><span class=\"k\">;</span>","                                         <span class=\"k\">}</span>","                                         me<span class=\"k\">.</span>execCommand<span class=\"k\">(</span> <span class=\"s\">'removeFormat'</span><span class=\"k\">,</span><span class=\"s\">'span,a'</span><span class=\"k\">,</span> style <span class=\"k\">);</span>","                                    <span class=\"k\">}</span>","","                                    span<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText <span class=\"k\">=</span> style <span class=\"k\">+</span> <span class=\"s\">':'</span> <span class=\"k\">+</span> value<span class=\"k\">;</span>","","","                                    text<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>insertBefore<span class=\"k\">(</span>span<span class=\"k\">,</span>text<span class=\"k\">);</span>","                                    <span class=\"c\">//&#20462;&#22797;&#65292;span&#22871;span &#20294;&#26679;&#24335;&#19981;&#32487;&#25215;&#30340;&#38382;&#39064;</span>","                                    <span class=\"k\">if</span><span class=\"k\">(!</span>browser<span class=\"k\">.</span>ie <span class=\"k\">||</span> browser<span class=\"k\">.</span>ie <span class=\"k\">&amp;&amp;</span> browser<span class=\"k\">.</span>version <span class=\"k\">==</span> <span class=\"s\">9</span><span class=\"k\">)</span><span class=\"k\">{</span>","                                        <span class=\"k\">var</span> spanParent <span class=\"k\">=</span> span<span class=\"k\">.</span>parentNode<span class=\"k\">;</span>","                                        <span class=\"k\">while</span><span class=\"k\">(!</span>domUtils<span class=\"k\">.</span>isBlockElm<span class=\"k\">(</span>spanParent<span class=\"k\">))</span><span class=\"k\">{</span>","                                            <span class=\"k\">if</span><span class=\"k\">(</span>spanParent<span class=\"k\">.</span>tagName <span class=\"k\">==</span> <span class=\"s\">'SPAN'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                                                <span class=\"c\">//opera&#21512;&#24182;style&#19981;&#20250;&#21152;&#20837;\";\"</span>","                                                span<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText <span class=\"k\">=</span> spanParent<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText <span class=\"k\">+</span> <span class=\"s\">\";\"</span> <span class=\"k\">+</span> span<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText<span class=\"k\">;</span>","                                            <span class=\"k\">}</span>","                                            spanParent <span class=\"k\">=</span> spanParent<span class=\"k\">.</span>parentNode<span class=\"k\">;</span>","                                        <span class=\"k\">}</span>","                                    <span class=\"k\">}</span>","","","","                                    <span class=\"k\">if</span><span class=\"k\">(</span>opera<span class=\"k\">)</span><span class=\"k\">{</span>","                                        setTimeout<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","                                            range<span class=\"k\">.</span>setStart<span class=\"k\">(</span>span<span class=\"k\">,</span><span class=\"s\">0</span><span class=\"k\">).</span>collapse<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","                                            mergesibling<span class=\"k\">(</span>range<span class=\"k\">);</span>","                                            range<span class=\"k\">.</span>select<span class=\"k\">();</span>","                                        <span class=\"k\">}</span><span class=\"k\">);</span>","                                    <span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>","                                        range<span class=\"k\">.</span>setStart<span class=\"k\">(</span>span<span class=\"k\">,</span><span class=\"s\">0</span><span class=\"k\">).</span>collapse<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","                                        mergesibling<span class=\"k\">(</span>range<span class=\"k\">);</span>","                                        range<span class=\"k\">.</span>select<span class=\"k\">();</span>","                                    <span class=\"k\">}</span>","","                                    <span class=\"c\">//trace:981</span>","                                    <span class=\"c\">//domUtils.mergeToParent(span)</span>","                                <span class=\"k\">}</span>","                                domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>text<span class=\"k\">);</span>","                            <span class=\"k\">}</span>","","","                    <span class=\"k\">}</span>","                    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                queryCommandValue <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>cmdName<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> startNode <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>selection<span class=\"k\">.</span>getStart<span class=\"k\">();</span>","","                    <span class=\"c\">//trace:946</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>cmdName <span class=\"k\">==</span> <span class=\"s\">'underline'</span><span class=\"k\">||</span>cmdName<span class=\"k\">==</span><span class=\"s\">'strikethrough'</span> <span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"k\">var</span> tmpNode <span class=\"k\">=</span> startNode<span class=\"k\">,</span>value<span class=\"k\">;</span>","                        <span class=\"k\">while</span><span class=\"k\">(</span>tmpNode <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>domUtils<span class=\"k\">.</span>isBlockElm<span class=\"k\">(</span>tmpNode<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>domUtils<span class=\"k\">.</span>isBody<span class=\"k\">(</span>tmpNode<span class=\"k\">))</span><span class=\"k\">{</span>","                            <span class=\"k\">if</span><span class=\"k\">(</span>tmpNode<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">1</span><span class=\"k\">)</span><span class=\"k\">{</span>","                                value <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>getComputedStyle<span class=\"k\">(</span> tmpNode<span class=\"k\">,</span> style <span class=\"k\">);</span>","","                                <span class=\"k\">if</span><span class=\"k\">(</span>value <span class=\"k\">!=</span> <span class=\"s\">'none'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                                    <span class=\"k\">return</span> value<span class=\"k\">;</span>","                                <span class=\"k\">}</span>","                            <span class=\"k\">}</span>","","                            tmpNode <span class=\"k\">=</span> tmpNode<span class=\"k\">.</span>parentNode<span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                        <span class=\"k\">return</span> <span class=\"s\">'none'</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>cmdName <span class=\"k\">==</span> <span class=\"s\">'fontborder'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"k\">var</span> tmp <span class=\"k\">=</span> startNode<span class=\"k\">,</span>val<span class=\"k\">;</span>","                        <span class=\"k\">while</span><span class=\"k\">(</span>tmp <span class=\"k\">&amp;&amp;</span> dtd<span class=\"k\">.</span>$inline<span class=\"k\">[</span>tmp<span class=\"k\">.</span>tagName<span class=\"k\">])</span><span class=\"k\">{</span>","                            <span class=\"k\">if</span><span class=\"k\">(</span>val <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>getComputedStyle<span class=\"k\">(</span> tmp<span class=\"k\">,</span> <span class=\"s\">'border'</span> <span class=\"k\">))</span><span class=\"k\">{</span>","                                <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"s\">/1px/</span><span class=\"k\">.</span>test<span class=\"k\">(</span>val<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"s\">/solid/</span><span class=\"k\">.</span>test<span class=\"k\">(</span>val<span class=\"k\">))</span><span class=\"k\">{</span>","                                    <span class=\"k\">return</span> val<span class=\"k\">;</span>","                                <span class=\"k\">}</span>","                            <span class=\"k\">}</span>","                            tmp <span class=\"k\">=</span> tmp<span class=\"k\">.</span>parentNode<span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                        <span class=\"k\">return</span> <span class=\"s\">''</span>","                    <span class=\"k\">}</span>","                    <span class=\"k\">return</span>  domUtils<span class=\"k\">.</span>getComputedStyle<span class=\"k\">(</span> startNode<span class=\"k\">,</span> style <span class=\"k\">);</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                queryCommandState <span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>cmdName<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">if</span><span class=\"k\">(!</span>needCmd<span class=\"k\">[</span>cmdName<span class=\"k\">])</span>","                        <span class=\"k\">return</span> <span class=\"s\">0</span><span class=\"k\">;</span>","                    <span class=\"k\">var</span> val <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>queryCommandValue<span class=\"k\">(</span>cmdName<span class=\"k\">);</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>cmdName <span class=\"k\">==</span> <span class=\"s\">'fontborder'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"k\">return</span> <span class=\"s\">/1px/</span><span class=\"k\">.</span>test<span class=\"k\">(</span>val<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"s\">/solid/</span><span class=\"k\">.</span>test<span class=\"k\">(</span>val<span class=\"k\">)</span>","                    <span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>","                        <span class=\"k\">return</span>  val <span class=\"k\">==</span> <span class=\"k\">(</span>cmdName <span class=\"k\">==</span> <span class=\"s\">'underline'</span> <span class=\"k\">?</span>","                            <span class=\"s\">'underline'</span> <span class=\"k\">:</span> <span class=\"s\">'line-through'</span><span class=\"k\">);</span>","                    <span class=\"k\">}</span>","","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">)(</span> p<span class=\"k\">,</span> fonts<span class=\"k\">[</span>p<span class=\"k\">]</span> <span class=\"k\">);</span>","    <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>"];
_$jscoverage['plugins/font.js'][12]++;
UE.plugins.font = (function () {
  _$jscoverage['plugins/font.js'][13]++;
  var me = this, fonts = {"forecolor": "color", "backcolor": "background-color", "fontsize": "font-size", "fontfamily": "font-family", "underline": "text-decoration", "strikethrough": "text-decoration", "fontborder": "border"}, needCmd = {"underline": 1, "strikethrough": 1, "fontborder": 1};
  _$jscoverage['plugins/font.js'][24]++;
  me.setOpt({"fontfamily": [{name: "songti", val: "\u5b8b\u4f53,SimSun"}, {name: "yahei", val: "\u5fae\u8f6f\u96c5\u9ed1,Microsoft YaHei"}, {name: "kaiti", val: "\u6977\u4f53,\u6977\u4f53_GB2312, SimKai"}, {name: "heiti", val: "\u9ed1\u4f53, SimHei"}, {name: "lishu", val: "\u96b6\u4e66, SimLi"}, {name: "andaleMono", val: "andale mono"}, {name: "arial", val: "arial, helvetica,sans-serif"}, {name: "arialBlack", val: "arial black,avant garde"}, {name: "comicSansMs", val: "comic sans ms"}, {name: "impact", val: "impact,chicago"}, {name: "timesNewRoman", val: "times new roman"}], "fontsize": [10, 11, 12, 14, 16, 18, 20, 24, 36]});
  _$jscoverage['plugins/font.js'][40]++;
  function mergesibling(range) {
    _$jscoverage['plugins/font.js'][41]++;
    var collapsed = range.collapsed, bk = range.createBookmark(), common;
    _$jscoverage['plugins/font.js'][43]++;
    if (collapsed) {
      _$jscoverage['plugins/font.js'][44]++;
      common = bk.start.parentNode;
      _$jscoverage['plugins/font.js'][45]++;
      while (dtd.$inline[common.tagName]) {
        _$jscoverage['plugins/font.js'][46]++;
        common = common.parentNode;
}
    }
    else {
      _$jscoverage['plugins/font.js'][50]++;
      common = domUtils.getCommonAncestor(bk.start, bk.end);
    }
    _$jscoverage['plugins/font.js'][53]++;
    utils.each(domUtils.getElementsByTagName(common, "span"), (function (node) {
  _$jscoverage['plugins/font.js'][54]++;
  if ((! node.parentNode)) {
    _$jscoverage['plugins/font.js'][55]++;
    return;
  }
  _$jscoverage['plugins/font.js'][57]++;
  function isBorder(n) {
    _$jscoverage['plugins/font.js'][58]++;
    if ((! n)) {
      _$jscoverage['plugins/font.js'][59]++;
      return false;
    }
    _$jscoverage['plugins/font.js'][60]++;
    if ((n.tagName != "SPAN")) {
      _$jscoverage['plugins/font.js'][61]++;
      return false;
    }
    _$jscoverage['plugins/font.js'][62]++;
    var val;
    _$jscoverage['plugins/font.js'][63]++;
    if ((val = domUtils.getComputedStyle(n, "border"))) {
      _$jscoverage['plugins/font.js'][64]++;
      if ((/1px/.test(val) && /solid/.test(val))) {
        _$jscoverage['plugins/font.js'][65]++;
        return true;
      }
    }
    _$jscoverage['plugins/font.js'][68]++;
    return false;
}
  _$jscoverage['plugins/font.js'][70]++;
  function nextSibling(node) {
    _$jscoverage['plugins/font.js'][71]++;
    var next = node.nextSibling;
    _$jscoverage['plugins/font.js'][72]++;
    if ((next && domUtils.isBookmarkNode(next))) {
      _$jscoverage['plugins/font.js'][73]++;
      next = next.nextSibling;
    }
    _$jscoverage['plugins/font.js'][75]++;
    return next;
}
  _$jscoverage['plugins/font.js'][78]++;
  var span = me.document.createElement("span");
  _$jscoverage['plugins/font.js'][79]++;
  span.style.cssText = "border:1px solid #000";
  _$jscoverage['plugins/font.js'][80]++;
  node.parentNode.insertBefore(span, node);
  _$jscoverage['plugins/font.js'][81]++;
  while ((isBorder(node) && isBorder(nextSibling(node)))) {
    _$jscoverage['plugins/font.js'][82]++;
    var val = utils.trim(node.style.cssText.replace(/border[^:]+:[^;]+;?/gi, ""));
    _$jscoverage['plugins/font.js'][83]++;
    node.style.cssText = val;
    _$jscoverage['plugins/font.js'][84]++;
    var tmp = node.nextSibling;
    _$jscoverage['plugins/font.js'][85]++;
    if ((! val)) {
      _$jscoverage['plugins/font.js'][86]++;
      while (node.firstChild) {
        _$jscoverage['plugins/font.js'][87]++;
        if (isBorder(node.firstChild)) {
          _$jscoverage['plugins/font.js'][88]++;
          node.firstChild.style.cssText = node.firstChild.style.cssText.replace(/border[^:]+:[^;]+;?/gi, "");
        }
        _$jscoverage['plugins/font.js'][90]++;
        span.appendChild(node.firstChild);
}
      _$jscoverage['plugins/font.js'][92]++;
      domUtils.remove(node);
    }
    else {
      _$jscoverage['plugins/font.js'][94]++;
      span.appendChild(node);
    }
    _$jscoverage['plugins/font.js'][96]++;
    if (domUtils.isBookmarkNode(tmp)) {
      _$jscoverage['plugins/font.js'][97]++;
      node = tmp.nextSibling;
      _$jscoverage['plugins/font.js'][98]++;
      span.appendChild(tmp);
    }
    else {
      _$jscoverage['plugins/font.js'][100]++;
      node = tmp;
    }
}
  _$jscoverage['plugins/font.js'][103]++;
  if ((! span.firstChild)) {
    _$jscoverage['plugins/font.js'][104]++;
    domUtils.remove(span);
  }
  else {
    _$jscoverage['plugins/font.js'][106]++;
    if ((isBorder(span) && isBorder(nextSibling(span)))) {
      _$jscoverage['plugins/font.js'][107]++;
      node = span.nextSibling;
      _$jscoverage['plugins/font.js'][108]++;
      var val = utils.trim(node.style.cssText.replace(/border[^:]+:[^;]+;?/gi, ""));
      _$jscoverage['plugins/font.js'][109]++;
      node.style.cssText = val;
      _$jscoverage['plugins/font.js'][111]++;
      if ((! val)) {
        _$jscoverage['plugins/font.js'][112]++;
        while (node.firstChild) {
          _$jscoverage['plugins/font.js'][113]++;
          if (isBorder(node.firstChild)) {
            _$jscoverage['plugins/font.js'][114]++;
            node.firstChild.style.cssText = node.firstChild.style.cssText.replace(/border[^:]+:[^;];?/, "");
          }
          _$jscoverage['plugins/font.js'][116]++;
          span.appendChild(node.firstChild);
}
        _$jscoverage['plugins/font.js'][118]++;
        domUtils.remove(node);
      }
      else {
        _$jscoverage['plugins/font.js'][120]++;
        span.appendChild(node);
      }
    }
  }
  _$jscoverage['plugins/font.js'][124]++;
  if (isBorder(node)) {
    _$jscoverage['plugins/font.js'][125]++;
    var tmpParent = node.parentNode;
    _$jscoverage['plugins/font.js'][126]++;
    while (dtd.$inline[tmpParent.tagName]) {
      _$jscoverage['plugins/font.js'][127]++;
      if (isBorder(tmpParent)) {
        _$jscoverage['plugins/font.js'][128]++;
        var val = utils.trim(node.style.cssText.replace(/border[^:]+:[^;]+;?/gi, ""));
        _$jscoverage['plugins/font.js'][129]++;
        node.style.cssText = val;
        _$jscoverage['plugins/font.js'][130]++;
        if ((! val)) {
          _$jscoverage['plugins/font.js'][131]++;
          domUtils.remove(node, true);
        }
        _$jscoverage['plugins/font.js'][133]++;
        break;
      }
      _$jscoverage['plugins/font.js'][135]++;
      tmpParent = tmpParent.parentNode;
}
  }
}));
    _$jscoverage['plugins/font.js'][142]++;
    range.moveToBookmark(bk);
}
  _$jscoverage['plugins/font.js'][144]++;
  me.addInputRule((function (root) {
  _$jscoverage['plugins/font.js'][145]++;
  utils.each(root.getNodesByTagName("u s del font"), (function (node) {
  _$jscoverage['plugins/font.js'][146]++;
  if ((node.tagName == "font")) {
    _$jscoverage['plugins/font.js'][147]++;
    var cssStyle = [];
    _$jscoverage['plugins/font.js'][148]++;
    for (var p in node.attrs) {
      _$jscoverage['plugins/font.js'][149]++;
      switch (p) {
      case "size":
        _$jscoverage['plugins/font.js'][151]++;
        cssStyle.push(("font-size:" + node.attrs[p] + "px"));
        _$jscoverage['plugins/font.js'][152]++;
        break;
      case "color":
        _$jscoverage['plugins/font.js'][154]++;
        cssStyle.push(("color:" + node.attrs[p]));
        _$jscoverage['plugins/font.js'][155]++;
        break;
      case "face":
        _$jscoverage['plugins/font.js'][157]++;
        cssStyle.push(("font-family:" + node.attrs[p]));
        _$jscoverage['plugins/font.js'][158]++;
        break;
      case "style":
        _$jscoverage['plugins/font.js'][160]++;
        cssStyle.push(node.attrs[p]);
      }
}
    _$jscoverage['plugins/font.js'][163]++;
    node.attrs = {"style": cssStyle.join(";")};
  }
  else {
    _$jscoverage['plugins/font.js'][167]++;
    var val = ((node.tagName == "u")? "underline": "line-through");
    _$jscoverage['plugins/font.js'][168]++;
    node.attrs = {"style": ((node.getAttr("style") || "") + "text-decoration:" + val + ";")};
  }
  _$jscoverage['plugins/font.js'][172]++;
  node.tagName = "span";
}));
}));
  _$jscoverage['plugins/font.js'][175]++;
  for (var p in fonts) {
    _$jscoverage['plugins/font.js'][176]++;
    (function (cmd, style) {
  _$jscoverage['plugins/font.js'][177]++;
  UE.commands[cmd] = {execCommand: (function (cmdName, value) {
  _$jscoverage['plugins/font.js'][179]++;
  value = (value || (this.queryCommandState(cmdName)? "none": ((cmdName == "underline")? "underline": ((cmdName == "fontborder")? "1px solid #000": "line-through"))));
  _$jscoverage['plugins/font.js'][182]++;
  var me = this, range = this.selection.getRange(), text;
  _$jscoverage['plugins/font.js'][186]++;
  if ((value == "default")) {
    _$jscoverage['plugins/font.js'][188]++;
    if (range.collapsed) {
      _$jscoverage['plugins/font.js'][189]++;
      text = me.document.createTextNode("font");
      _$jscoverage['plugins/font.js'][190]++;
      range.insertNode(text).select();
    }
    _$jscoverage['plugins/font.js'][193]++;
    me.execCommand("removeFormat", "span,a", style);
    _$jscoverage['plugins/font.js'][194]++;
    if (text) {
      _$jscoverage['plugins/font.js'][195]++;
      range.setStartBefore(text).setCursor();
      _$jscoverage['plugins/font.js'][196]++;
      domUtils.remove(text);
    }
  }
  else {
    _$jscoverage['plugins/font.js'][201]++;
    if ((! range.collapsed)) {
      _$jscoverage['plugins/font.js'][202]++;
      if ((needCmd[cmd] && me.queryCommandValue(cmd))) {
        _$jscoverage['plugins/font.js'][203]++;
        me.execCommand("removeFormat", "span,a", style);
      }
      _$jscoverage['plugins/font.js'][205]++;
      range = me.selection.getRange();
      _$jscoverage['plugins/font.js'][207]++;
      range.applyInlineStyle("span", {"style": (style + ":" + value)});
      _$jscoverage['plugins/font.js'][208]++;
      mergesibling(range);
      _$jscoverage['plugins/font.js'][209]++;
      range.select();
    }
    else {
      _$jscoverage['plugins/font.js'][212]++;
      var span = domUtils.findParentByTagName(range.startContainer, "span", true);
      _$jscoverage['plugins/font.js'][213]++;
      text = me.document.createTextNode("font");
      _$jscoverage['plugins/font.js'][214]++;
      if ((span && (! span.children.length) && (! span[(browser.ie? "innerText": "textContent")].replace(fillCharReg, "").length))) {
        _$jscoverage['plugins/font.js'][216]++;
        range.insertNode(text);
        _$jscoverage['plugins/font.js'][217]++;
        if (needCmd[cmd]) {
          _$jscoverage['plugins/font.js'][218]++;
          range.selectNode(text).select();
          _$jscoverage['plugins/font.js'][219]++;
          me.execCommand("removeFormat", "span,a", style, null);
          _$jscoverage['plugins/font.js'][221]++;
          span = domUtils.findParentByTagName(text, "span", true);
          _$jscoverage['plugins/font.js'][222]++;
          range.setStartBefore(text);
        }
        _$jscoverage['plugins/font.js'][225]++;
        span.style.cssText += (";" + style + ":" + value);
        _$jscoverage['plugins/font.js'][226]++;
        range.collapse(true).select();
      }
      else {
        _$jscoverage['plugins/font.js'][230]++;
        range.insertNode(text);
        _$jscoverage['plugins/font.js'][231]++;
        range.selectNode(text).select();
        _$jscoverage['plugins/font.js'][232]++;
        span = range.document.createElement("span");
        _$jscoverage['plugins/font.js'][234]++;
        if (needCmd[cmd]) {
          _$jscoverage['plugins/font.js'][236]++;
          if (domUtils.findParentByTagName(text, "a", true)) {
            _$jscoverage['plugins/font.js'][237]++;
            range.setStartBefore(text).setCursor();
            _$jscoverage['plugins/font.js'][238]++;
            domUtils.remove(text);
            _$jscoverage['plugins/font.js'][239]++;
            return;
          }
          _$jscoverage['plugins/font.js'][241]++;
          me.execCommand("removeFormat", "span,a", style);
        }
        _$jscoverage['plugins/font.js'][244]++;
        span.style.cssText = (style + ":" + value);
        _$jscoverage['plugins/font.js'][247]++;
        text.parentNode.insertBefore(span, text);
        _$jscoverage['plugins/font.js'][249]++;
        if (((! browser.ie) || (browser.ie && (browser.version == 9)))) {
          _$jscoverage['plugins/font.js'][250]++;
          var spanParent = span.parentNode;
          _$jscoverage['plugins/font.js'][251]++;
          while ((! domUtils.isBlockElm(spanParent))) {
            _$jscoverage['plugins/font.js'][252]++;
            if ((spanParent.tagName == "SPAN")) {
              _$jscoverage['plugins/font.js'][254]++;
              span.style.cssText = (spanParent.style.cssText + ";" + span.style.cssText);
            }
            _$jscoverage['plugins/font.js'][256]++;
            spanParent = spanParent.parentNode;
}
        }
        _$jscoverage['plugins/font.js'][262]++;
        if (opera) {
          _$jscoverage['plugins/font.js'][263]++;
          setTimeout((function () {
  _$jscoverage['plugins/font.js'][264]++;
  range.setStart(span, 0).collapse(true);
  _$jscoverage['plugins/font.js'][265]++;
  mergesibling(range);
  _$jscoverage['plugins/font.js'][266]++;
  range.select();
}));
        }
        else {
          _$jscoverage['plugins/font.js'][269]++;
          range.setStart(span, 0).collapse(true);
          _$jscoverage['plugins/font.js'][270]++;
          mergesibling(range);
          _$jscoverage['plugins/font.js'][271]++;
          range.select();
        }
      }
      _$jscoverage['plugins/font.js'][277]++;
      domUtils.remove(text);
    }
  }
  _$jscoverage['plugins/font.js'][282]++;
  return true;
}), queryCommandValue: (function (cmdName) {
  _$jscoverage['plugins/font.js'][285]++;
  var startNode = this.selection.getStart();
  _$jscoverage['plugins/font.js'][288]++;
  if (((cmdName == "underline") || (cmdName == "strikethrough"))) {
    _$jscoverage['plugins/font.js'][289]++;
    var tmpNode = startNode, value;
    _$jscoverage['plugins/font.js'][290]++;
    while ((tmpNode && (! domUtils.isBlockElm(tmpNode)) && (! domUtils.isBody(tmpNode)))) {
      _$jscoverage['plugins/font.js'][291]++;
      if ((tmpNode.nodeType == 1)) {
        _$jscoverage['plugins/font.js'][292]++;
        value = domUtils.getComputedStyle(tmpNode, style);
        _$jscoverage['plugins/font.js'][294]++;
        if ((value != "none")) {
          _$jscoverage['plugins/font.js'][295]++;
          return value;
        }
      }
      _$jscoverage['plugins/font.js'][299]++;
      tmpNode = tmpNode.parentNode;
}
    _$jscoverage['plugins/font.js'][301]++;
    return "none";
  }
  _$jscoverage['plugins/font.js'][303]++;
  if ((cmdName == "fontborder")) {
    _$jscoverage['plugins/font.js'][304]++;
    var tmp = startNode, val;
    _$jscoverage['plugins/font.js'][305]++;
    while ((tmp && dtd.$inline[tmp.tagName])) {
      _$jscoverage['plugins/font.js'][306]++;
      if ((val = domUtils.getComputedStyle(tmp, "border"))) {
        _$jscoverage['plugins/font.js'][307]++;
        if ((/1px/.test(val) && /solid/.test(val))) {
          _$jscoverage['plugins/font.js'][308]++;
          return val;
        }
      }
      _$jscoverage['plugins/font.js'][311]++;
      tmp = tmp.parentNode;
}
    _$jscoverage['plugins/font.js'][313]++;
    return "";
  }
  _$jscoverage['plugins/font.js'][315]++;
  return domUtils.getComputedStyle(startNode, style);
}), queryCommandState: (function (cmdName) {
  _$jscoverage['plugins/font.js'][318]++;
  if ((! needCmd[cmdName])) {
    _$jscoverage['plugins/font.js'][319]++;
    return 0;
  }
  _$jscoverage['plugins/font.js'][320]++;
  var val = this.queryCommandValue(cmdName);
  _$jscoverage['plugins/font.js'][321]++;
  if ((cmdName == "fontborder")) {
    _$jscoverage['plugins/font.js'][322]++;
    return (/1px/.test(val) && /solid/.test(val));
  }
  else {
    _$jscoverage['plugins/font.js'][324]++;
    return (val == ((cmdName == "underline")? "underline": "line-through"));
  }
})};
})(p, fonts[p]);
}
});
