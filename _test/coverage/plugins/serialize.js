/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['plugins/serialize.js']) {
  _$jscoverage['plugins/serialize.js'] = [];
  _$jscoverage['plugins/serialize.js'][5] = 0;
  _$jscoverage['plugins/serialize.js'][6] = 0;
  _$jscoverage['plugins/serialize.js'][9] = 0;
  _$jscoverage['plugins/serialize.js'][10] = 0;
  _$jscoverage['plugins/serialize.js'][11] = 0;
  _$jscoverage['plugins/serialize.js'][14] = 0;
  _$jscoverage['plugins/serialize.js'][18] = 0;
  _$jscoverage['plugins/serialize.js'][35] = 0;
  _$jscoverage['plugins/serialize.js'][43] = 0;
  _$jscoverage['plugins/serialize.js'][45] = 0;
  _$jscoverage['plugins/serialize.js'][49] = 0;
  _$jscoverage['plugins/serialize.js'][50] = 0;
  _$jscoverage['plugins/serialize.js'][52] = 0;
  _$jscoverage['plugins/serialize.js'][53] = 0;
  _$jscoverage['plugins/serialize.js'][54] = 0;
  _$jscoverage['plugins/serialize.js'][55] = 0;
  _$jscoverage['plugins/serialize.js'][56] = 0;
  _$jscoverage['plugins/serialize.js'][58] = 0;
  _$jscoverage['plugins/serialize.js'][61] = 0;
  _$jscoverage['plugins/serialize.js'][62] = 0;
  _$jscoverage['plugins/serialize.js'][63] = 0;
  _$jscoverage['plugins/serialize.js'][64] = 0;
  _$jscoverage['plugins/serialize.js'][65] = 0;
  _$jscoverage['plugins/serialize.js'][66] = 0;
  _$jscoverage['plugins/serialize.js'][68] = 0;
  _$jscoverage['plugins/serialize.js'][69] = 0;
  _$jscoverage['plugins/serialize.js'][70] = 0;
  _$jscoverage['plugins/serialize.js'][73] = 0;
  _$jscoverage['plugins/serialize.js'][74] = 0;
  _$jscoverage['plugins/serialize.js'][75] = 0;
  _$jscoverage['plugins/serialize.js'][77] = 0;
  _$jscoverage['plugins/serialize.js'][78] = 0;
  _$jscoverage['plugins/serialize.js'][79] = 0;
  _$jscoverage['plugins/serialize.js'][81] = 0;
  _$jscoverage['plugins/serialize.js'][82] = 0;
  _$jscoverage['plugins/serialize.js'][86] = 0;
  _$jscoverage['plugins/serialize.js'][87] = 0;
  _$jscoverage['plugins/serialize.js'][88] = 0;
  _$jscoverage['plugins/serialize.js'][89] = 0;
  _$jscoverage['plugins/serialize.js'][91] = 0;
  _$jscoverage['plugins/serialize.js'][92] = 0;
  _$jscoverage['plugins/serialize.js'][94] = 0;
  _$jscoverage['plugins/serialize.js'][95] = 0;
  _$jscoverage['plugins/serialize.js'][96] = 0;
  _$jscoverage['plugins/serialize.js'][97] = 0;
  _$jscoverage['plugins/serialize.js'][102] = 0;
  _$jscoverage['plugins/serialize.js'][103] = 0;
  _$jscoverage['plugins/serialize.js'][108] = 0;
  _$jscoverage['plugins/serialize.js'][109] = 0;
  _$jscoverage['plugins/serialize.js'][110] = 0;
  _$jscoverage['plugins/serialize.js'][111] = 0;
  _$jscoverage['plugins/serialize.js'][113] = 0;
  _$jscoverage['plugins/serialize.js'][115] = 0;
  _$jscoverage['plugins/serialize.js'][116] = 0;
  _$jscoverage['plugins/serialize.js'][119] = 0;
  _$jscoverage['plugins/serialize.js'][120] = 0;
  _$jscoverage['plugins/serialize.js'][124] = 0;
  _$jscoverage['plugins/serialize.js'][126] = 0;
  _$jscoverage['plugins/serialize.js'][131] = 0;
  _$jscoverage['plugins/serialize.js'][133] = 0;
  _$jscoverage['plugins/serialize.js'][134] = 0;
  _$jscoverage['plugins/serialize.js'][135] = 0;
  _$jscoverage['plugins/serialize.js'][138] = 0;
  _$jscoverage['plugins/serialize.js'][139] = 0;
  _$jscoverage['plugins/serialize.js'][141] = 0;
  _$jscoverage['plugins/serialize.js'][144] = 0;
  _$jscoverage['plugins/serialize.js'][145] = 0;
  _$jscoverage['plugins/serialize.js'][149] = 0;
  _$jscoverage['plugins/serialize.js'][150] = 0;
  _$jscoverage['plugins/serialize.js'][153] = 0;
  _$jscoverage['plugins/serialize.js'][154] = 0;
  _$jscoverage['plugins/serialize.js'][155] = 0;
  _$jscoverage['plugins/serialize.js'][163] = 0;
  _$jscoverage['plugins/serialize.js'][165] = 0;
  _$jscoverage['plugins/serialize.js'][166] = 0;
  _$jscoverage['plugins/serialize.js'][167] = 0;
  _$jscoverage['plugins/serialize.js'][168] = 0;
  _$jscoverage['plugins/serialize.js'][171] = 0;
  _$jscoverage['plugins/serialize.js'][172] = 0;
  _$jscoverage['plugins/serialize.js'][173] = 0;
  _$jscoverage['plugins/serialize.js'][174] = 0;
  _$jscoverage['plugins/serialize.js'][176] = 0;
  _$jscoverage['plugins/serialize.js'][177] = 0;
  _$jscoverage['plugins/serialize.js'][179] = 0;
  _$jscoverage['plugins/serialize.js'][184] = 0;
  _$jscoverage['plugins/serialize.js'][185] = 0;
  _$jscoverage['plugins/serialize.js'][186] = 0;
  _$jscoverage['plugins/serialize.js'][187] = 0;
  _$jscoverage['plugins/serialize.js'][193] = 0;
  _$jscoverage['plugins/serialize.js'][195] = 0;
  _$jscoverage['plugins/serialize.js'][198] = 0;
  _$jscoverage['plugins/serialize.js'][201] = 0;
  _$jscoverage['plugins/serialize.js'][206] = 0;
  _$jscoverage['plugins/serialize.js'][207] = 0;
  _$jscoverage['plugins/serialize.js'][210] = 0;
  _$jscoverage['plugins/serialize.js'][217] = 0;
  _$jscoverage['plugins/serialize.js'][223] = 0;
  _$jscoverage['plugins/serialize.js'][224] = 0;
  _$jscoverage['plugins/serialize.js'][225] = 0;
  _$jscoverage['plugins/serialize.js'][227] = 0;
  _$jscoverage['plugins/serialize.js'][233] = 0;
  _$jscoverage['plugins/serialize.js'][234] = 0;
  _$jscoverage['plugins/serialize.js'][243] = 0;
  _$jscoverage['plugins/serialize.js'][245] = 0;
  _$jscoverage['plugins/serialize.js'][246] = 0;
  _$jscoverage['plugins/serialize.js'][248] = 0;
  _$jscoverage['plugins/serialize.js'][250] = 0;
  _$jscoverage['plugins/serialize.js'][251] = 0;
  _$jscoverage['plugins/serialize.js'][260] = 0;
  _$jscoverage['plugins/serialize.js'][265] = 0;
  _$jscoverage['plugins/serialize.js'][266] = 0;
  _$jscoverage['plugins/serialize.js'][272] = 0;
  _$jscoverage['plugins/serialize.js'][273] = 0;
  _$jscoverage['plugins/serialize.js'][274] = 0;
  _$jscoverage['plugins/serialize.js'][283] = 0;
  _$jscoverage['plugins/serialize.js'][284] = 0;
  _$jscoverage['plugins/serialize.js'][285] = 0;
  _$jscoverage['plugins/serialize.js'][287] = 0;
  _$jscoverage['plugins/serialize.js'][290] = 0;
  _$jscoverage['plugins/serialize.js'][291] = 0;
  _$jscoverage['plugins/serialize.js'][293] = 0;
  _$jscoverage['plugins/serialize.js'][294] = 0;
  _$jscoverage['plugins/serialize.js'][297] = 0;
  _$jscoverage['plugins/serialize.js'][298] = 0;
  _$jscoverage['plugins/serialize.js'][299] = 0;
  _$jscoverage['plugins/serialize.js'][302] = 0;
  _$jscoverage['plugins/serialize.js'][303] = 0;
  _$jscoverage['plugins/serialize.js'][304] = 0;
  _$jscoverage['plugins/serialize.js'][306] = 0;
  _$jscoverage['plugins/serialize.js'][307] = 0;
  _$jscoverage['plugins/serialize.js'][309] = 0;
  _$jscoverage['plugins/serialize.js'][311] = 0;
  _$jscoverage['plugins/serialize.js'][314] = 0;
  _$jscoverage['plugins/serialize.js'][315] = 0;
  _$jscoverage['plugins/serialize.js'][316] = 0;
  _$jscoverage['plugins/serialize.js'][317] = 0;
  _$jscoverage['plugins/serialize.js'][319] = 0;
  _$jscoverage['plugins/serialize.js'][322] = 0;
  _$jscoverage['plugins/serialize.js'][324] = 0;
  _$jscoverage['plugins/serialize.js'][325] = 0;
  _$jscoverage['plugins/serialize.js'][326] = 0;
  _$jscoverage['plugins/serialize.js'][331] = 0;
  _$jscoverage['plugins/serialize.js'][333] = 0;
  _$jscoverage['plugins/serialize.js'][334] = 0;
  _$jscoverage['plugins/serialize.js'][338] = 0;
  _$jscoverage['plugins/serialize.js'][340] = 0;
  _$jscoverage['plugins/serialize.js'][343] = 0;
  _$jscoverage['plugins/serialize.js'][346] = 0;
  _$jscoverage['plugins/serialize.js'][350] = 0;
  _$jscoverage['plugins/serialize.js'][358] = 0;
  _$jscoverage['plugins/serialize.js'][365] = 0;
  _$jscoverage['plugins/serialize.js'][366] = 0;
  _$jscoverage['plugins/serialize.js'][367] = 0;
  _$jscoverage['plugins/serialize.js'][369] = 0;
  _$jscoverage['plugins/serialize.js'][370] = 0;
  _$jscoverage['plugins/serialize.js'][371] = 0;
  _$jscoverage['plugins/serialize.js'][372] = 0;
  _$jscoverage['plugins/serialize.js'][374] = 0;
  _$jscoverage['plugins/serialize.js'][376] = 0;
  _$jscoverage['plugins/serialize.js'][378] = 0;
  _$jscoverage['plugins/serialize.js'][381] = 0;
  _$jscoverage['plugins/serialize.js'][382] = 0;
  _$jscoverage['plugins/serialize.js'][384] = 0;
  _$jscoverage['plugins/serialize.js'][385] = 0;
  _$jscoverage['plugins/serialize.js'][389] = 0;
  _$jscoverage['plugins/serialize.js'][392] = 0;
  _$jscoverage['plugins/serialize.js'][393] = 0;
  _$jscoverage['plugins/serialize.js'][394] = 0;
  _$jscoverage['plugins/serialize.js'][395] = 0;
  _$jscoverage['plugins/serialize.js'][396] = 0;
  _$jscoverage['plugins/serialize.js'][397] = 0;
  _$jscoverage['plugins/serialize.js'][398] = 0;
  _$jscoverage['plugins/serialize.js'][399] = 0;
  _$jscoverage['plugins/serialize.js'][400] = 0;
  _$jscoverage['plugins/serialize.js'][402] = 0;
  _$jscoverage['plugins/serialize.js'][406] = 0;
  _$jscoverage['plugins/serialize.js'][415] = 0;
  _$jscoverage['plugins/serialize.js'][417] = 0;
  _$jscoverage['plugins/serialize.js'][420] = 0;
  _$jscoverage['plugins/serialize.js'][445] = 0;
  _$jscoverage['plugins/serialize.js'][446] = 0;
  _$jscoverage['plugins/serialize.js'][447] = 0;
  _$jscoverage['plugins/serialize.js'][452] = 0;
  _$jscoverage['plugins/serialize.js'][453] = 0;
  _$jscoverage['plugins/serialize.js'][454] = 0;
  _$jscoverage['plugins/serialize.js'][455] = 0;
  _$jscoverage['plugins/serialize.js'][457] = 0;
  _$jscoverage['plugins/serialize.js'][462] = 0;
  _$jscoverage['plugins/serialize.js'][577] = 0;
  _$jscoverage['plugins/serialize.js'][580] = 0;
  _$jscoverage['plugins/serialize.js'][581] = 0;
  _$jscoverage['plugins/serialize.js'][582] = 0;
  _$jscoverage['plugins/serialize.js'][583] = 0;
  _$jscoverage['plugins/serialize.js'][584] = 0;
  _$jscoverage['plugins/serialize.js'][588] = 0;
  _$jscoverage['plugins/serialize.js'][590] = 0;
  _$jscoverage['plugins/serialize.js'][661] = 0;
  _$jscoverage['plugins/serialize.js'][664] = 0;
  _$jscoverage['plugins/serialize.js'][666] = 0;
  _$jscoverage['plugins/serialize.js'][667] = 0;
  _$jscoverage['plugins/serialize.js'][669] = 0;
  _$jscoverage['plugins/serialize.js'][670] = 0;
  _$jscoverage['plugins/serialize.js'][671] = 0;
  _$jscoverage['plugins/serialize.js'][672] = 0;
  _$jscoverage['plugins/serialize.js'][673] = 0;
  _$jscoverage['plugins/serialize.js'][674] = 0;
  _$jscoverage['plugins/serialize.js'][675] = 0;
  _$jscoverage['plugins/serialize.js'][677] = 0;
  _$jscoverage['plugins/serialize.js'][678] = 0;
  _$jscoverage['plugins/serialize.js'][683] = 0;
  _$jscoverage['plugins/serialize.js'][685] = 0;
  _$jscoverage['plugins/serialize.js'][688] = 0;
  _$jscoverage['plugins/serialize.js'][691] = 0;
  _$jscoverage['plugins/serialize.js'][692] = 0;
  _$jscoverage['plugins/serialize.js'][696] = 0;
  _$jscoverage['plugins/serialize.js'][701] = 0;
  _$jscoverage['plugins/serialize.js'][702] = 0;
  _$jscoverage['plugins/serialize.js'][703] = 0;
  _$jscoverage['plugins/serialize.js'][705] = 0;
  _$jscoverage['plugins/serialize.js'][706] = 0;
  _$jscoverage['plugins/serialize.js'][708] = 0;
  _$jscoverage['plugins/serialize.js'][709] = 0;
  _$jscoverage['plugins/serialize.js'][712] = 0;
  _$jscoverage['plugins/serialize.js'][713] = 0;
  _$jscoverage['plugins/serialize.js'][714] = 0;
  _$jscoverage['plugins/serialize.js'][719] = 0;
  _$jscoverage['plugins/serialize.js'][720] = 0;
  _$jscoverage['plugins/serialize.js'][721] = 0;
  _$jscoverage['plugins/serialize.js'][723] = 0;
  _$jscoverage['plugins/serialize.js'][724] = 0;
  _$jscoverage['plugins/serialize.js'][725] = 0;
  _$jscoverage['plugins/serialize.js'][726] = 0;
  _$jscoverage['plugins/serialize.js'][727] = 0;
  _$jscoverage['plugins/serialize.js'][728] = 0;
  _$jscoverage['plugins/serialize.js'][729] = 0;
  _$jscoverage['plugins/serialize.js'][732] = 0;
  _$jscoverage['plugins/serialize.js'][737] = 0;
  _$jscoverage['plugins/serialize.js'][738] = 0;
  _$jscoverage['plugins/serialize.js'][740] = 0;
  _$jscoverage['plugins/serialize.js'][746] = 0;
  _$jscoverage['plugins/serialize.js'][747] = 0;
  _$jscoverage['plugins/serialize.js'][749] = 0;
  _$jscoverage['plugins/serialize.js'][752] = 0;
  _$jscoverage['plugins/serialize.js'][756] = 0;
  _$jscoverage['plugins/serialize.js'][757] = 0;
  _$jscoverage['plugins/serialize.js'][759] = 0;
  _$jscoverage['plugins/serialize.js'][761] = 0;
  _$jscoverage['plugins/serialize.js'][763] = 0;
  _$jscoverage['plugins/serialize.js'][764] = 0;
  _$jscoverage['plugins/serialize.js'][766] = 0;
  _$jscoverage['plugins/serialize.js'][767] = 0;
  _$jscoverage['plugins/serialize.js'][775] = 0;
  _$jscoverage['plugins/serialize.js'][779] = 0;
  _$jscoverage['plugins/serialize.js'][780] = 0;
  _$jscoverage['plugins/serialize.js'][782] = 0;
  _$jscoverage['plugins/serialize.js'][785] = 0;
  _$jscoverage['plugins/serialize.js'][788] = 0;
  _$jscoverage['plugins/serialize.js'][790] = 0;
  _$jscoverage['plugins/serialize.js'][791] = 0;
  _$jscoverage['plugins/serialize.js'][793] = 0;
  _$jscoverage['plugins/serialize.js'][798] = 0;
  _$jscoverage['plugins/serialize.js'][799] = 0;
  _$jscoverage['plugins/serialize.js'][800] = 0;
  _$jscoverage['plugins/serialize.js'][803] = 0;
  _$jscoverage['plugins/serialize.js'][809] = 0;
  _$jscoverage['plugins/serialize.js'][810] = 0;
}
_$jscoverage['plugins/serialize.js'].source = ["<span class=\"c\">///import core</span>","<span class=\"c\">///commands &#23450;&#21046;&#36807;&#28388;&#35268;&#21017;</span>","<span class=\"c\">///commandsName  Serialize</span>","<span class=\"c\">///commandsTitle  &#23450;&#21046;&#36807;&#28388;&#35268;&#21017;</span>","UE<span class=\"k\">.</span>plugins<span class=\"k\">[</span><span class=\"s\">'serialize'</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> ie <span class=\"k\">=</span> browser<span class=\"k\">.</span>ie<span class=\"k\">,</span>","        version <span class=\"k\">=</span> browser<span class=\"k\">.</span>version<span class=\"k\">;</span>","","    <span class=\"k\">function</span> ptToPx<span class=\"k\">(</span>value<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"s\">/pt/</span><span class=\"k\">.</span>test<span class=\"k\">(</span>value<span class=\"k\">)</span> <span class=\"k\">?</span> value<span class=\"k\">.</span>replace<span class=\"k\">(</span> <span class=\"s\">/([\\d.]+)pt/g</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span> str <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span>  Math<span class=\"k\">.</span>round<span class=\"k\">(</span>parseFloat<span class=\"k\">(</span>str<span class=\"k\">)</span> <span class=\"k\">*</span> <span class=\"s\">96</span> <span class=\"k\">/</span> <span class=\"s\">72</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"px\"</span><span class=\"k\">;</span>","        <span class=\"k\">}</span> <span class=\"k\">)</span> <span class=\"k\">:</span> value<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">var</span> me <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">,</span> autoClearEmptyNode <span class=\"k\">=</span> me<span class=\"k\">.</span>options<span class=\"k\">.</span>autoClearEmptyNode<span class=\"k\">,</span>","        EMPTY_TAG <span class=\"k\">=</span> dtd<span class=\"k\">.</span>$empty<span class=\"k\">,</span>","        parseHTML <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"c\">//&#24178;&#25481;&lt;a&gt; &#21518;&#20415;&#21464;&#24471;&#31354;&#26684;&#65292;&#20445;&#30041;&lt;/a&gt;  &#36825;&#26679;&#30340;&#31354;&#26684;</span>","            <span class=\"k\">var</span> RE_PART <span class=\"k\">=</span> <span class=\"s\">/&lt;(?:(?:\\/([^&gt;]+)&gt;)|(?:!--([\\S|\\s]*?)--&gt;)|(?:([^\\s\\/&gt;]+)\\s*((?:(?:\"[^\"]*\")|(?:'[^']*')|[^\"'&lt;&gt;])*)\\/?&gt;))/g</span><span class=\"k\">,</span>","                RE_ATTR <span class=\"k\">=</span> <span class=\"s\">/([\\w\\-:.]+)(?:(?:\\s*=\\s*(?:(?:\"([^\"]*)\")|(?:'([^']*)')|([^\\s&gt;]+)))|(?=\\s|$))/g</span><span class=\"k\">,</span>","                EMPTY_ATTR <span class=\"k\">=</span> <span class=\"k\">{</span>checked<span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>compact<span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>declare<span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>defer<span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>disabled<span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>ismap<span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>multiple<span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>nohref<span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>noresize<span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>noshade<span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>nowrap<span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>readonly<span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>selected<span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">}</span><span class=\"k\">,</span>","                CDATA_TAG <span class=\"k\">=</span> <span class=\"k\">{</span>script<span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>style<span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">}</span><span class=\"k\">,</span>","                NEED_PARENT_TAG <span class=\"k\">=</span> <span class=\"k\">{</span>","                    <span class=\"s\">\"li\"</span><span class=\"k\">:</span> <span class=\"k\">{</span> <span class=\"s\">\"$\"</span><span class=\"k\">:</span> <span class=\"s\">'ul'</span><span class=\"k\">,</span> <span class=\"s\">\"ul\"</span><span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"ol\"</span><span class=\"k\">:</span> <span class=\"s\">1</span> <span class=\"k\">}</span><span class=\"k\">,</span>","                    <span class=\"s\">\"dd\"</span><span class=\"k\">:</span> <span class=\"k\">{</span> <span class=\"s\">\"$\"</span><span class=\"k\">:</span> <span class=\"s\">\"dl\"</span><span class=\"k\">,</span> <span class=\"s\">\"dl\"</span><span class=\"k\">:</span> <span class=\"s\">1</span> <span class=\"k\">}</span><span class=\"k\">,</span>","                    <span class=\"s\">\"dt\"</span><span class=\"k\">:</span> <span class=\"k\">{</span> <span class=\"s\">\"$\"</span><span class=\"k\">:</span> <span class=\"s\">\"dl\"</span><span class=\"k\">,</span> <span class=\"s\">\"dl\"</span><span class=\"k\">:</span> <span class=\"s\">1</span> <span class=\"k\">}</span><span class=\"k\">,</span>","                    <span class=\"s\">\"option\"</span><span class=\"k\">:</span> <span class=\"k\">{</span> <span class=\"s\">\"$\"</span><span class=\"k\">:</span> <span class=\"s\">\"select\"</span><span class=\"k\">,</span> <span class=\"s\">\"select\"</span><span class=\"k\">:</span> <span class=\"s\">1</span> <span class=\"k\">}</span><span class=\"k\">,</span>","                    <span class=\"s\">\"td\"</span><span class=\"k\">:</span> <span class=\"k\">{</span> <span class=\"s\">\"$\"</span><span class=\"k\">:</span> <span class=\"s\">\"tr\"</span><span class=\"k\">,</span> <span class=\"s\">\"tr\"</span><span class=\"k\">:</span> <span class=\"s\">1</span> <span class=\"k\">}</span><span class=\"k\">,</span>","                    <span class=\"s\">\"th\"</span><span class=\"k\">:</span> <span class=\"k\">{</span> <span class=\"s\">\"$\"</span><span class=\"k\">:</span> <span class=\"s\">\"tr\"</span><span class=\"k\">,</span> <span class=\"s\">\"tr\"</span><span class=\"k\">:</span> <span class=\"s\">1</span> <span class=\"k\">}</span><span class=\"k\">,</span>","                    <span class=\"s\">\"tr\"</span><span class=\"k\">:</span> <span class=\"k\">{</span> <span class=\"s\">\"$\"</span><span class=\"k\">:</span> <span class=\"s\">\"tbody\"</span><span class=\"k\">,</span> <span class=\"s\">\"tbody\"</span><span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"thead\"</span><span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"tfoot\"</span><span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"table\"</span><span class=\"k\">:</span> <span class=\"s\">1</span> <span class=\"k\">}</span><span class=\"k\">,</span>","                    <span class=\"s\">\"tbody\"</span><span class=\"k\">:</span> <span class=\"k\">{</span> <span class=\"s\">\"$\"</span><span class=\"k\">:</span> <span class=\"s\">\"table\"</span><span class=\"k\">,</span> <span class=\"s\">'table'</span><span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">\"colgroup\"</span><span class=\"k\">:</span> <span class=\"s\">1</span> <span class=\"k\">}</span><span class=\"k\">,</span>","                    <span class=\"s\">\"thead\"</span><span class=\"k\">:</span> <span class=\"k\">{</span> <span class=\"s\">\"$\"</span><span class=\"k\">:</span> <span class=\"s\">\"table\"</span><span class=\"k\">,</span> <span class=\"s\">\"table\"</span><span class=\"k\">:</span> <span class=\"s\">1</span> <span class=\"k\">}</span><span class=\"k\">,</span>","                    <span class=\"s\">\"tfoot\"</span><span class=\"k\">:</span> <span class=\"k\">{</span> <span class=\"s\">\"$\"</span><span class=\"k\">:</span> <span class=\"s\">\"table\"</span><span class=\"k\">,</span> <span class=\"s\">\"table\"</span><span class=\"k\">:</span> <span class=\"s\">1</span> <span class=\"k\">}</span><span class=\"k\">,</span>","                    <span class=\"s\">\"col\"</span><span class=\"k\">:</span> <span class=\"k\">{</span> <span class=\"s\">\"$\"</span><span class=\"k\">:</span> <span class=\"s\">\"colgroup\"</span><span class=\"k\">,</span><span class=\"s\">\"colgroup\"</span><span class=\"k\">:</span><span class=\"s\">1</span> <span class=\"k\">}</span>","                <span class=\"k\">}</span><span class=\"k\">;</span>","            <span class=\"k\">var</span> NEED_CHILD_TAG <span class=\"k\">=</span> <span class=\"k\">{</span>","                <span class=\"s\">\"table\"</span><span class=\"k\">:</span> <span class=\"s\">\"td\"</span><span class=\"k\">,</span> <span class=\"s\">\"tbody\"</span><span class=\"k\">:</span> <span class=\"s\">\"td\"</span><span class=\"k\">,</span> <span class=\"s\">\"thead\"</span><span class=\"k\">:</span> <span class=\"s\">\"td\"</span><span class=\"k\">,</span> <span class=\"s\">\"tfoot\"</span><span class=\"k\">:</span> <span class=\"s\">\"td\"</span><span class=\"k\">,</span> <span class=\"c\">//\"tr\": \"td\",</span>","                <span class=\"s\">\"colgroup\"</span><span class=\"k\">:</span> <span class=\"s\">\"col\"</span><span class=\"k\">,</span>","                <span class=\"s\">\"ul\"</span><span class=\"k\">:</span> <span class=\"s\">\"li\"</span><span class=\"k\">,</span> <span class=\"s\">\"ol\"</span><span class=\"k\">:</span> <span class=\"s\">\"li\"</span><span class=\"k\">,</span>","                <span class=\"s\">\"dl\"</span><span class=\"k\">:</span> <span class=\"s\">\"dd\"</span><span class=\"k\">,</span>","                <span class=\"s\">\"select\"</span><span class=\"k\">:</span> <span class=\"s\">\"option\"</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","","            <span class=\"k\">function</span> parse<span class=\"k\">(</span> html<span class=\"k\">,</span> callbacks <span class=\"k\">)</span> <span class=\"k\">{</span>","","                <span class=\"k\">var</span> match<span class=\"k\">,</span>","                    nextIndex <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span>","                    tagName<span class=\"k\">,</span>","                    cdata<span class=\"k\">;</span>","                RE_PART<span class=\"k\">.</span>exec<span class=\"k\">(</span> <span class=\"s\">\"\"</span> <span class=\"k\">);</span>","                <span class=\"k\">while</span> <span class=\"k\">(</span> <span class=\"k\">(</span>match <span class=\"k\">=</span> RE_PART<span class=\"k\">.</span>exec<span class=\"k\">(</span> html <span class=\"k\">))</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","","                    <span class=\"k\">var</span> tagIndex <span class=\"k\">=</span> match<span class=\"k\">.</span>index<span class=\"k\">;</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span> tagIndex <span class=\"k\">&gt;</span> nextIndex <span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">var</span> text <span class=\"k\">=</span> html<span class=\"k\">.</span>slice<span class=\"k\">(</span> nextIndex<span class=\"k\">,</span> tagIndex <span class=\"k\">);</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span> cdata <span class=\"k\">)</span> <span class=\"k\">{</span>","                            cdata<span class=\"k\">.</span>push<span class=\"k\">(</span> text <span class=\"k\">);</span>","                        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                            callbacks<span class=\"k\">.</span>onText<span class=\"k\">(</span> text <span class=\"k\">);</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span>","                    nextIndex <span class=\"k\">=</span> RE_PART<span class=\"k\">.</span>lastIndex<span class=\"k\">;</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">(</span>tagName <span class=\"k\">=</span> match<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">])</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                        tagName <span class=\"k\">=</span> tagName<span class=\"k\">.</span>toLowerCase<span class=\"k\">();</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span> cdata <span class=\"k\">&amp;&amp;</span> tagName <span class=\"k\">==</span> cdata<span class=\"k\">.</span>_tag_name <span class=\"k\">)</span> <span class=\"k\">{</span>","                            callbacks<span class=\"k\">.</span>onCDATA<span class=\"k\">(</span> cdata<span class=\"k\">.</span>join<span class=\"k\">(</span> <span class=\"s\">''</span> <span class=\"k\">)</span> <span class=\"k\">);</span>","                            cdata <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>cdata <span class=\"k\">)</span> <span class=\"k\">{</span>","                            callbacks<span class=\"k\">.</span>onTagClose<span class=\"k\">(</span> tagName <span class=\"k\">);</span>","                            <span class=\"k\">continue</span><span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span> cdata <span class=\"k\">)</span> <span class=\"k\">{</span>","                        cdata<span class=\"k\">.</span>push<span class=\"k\">(</span> match<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">);</span>","                        <span class=\"k\">continue</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">(</span>tagName <span class=\"k\">=</span> match<span class=\"k\">[</span><span class=\"s\">3</span><span class=\"k\">])</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"s\">/=\"/</span><span class=\"k\">.</span>test<span class=\"k\">(</span> tagName <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                            <span class=\"k\">continue</span><span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                        tagName <span class=\"k\">=</span> tagName<span class=\"k\">.</span>toLowerCase<span class=\"k\">();</span>","                        <span class=\"k\">var</span> attrPart <span class=\"k\">=</span> match<span class=\"k\">[</span><span class=\"s\">4</span><span class=\"k\">],</span>","                            attrMatch<span class=\"k\">,</span>","                            attrMap <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","                            selfClosing <span class=\"k\">=</span> attrPart <span class=\"k\">&amp;&amp;</span> attrPart<span class=\"k\">.</span>slice<span class=\"k\">(</span> <span class=\"k\">-</span><span class=\"s\">1</span> <span class=\"k\">)</span> <span class=\"k\">==</span> <span class=\"s\">'/'</span><span class=\"k\">;</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span> attrPart <span class=\"k\">)</span> <span class=\"k\">{</span>","                            RE_ATTR<span class=\"k\">.</span>exec<span class=\"k\">(</span> <span class=\"s\">\"\"</span> <span class=\"k\">);</span>","                            <span class=\"k\">while</span> <span class=\"k\">(</span> <span class=\"k\">(</span>attrMatch <span class=\"k\">=</span> RE_ATTR<span class=\"k\">.</span>exec<span class=\"k\">(</span> attrPart <span class=\"k\">))</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                                <span class=\"k\">var</span> attrName <span class=\"k\">=</span> attrMatch<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">].</span>toLowerCase<span class=\"k\">(),</span>","                                    attrValue <span class=\"k\">=</span> attrMatch<span class=\"k\">[</span><span class=\"s\">2</span><span class=\"k\">]</span> <span class=\"k\">||</span> attrMatch<span class=\"k\">[</span><span class=\"s\">3</span><span class=\"k\">]</span> <span class=\"k\">||</span> attrMatch<span class=\"k\">[</span><span class=\"s\">4</span><span class=\"k\">]</span> <span class=\"k\">||</span> <span class=\"s\">''</span><span class=\"k\">;</span>","                                <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>attrValue <span class=\"k\">&amp;&amp;</span> EMPTY_ATTR<span class=\"k\">[</span>attrName<span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                                    attrValue <span class=\"k\">=</span> attrName<span class=\"k\">;</span>","                                <span class=\"k\">}</span>","                                <span class=\"k\">if</span> <span class=\"k\">(</span> attrName <span class=\"k\">==</span> <span class=\"s\">'style'</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                                    <span class=\"k\">if</span> <span class=\"k\">(</span> ie <span class=\"k\">&amp;&amp;</span> version <span class=\"k\">&lt;=</span> <span class=\"s\">6</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                                        attrValue <span class=\"k\">=</span> attrValue<span class=\"k\">.</span>replace<span class=\"k\">(</span> <span class=\"s\">/(?!;)\\s*([\\w-]+):/g</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span> m<span class=\"k\">,</span> p1 <span class=\"k\">)</span> <span class=\"k\">{</span>","                                            <span class=\"k\">return</span> p1<span class=\"k\">.</span>toLowerCase<span class=\"k\">()</span> <span class=\"k\">+</span> <span class=\"s\">':'</span><span class=\"k\">;</span>","                                        <span class=\"k\">}</span> <span class=\"k\">);</span>","                                    <span class=\"k\">}</span>","                                <span class=\"k\">}</span>","                                <span class=\"c\">//&#27809;&#26377;&#20540;&#30340;&#23646;&#24615;&#19981;&#28155;&#21152;</span>","                                <span class=\"k\">if</span> <span class=\"k\">(</span> attrValue <span class=\"k\">)</span> <span class=\"k\">{</span>","                                    attrMap<span class=\"k\">[</span>attrName<span class=\"k\">]</span> <span class=\"k\">=</span> attrValue<span class=\"k\">.</span>replace<span class=\"k\">(</span> <span class=\"s\">/:\\s*/g</span><span class=\"k\">,</span> <span class=\"s\">':'</span> <span class=\"k\">)</span>","                                <span class=\"k\">}</span>","","                            <span class=\"k\">}</span>","                        <span class=\"k\">}</span>","                        callbacks<span class=\"k\">.</span>onTagOpen<span class=\"k\">(</span> tagName<span class=\"k\">,</span> attrMap<span class=\"k\">,</span> selfClosing <span class=\"k\">);</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>cdata <span class=\"k\">&amp;&amp;</span> CDATA_TAG<span class=\"k\">[</span>tagName<span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                            cdata <span class=\"k\">=</span> <span class=\"k\">[];</span>","                            cdata<span class=\"k\">.</span>_tag_name <span class=\"k\">=</span> tagName<span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                        <span class=\"k\">continue</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">(</span>tagName <span class=\"k\">=</span> match<span class=\"k\">[</span><span class=\"s\">2</span><span class=\"k\">])</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                        callbacks<span class=\"k\">.</span>onComment<span class=\"k\">(</span> tagName <span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span> html<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> nextIndex <span class=\"k\">)</span> <span class=\"k\">{</span>","                    callbacks<span class=\"k\">.</span>onText<span class=\"k\">(</span> html<span class=\"k\">.</span>slice<span class=\"k\">(</span> nextIndex<span class=\"k\">,</span> html<span class=\"k\">.</span>length <span class=\"k\">)</span> <span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">return</span> <span class=\"k\">function</span> <span class=\"k\">(</span> html<span class=\"k\">,</span> forceDtd <span class=\"k\">)</span> <span class=\"k\">{</span>","","                <span class=\"k\">var</span> fragment <span class=\"k\">=</span> <span class=\"k\">{</span>","                    type<span class=\"k\">:</span> <span class=\"s\">'fragment'</span><span class=\"k\">,</span>","                    parent<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","                    children<span class=\"k\">:</span> <span class=\"k\">[]</span>","                <span class=\"k\">}</span><span class=\"k\">;</span>","                <span class=\"k\">var</span> currentNode <span class=\"k\">=</span> fragment<span class=\"k\">;</span>","","                <span class=\"k\">function</span> addChild<span class=\"k\">(</span> node <span class=\"k\">)</span> <span class=\"k\">{</span>","                    node<span class=\"k\">.</span>parent <span class=\"k\">=</span> currentNode<span class=\"k\">;</span>","                    currentNode<span class=\"k\">.</span>children<span class=\"k\">.</span>push<span class=\"k\">(</span> node <span class=\"k\">);</span>","                <span class=\"k\">}</span>","","                <span class=\"k\">function</span> addElement<span class=\"k\">(</span> element<span class=\"k\">,</span> open <span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> node <span class=\"k\">=</span> element<span class=\"k\">;</span>","                    <span class=\"c\">// &#36935;&#21040;&#32467;&#26500;&#21270;&#26631;&#31614;&#30340;&#26102;&#20505;</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span> NEED_PARENT_TAG<span class=\"k\">[</span>node<span class=\"k\">.</span>tag<span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"c\">// &#32771;&#34385;&#36825;&#31181;&#24773;&#20917;&#30340;&#26102;&#20505;, &#32467;&#26463;&#20043;&#21069;&#30340;&#26631;&#31614;</span>","                        <span class=\"c\">// e.g. &lt;table&gt;&lt;tr&gt;&lt;td&gt;12312`&lt;tr&gt;`4566</span>","                        <span class=\"k\">while</span> <span class=\"k\">(</span> NEED_PARENT_TAG<span class=\"k\">[</span>currentNode<span class=\"k\">.</span>tag<span class=\"k\">]</span> <span class=\"k\">&amp;&amp;</span> NEED_PARENT_TAG<span class=\"k\">[</span>currentNode<span class=\"k\">.</span>tag<span class=\"k\">][</span>node<span class=\"k\">.</span>tag<span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                            currentNode <span class=\"k\">=</span> currentNode<span class=\"k\">.</span>parent<span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                        <span class=\"c\">// &#22914;&#26524;&#21069;&#19968;&#20010;&#26631;&#31614;&#21644;&#36825;&#20010;&#26631;&#31614;&#26159;&#21516;&#19968;&#32423;, &#32467;&#26463;&#20043;&#21069;&#30340;&#26631;&#31614;</span>","                        <span class=\"c\">// e.g. &lt;ul&gt;&lt;li&gt;123&lt;li&gt;</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span> currentNode<span class=\"k\">.</span>tag <span class=\"k\">==</span> node<span class=\"k\">.</span>tag <span class=\"k\">)</span> <span class=\"k\">{</span>","                            currentNode <span class=\"k\">=</span> currentNode<span class=\"k\">.</span>parent<span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                        <span class=\"c\">// &#21521;&#19978;&#34917;&#40784;&#29238;&#26631;&#31614;</span>","                        <span class=\"k\">while</span> <span class=\"k\">(</span> NEED_PARENT_TAG<span class=\"k\">[</span>node<span class=\"k\">.</span>tag<span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                            <span class=\"k\">if</span> <span class=\"k\">(</span> NEED_PARENT_TAG<span class=\"k\">[</span>node<span class=\"k\">.</span>tag<span class=\"k\">][</span>currentNode<span class=\"k\">.</span>tag<span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">break</span><span class=\"k\">;</span>","                            node <span class=\"k\">=</span> node<span class=\"k\">.</span>parent <span class=\"k\">=</span> <span class=\"k\">{</span>","                                type<span class=\"k\">:</span> <span class=\"s\">'element'</span><span class=\"k\">,</span>","                                tag<span class=\"k\">:</span> NEED_PARENT_TAG<span class=\"k\">[</span>node<span class=\"k\">.</span>tag<span class=\"k\">][</span><span class=\"s\">'$'</span><span class=\"k\">],</span>","                                attributes<span class=\"k\">:</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","                                children<span class=\"k\">:</span> <span class=\"k\">[</span>node<span class=\"k\">]</span>","                            <span class=\"k\">}</span><span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span> forceDtd <span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"c\">// &#22914;&#26524;&#36935;&#21040;&#36825;&#20010;&#26631;&#31614;&#19981;&#33021;&#25918;&#22312;&#21069;&#19968;&#20010;&#26631;&#31614;&#20869;&#37096;&#65292;&#21017;&#32467;&#26463;&#21069;&#19968;&#20010;&#26631;&#31614;,span&#21333;&#29420;&#22788;&#29702;</span>","                        <span class=\"k\">while</span> <span class=\"k\">(</span> dtd<span class=\"k\">[</span>node<span class=\"k\">.</span>tag<span class=\"k\">]</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!(</span>currentNode<span class=\"k\">.</span>tag <span class=\"k\">==</span> <span class=\"s\">'span'</span> <span class=\"k\">?</span> utils<span class=\"k\">.</span>extend<span class=\"k\">(</span> dtd<span class=\"k\">[</span><span class=\"s\">'strong'</span><span class=\"k\">],</span> <span class=\"k\">{</span><span class=\"s\">'a'</span><span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">'A'</span><span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">}</span> <span class=\"k\">)</span> <span class=\"k\">:</span> <span class=\"k\">(</span>dtd<span class=\"k\">[</span>currentNode<span class=\"k\">.</span>tag<span class=\"k\">]</span> <span class=\"k\">||</span> dtd<span class=\"k\">[</span><span class=\"s\">'div'</span><span class=\"k\">]))[</span>node<span class=\"k\">.</span>tag<span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                            <span class=\"k\">if</span> <span class=\"k\">(</span> tagEnd<span class=\"k\">(</span> currentNode <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">continue</span><span class=\"k\">;</span>","                            <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>currentNode<span class=\"k\">.</span>parent <span class=\"k\">)</span> <span class=\"k\">break</span><span class=\"k\">;</span>","                            currentNode <span class=\"k\">=</span> currentNode<span class=\"k\">.</span>parent<span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span>","                    node<span class=\"k\">.</span>parent <span class=\"k\">=</span> currentNode<span class=\"k\">;</span>","                    currentNode<span class=\"k\">.</span>children<span class=\"k\">.</span>push<span class=\"k\">(</span> node <span class=\"k\">);</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span> open <span class=\"k\">)</span> <span class=\"k\">{</span>","                        currentNode <span class=\"k\">=</span> element<span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span> element<span class=\"k\">.</span>attributes<span class=\"k\">.</span>style <span class=\"k\">)</span> <span class=\"k\">{</span>","                        element<span class=\"k\">.</span>attributes<span class=\"k\">.</span>style <span class=\"k\">=</span> element<span class=\"k\">.</span>attributes<span class=\"k\">.</span>style<span class=\"k\">.</span>toLowerCase<span class=\"k\">();</span>","                    <span class=\"k\">}</span>","                    <span class=\"k\">return</span> element<span class=\"k\">;</span>","                <span class=\"k\">}</span>","","                <span class=\"c\">// &#32467;&#26463;&#19968;&#20010;&#26631;&#31614;&#30340;&#26102;&#20505;&#65292;&#38656;&#35201;&#21028;&#26029;&#19968;&#19979;&#23427;&#26159;&#21542;&#32570;&#23569;&#23376;&#26631;&#31614;</span>","                <span class=\"c\">// e.g. &lt;table&gt;&lt;/table&gt;</span>","                <span class=\"k\">function</span> tagEnd<span class=\"k\">(</span> node <span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> needTag<span class=\"k\">;</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>node<span class=\"k\">.</span>children<span class=\"k\">.</span>length <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>needTag <span class=\"k\">=</span> NEED_CHILD_TAG<span class=\"k\">[</span>node<span class=\"k\">.</span>tag<span class=\"k\">])</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                        addElement<span class=\"k\">(</span> <span class=\"k\">{</span>","                            type<span class=\"k\">:</span> <span class=\"s\">'element'</span><span class=\"k\">,</span>","                            tag<span class=\"k\">:</span> needTag<span class=\"k\">,</span>","                            attributes<span class=\"k\">:</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","                            children<span class=\"k\">:</span> <span class=\"k\">[]</span>","                        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">true</span> <span class=\"k\">);</span>","                        <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","","                parse<span class=\"k\">(</span> html<span class=\"k\">,</span> <span class=\"k\">{</span>","                    onText<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span> text <span class=\"k\">)</span> <span class=\"k\">{</span>","","                        <span class=\"k\">while</span> <span class=\"k\">(</span> <span class=\"k\">!(</span>dtd<span class=\"k\">[</span>currentNode<span class=\"k\">.</span>tag<span class=\"k\">]</span> <span class=\"k\">||</span> dtd<span class=\"k\">[</span><span class=\"s\">'div'</span><span class=\"k\">])[</span><span class=\"s\">'#'</span><span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                            <span class=\"c\">//&#33410;&#28857;&#20043;&#38388;&#30340;&#31354;&#30333;&#19981;&#33021;&#24403;&#20316;&#33410;&#28857;&#22788;&#29702;</span>","<span class=\"c\">//                                if(/^[ \\t\\r\\n]+$/.test( text )){</span>","<span class=\"c\">//                                    return;</span>","<span class=\"c\">//                                }</span>","                            <span class=\"k\">if</span> <span class=\"k\">(</span> tagEnd<span class=\"k\">(</span> currentNode <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">continue</span><span class=\"k\">;</span>","                            currentNode <span class=\"k\">=</span> currentNode<span class=\"k\">.</span>parent<span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                        <span class=\"c\">//if(/^[ \\t\\n\\r]*/.test(text))</span>","                        addChild<span class=\"k\">(</span> <span class=\"k\">{</span>","                            type<span class=\"k\">:</span> <span class=\"s\">'text'</span><span class=\"k\">,</span>","                            data<span class=\"k\">:</span> text","                        <span class=\"k\">}</span> <span class=\"k\">);</span>","","                    <span class=\"k\">}</span><span class=\"k\">,</span>","                    onComment<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span> text <span class=\"k\">)</span> <span class=\"k\">{</span>","                        addChild<span class=\"k\">(</span> <span class=\"k\">{</span>","                            type<span class=\"k\">:</span> <span class=\"s\">'comment'</span><span class=\"k\">,</span>","                            data<span class=\"k\">:</span> text","                        <span class=\"k\">}</span> <span class=\"k\">);</span>","                    <span class=\"k\">}</span><span class=\"k\">,</span>","                    onCDATA<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span> text <span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">while</span> <span class=\"k\">(</span> <span class=\"k\">!(</span>dtd<span class=\"k\">[</span>currentNode<span class=\"k\">.</span>tag<span class=\"k\">]</span> <span class=\"k\">||</span> dtd<span class=\"k\">[</span><span class=\"s\">'div'</span><span class=\"k\">])[</span><span class=\"s\">'#'</span><span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                            <span class=\"k\">if</span> <span class=\"k\">(</span> tagEnd<span class=\"k\">(</span> currentNode <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">continue</span><span class=\"k\">;</span>","                            currentNode <span class=\"k\">=</span> currentNode<span class=\"k\">.</span>parent<span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                        addChild<span class=\"k\">(</span> <span class=\"k\">{</span>","                            type<span class=\"k\">:</span> <span class=\"s\">'cdata'</span><span class=\"k\">,</span>","                            data<span class=\"k\">:</span> text","                        <span class=\"k\">}</span> <span class=\"k\">);</span>","                    <span class=\"k\">}</span><span class=\"k\">,</span>","                    onTagOpen<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span> tag<span class=\"k\">,</span> attrs<span class=\"k\">,</span> closed <span class=\"k\">)</span> <span class=\"k\">{</span>","                        closed <span class=\"k\">=</span> closed <span class=\"k\">||</span> EMPTY_TAG<span class=\"k\">[</span>tag<span class=\"k\">]</span> <span class=\"k\">;</span>","                        addElement<span class=\"k\">(</span> <span class=\"k\">{</span>","                            type<span class=\"k\">:</span> <span class=\"s\">'element'</span><span class=\"k\">,</span>","                            tag<span class=\"k\">:</span> tag<span class=\"k\">,</span>","                            attributes<span class=\"k\">:</span> attrs<span class=\"k\">,</span>","                            closed<span class=\"k\">:</span> closed<span class=\"k\">,</span>","                            children<span class=\"k\">:</span> <span class=\"k\">[]</span>","                        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">!</span>closed <span class=\"k\">);</span>","                    <span class=\"k\">}</span><span class=\"k\">,</span>","                    onTagClose<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span> tag <span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">var</span> node <span class=\"k\">=</span> currentNode<span class=\"k\">;</span>","                        <span class=\"c\">// &#21521;&#19978;&#25214;&#21305;&#37197;&#30340;&#26631;&#31614;, &#36825;&#37324;&#19981;&#32771;&#34385;dtd&#30340;&#24773;&#20917;&#26159;&#22240;&#20026;tagOpen&#30340;&#26102;&#20505;&#24050;&#32463;&#22788;&#29702;&#36807;&#20102;, &#36825;&#37324;&#19981;&#20250;&#36935;&#21040;</span>","                        <span class=\"k\">while</span> <span class=\"k\">(</span> node <span class=\"k\">&amp;&amp;</span> tag <span class=\"k\">!=</span> node<span class=\"k\">.</span>tag <span class=\"k\">)</span> <span class=\"k\">{</span>","                            node <span class=\"k\">=</span> node<span class=\"k\">.</span>parent<span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span> node <span class=\"k\">)</span> <span class=\"k\">{</span>","                            <span class=\"c\">// &#20851;&#38381;&#20013;&#38388;&#30340;&#26631;&#31614;</span>","                            <span class=\"k\">for</span> <span class=\"k\">(</span> <span class=\"k\">var</span> tnode <span class=\"k\">=</span> currentNode<span class=\"k\">;</span> tnode <span class=\"k\">!==</span> node<span class=\"k\">.</span>parent<span class=\"k\">;</span> tnode <span class=\"k\">=</span> tnode<span class=\"k\">.</span>parent <span class=\"k\">)</span> <span class=\"k\">{</span>","                                tagEnd<span class=\"k\">(</span> tnode <span class=\"k\">);</span>","                            <span class=\"k\">}</span>","                            <span class=\"c\">//&#21435;&#25481;&#31354;&#30333;&#30340;inline&#33410;&#28857;</span>","                            <span class=\"c\">//&#20998;&#39029;&#65292;&#38170;&#28857;&#20445;&#30041;</span>","                            <span class=\"c\">//|| dtd.$removeEmptyBlock[node.tag])</span>","<span class=\"c\">//                                if ( !node.children.length &amp;&amp; dtd.$removeEmpty[node.tag] &amp;&amp; !node.attributes.anchorname &amp;&amp; node.attributes['class'] != 'pagebreak' &amp;&amp; node.tag != 'a') {</span>","<span class=\"c\">//</span>","<span class=\"c\">//                                    node.parent.children.pop();</span>","<span class=\"c\">//                                }</span>","                            currentNode <span class=\"k\">=</span> node<span class=\"k\">.</span>parent<span class=\"k\">;</span>","                        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                            <span class=\"c\">// &#22914;&#26524;&#27809;&#26377;&#25214;&#21040;&#24320;&#22987;&#26631;&#31614;, &#21017;&#21019;&#24314;&#26032;&#26631;&#31614;</span>","                            <span class=\"c\">// eg. &lt;/div&gt; =&gt; &lt;div&gt;&lt;/div&gt;</span>","                            <span class=\"c\">//&#38024;&#23545;&#35270;&#23631;&#32593;&#31449;embed&#20250;&#32473;&#32467;&#26463;&#31526;&#65292;&#36825;&#37324;&#29305;&#27530;&#22788;&#29702;&#19968;&#19979;</span>","                            <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!(</span>dtd<span class=\"k\">.</span>$removeEmpty<span class=\"k\">[</span>tag<span class=\"k\">]</span> <span class=\"k\">||</span> dtd<span class=\"k\">.</span>$removeEmptyBlock<span class=\"k\">[</span>tag<span class=\"k\">]</span> <span class=\"k\">||</span> tag <span class=\"k\">==</span> <span class=\"s\">'embed'</span><span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                                node <span class=\"k\">=</span> <span class=\"k\">{</span>","                                    type<span class=\"k\">:</span> <span class=\"s\">'element'</span><span class=\"k\">,</span>","                                    tag<span class=\"k\">:</span> tag<span class=\"k\">,</span>","                                    attributes<span class=\"k\">:</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","                                    children<span class=\"k\">:</span> <span class=\"k\">[]</span>","                                <span class=\"k\">}</span><span class=\"k\">;</span>","                                addElement<span class=\"k\">(</span> node<span class=\"k\">,</span> <span class=\"k\">true</span> <span class=\"k\">);</span>","                                tagEnd<span class=\"k\">(</span> node <span class=\"k\">);</span>","                                currentNode <span class=\"k\">=</span> node<span class=\"k\">.</span>parent<span class=\"k\">;</span>","                            <span class=\"k\">}</span>","","","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span> <span class=\"k\">);</span>","                <span class=\"c\">// &#22788;&#29702;&#36825;&#31181;&#24773;&#20917;, &#21482;&#26377;&#24320;&#22987;&#26631;&#31614;&#27809;&#26377;&#32467;&#26463;&#26631;&#31614;&#30340;&#24773;&#20917;, &#38656;&#35201;&#20851;&#38381;&#24320;&#22987;&#26631;&#31614;</span>","                <span class=\"c\">// eg. &lt;table&gt;</span>","                <span class=\"k\">while</span> <span class=\"k\">(</span> currentNode <span class=\"k\">!==</span> fragment <span class=\"k\">)</span> <span class=\"k\">{</span>","                    tagEnd<span class=\"k\">(</span> currentNode <span class=\"k\">);</span>","                    currentNode <span class=\"k\">=</span> currentNode<span class=\"k\">.</span>parent<span class=\"k\">;</span>","                <span class=\"k\">}</span>","                <span class=\"k\">return</span> fragment<span class=\"k\">;</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">();</span>","    <span class=\"k\">var</span> unhtml1 <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> map <span class=\"k\">=</span> <span class=\"k\">{</span> <span class=\"s\">'&lt;'</span><span class=\"k\">:</span> <span class=\"s\">'&amp;lt;'</span><span class=\"k\">,</span> <span class=\"s\">'&gt;'</span><span class=\"k\">:</span> <span class=\"s\">'&amp;gt;'</span><span class=\"k\">,</span> <span class=\"s\">'\"'</span><span class=\"k\">:</span> <span class=\"s\">'&amp;quot;'</span><span class=\"k\">,</span> <span class=\"s\">\"'\"</span><span class=\"k\">:</span> <span class=\"s\">'&amp;#39;'</span> <span class=\"k\">}</span><span class=\"k\">;</span>","","        <span class=\"k\">function</span> rep<span class=\"k\">(</span> m <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> map<span class=\"k\">[</span>m<span class=\"k\">];</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">return</span> <span class=\"k\">function</span> <span class=\"k\">(</span> str <span class=\"k\">)</span> <span class=\"k\">{</span>","            str <span class=\"k\">=</span> str <span class=\"k\">+</span> <span class=\"s\">''</span><span class=\"k\">;</span>","            <span class=\"k\">return</span> str <span class=\"k\">?</span> str<span class=\"k\">.</span>replace<span class=\"k\">(</span> <span class=\"s\">/[&lt;&gt;\"']/g</span><span class=\"k\">,</span> rep <span class=\"k\">)</span> <span class=\"k\">:</span> <span class=\"s\">''</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">();</span>","    <span class=\"k\">var</span> toHTML <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">function</span> printChildren<span class=\"k\">(</span> node<span class=\"k\">,</span> pasteplain <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> children <span class=\"k\">=</span> node<span class=\"k\">.</span>children<span class=\"k\">;</span>","","            <span class=\"k\">var</span> buff <span class=\"k\">=</span> <span class=\"k\">[];</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span> <span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span>ci<span class=\"k\">;</span> ci <span class=\"k\">=</span> children<span class=\"k\">[</span>i<span class=\"k\">];</span> i<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","","                buff<span class=\"k\">.</span>push<span class=\"k\">(</span> toHTML<span class=\"k\">(</span> ci<span class=\"k\">,</span> pasteplain <span class=\"k\">)</span> <span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> buff<span class=\"k\">.</span>join<span class=\"k\">(</span> <span class=\"s\">''</span> <span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">function</span> printAttrs<span class=\"k\">(</span> attrs <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> buff <span class=\"k\">=</span> <span class=\"k\">[];</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span> <span class=\"k\">var</span> k <span class=\"k\">in</span> attrs <span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> value <span class=\"k\">=</span> attrs<span class=\"k\">[</span>k<span class=\"k\">];</span>","","                <span class=\"k\">if</span><span class=\"k\">(</span>k <span class=\"k\">==</span> <span class=\"s\">'style'</span><span class=\"k\">)</span><span class=\"k\">{</span>","","                    <span class=\"c\">//pt==&gt;px</span>","                    value <span class=\"k\">=</span> ptToPx<span class=\"k\">(</span>value<span class=\"k\">);</span>","                    <span class=\"c\">//color rgb ==&gt; hex</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"s\">/rgba?\\s*\\([^)]*\\)/</span><span class=\"k\">.</span>test<span class=\"k\">(</span>value<span class=\"k\">))</span><span class=\"k\">{</span>","                        value <span class=\"k\">=</span> value<span class=\"k\">.</span>replace<span class=\"k\">(</span> <span class=\"s\">/rgba?\\s*\\(([^)]*)\\)/g</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span> str <span class=\"k\">)</span> <span class=\"k\">{</span>","                            <span class=\"k\">return</span> utils<span class=\"k\">.</span>fixColor<span class=\"k\">(</span><span class=\"s\">'color'</span><span class=\"k\">,</span>str<span class=\"k\">);</span>","                        <span class=\"k\">}</span> <span class=\"k\">)</span>","                    <span class=\"k\">}</span>","                    <span class=\"c\">//&#36807;&#28388;&#25481;&#25152;&#26377;&#30340;white-space,&#22312;&#32431;&#25991;&#26412;&#32534;&#36753;&#22120;&#37324;&#31896;&#36148;&#36807;&#26469;&#30340;&#20869;&#23481;&#65292;&#21040;chrome&#20013;&#20250;&#24102;&#26377;span&#21644;white-space&#23646;&#24615;&#65292;&#23548;&#33268;&#20986;&#29616;&#19981;&#33021;&#25240;&#34892;&#30340;&#24773;&#20917;</span>","                    <span class=\"c\">//&#25152;&#20197;&#22312;&#36825;&#37324;&#21435;&#25481;&#36825;&#20010;&#23646;&#24615;</span>","                    attrs<span class=\"k\">[</span>k<span class=\"k\">]</span> <span class=\"k\">=</span> utils<span class=\"k\">.</span>optCss<span class=\"k\">(</span>value<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/windowtext/g</span><span class=\"k\">,</span><span class=\"s\">'#000'</span><span class=\"k\">))</span>","                        <span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/white-space[^;]+;/g</span><span class=\"k\">,</span><span class=\"s\">''</span><span class=\"k\">);</span>","                    <span class=\"k\">if</span><span class=\"k\">(!</span>attrs<span class=\"k\">[</span>k<span class=\"k\">])</span><span class=\"k\">{</span>","                        <span class=\"k\">continue</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","","                buff<span class=\"k\">.</span>push<span class=\"k\">(</span> k <span class=\"k\">+</span> <span class=\"s\">'=\"'</span> <span class=\"k\">+</span> unhtml1<span class=\"k\">(</span> attrs<span class=\"k\">[</span>k<span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">'\"'</span> <span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> buff<span class=\"k\">.</span>join<span class=\"k\">(</span> <span class=\"s\">' '</span> <span class=\"k\">)</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">function</span> printData<span class=\"k\">(</span> node<span class=\"k\">,</span> notTrans <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"c\">//trace:1399 &#36755;&#20837;html&#20195;&#30721;&#26102;&#31354;&#26684;&#36716;&#25442;&#25104;&#20026;&amp;nbsp;</span>","            <span class=\"c\">//node.data.replace(/&amp;nbsp;/g,' ') &#38024;&#23545;pre&#20013;&#30340;&#31354;&#26684;&#21644;&#20986;&#29616;&#30340;&amp;nbsp;&#25226;&#20182;&#20204;&#22312;&#24471;&#21040;&#30340;html&#20195;&#30721;&#20013;&#37117;&#36716;&#25442;&#25104;&#20026;&#31354;&#26684;&#65292;&#20026;&#20102;&#22312;&#28304;&#30721;&#27169;&#24335;&#19979;&#26174;&#31034;&#20026;&#31354;&#26684;&#32780;&#19981;&#26159;&amp;nbsp;</span>","            <span class=\"k\">return</span> notTrans <span class=\"k\">?</span> node<span class=\"k\">.</span>data<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/&amp;nbsp;/g</span><span class=\"k\">,</span><span class=\"s\">' '</span><span class=\"k\">)</span> <span class=\"k\">:</span> unhtml1<span class=\"k\">(</span> node<span class=\"k\">.</span>data <span class=\"k\">).</span>replace<span class=\"k\">(</span><span class=\"s\">/ /g</span><span class=\"k\">,</span><span class=\"s\">'&amp;nbsp;'</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        <span class=\"c\">//&#32431;&#25991;&#26412;&#27169;&#24335;&#19979;&#26631;&#31614;&#36716;&#25442;</span>","        <span class=\"k\">var</span> transHtml <span class=\"k\">=</span> <span class=\"k\">{</span>","            <span class=\"s\">'li'</span><span class=\"k\">:</span><span class=\"s\">'p'</span><span class=\"k\">,</span>","            <span class=\"s\">'h1'</span><span class=\"k\">:</span><span class=\"s\">'p'</span><span class=\"k\">,</span><span class=\"s\">'h2'</span><span class=\"k\">:</span><span class=\"s\">'p'</span><span class=\"k\">,</span><span class=\"s\">'h3'</span><span class=\"k\">:</span><span class=\"s\">'p'</span><span class=\"k\">,</span><span class=\"s\">'h4'</span><span class=\"k\">:</span><span class=\"s\">'p'</span><span class=\"k\">,</span><span class=\"s\">'h5'</span><span class=\"k\">:</span><span class=\"s\">'p'</span><span class=\"k\">,</span><span class=\"s\">'h6'</span><span class=\"k\">:</span><span class=\"s\">'p'</span><span class=\"k\">,</span>","            <span class=\"s\">'tr'</span><span class=\"k\">:</span><span class=\"s\">'p'</span><span class=\"k\">,</span>","            <span class=\"s\">'br'</span><span class=\"k\">:</span><span class=\"s\">'br'</span><span class=\"k\">,</span>","            <span class=\"s\">'div'</span><span class=\"k\">:</span><span class=\"s\">'p'</span><span class=\"k\">,</span>","            <span class=\"s\">'p'</span><span class=\"k\">:</span><span class=\"s\">'p'</span><span class=\"c\">//trace:1398 &#30896;&#21040;p&#26631;&#31614;&#33258;&#24049;&#35201;&#21152;&#19978;p,&#21542;&#21017;transHtml[tag]&#26159;undefined</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">var</span> clearTagName <span class=\"k\">=</span><span class=\"k\">{</span>","            <span class=\"s\">'table'</span><span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>","            <span class=\"s\">'tbody'</span><span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>","            <span class=\"s\">'ol'</span><span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>","            <span class=\"s\">'ul'</span><span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>","            <span class=\"s\">'dt'</span><span class=\"k\">:</span><span class=\"s\">1</span>","        <span class=\"k\">}</span>","        <span class=\"k\">function</span> printElement<span class=\"k\">(</span> node<span class=\"k\">,</span> pasteplain <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span> node<span class=\"k\">.</span>type <span class=\"k\">==</span> <span class=\"s\">'element'</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>node<span class=\"k\">.</span>children<span class=\"k\">.</span>length <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>dtd<span class=\"k\">.</span>$removeEmpty<span class=\"k\">[</span>node<span class=\"k\">.</span>tag<span class=\"k\">])</span> <span class=\"k\">&amp;&amp;</span> node<span class=\"k\">.</span>tag <span class=\"k\">!=</span> <span class=\"s\">'a'</span> <span class=\"k\">&amp;&amp;</span> utils<span class=\"k\">.</span>isEmptyObject<span class=\"k\">(</span>node<span class=\"k\">.</span>attributes<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> autoClearEmptyNode<span class=\"k\">)</span> <span class=\"k\">{</span><span class=\"c\">// &#38170;&#28857;&#20445;&#30041;</span>","                <span class=\"k\">return</span> html<span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">var</span> tag <span class=\"k\">=</span> node<span class=\"k\">.</span>tag<span class=\"k\">;</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span> pasteplain <span class=\"k\">&amp;&amp;</span> tag <span class=\"k\">==</span> <span class=\"s\">'td'</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>html <span class=\"k\">)</span> html <span class=\"k\">=</span> <span class=\"s\">''</span><span class=\"k\">;</span>","                html <span class=\"k\">+=</span> printChildren<span class=\"k\">(</span> node<span class=\"k\">,</span> pasteplain <span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">'&amp;nbsp;&amp;nbsp;&amp;nbsp;'</span><span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> attrs <span class=\"k\">=</span> printAttrs<span class=\"k\">(</span> node<span class=\"k\">.</span>attributes <span class=\"k\">);</span>","","                <span class=\"k\">var</span> html <span class=\"k\">=</span> pasteplain <span class=\"k\">&amp;&amp;</span> clearTagName<span class=\"k\">[</span>tag<span class=\"k\">]</span> <span class=\"k\">?</span> <span class=\"s\">''</span> <span class=\"k\">:</span>","                    <span class=\"s\">'&lt;'</span> <span class=\"k\">+</span> <span class=\"k\">(</span>pasteplain <span class=\"k\">&amp;&amp;</span> transHtml<span class=\"k\">[</span>tag<span class=\"k\">]</span> <span class=\"k\">!==</span>undefined<span class=\"k\">?</span> transHtml<span class=\"k\">[</span>tag<span class=\"k\">]</span> <span class=\"k\">:</span> tag<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"k\">(</span>attrs <span class=\"k\">?</span> <span class=\"s\">' '</span> <span class=\"k\">+</span> attrs <span class=\"k\">:</span> <span class=\"s\">''</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"k\">(</span>EMPTY_TAG<span class=\"k\">[</span>tag<span class=\"k\">]</span> <span class=\"k\">?</span> <span class=\"s\">' /&gt;'</span> <span class=\"k\">:</span> <span class=\"s\">'&gt;'</span><span class=\"k\">);</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>EMPTY_TAG<span class=\"k\">[</span>tag<span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"c\">//trace:1627 ,2070</span>","                    <span class=\"c\">//p&#26631;&#31614;&#20026;&#31354;&#65292;&#23558;&#19981;&#21344;&#20301;&#36825;&#37324;&#21344;&#20301;&#31526;&#19981;&#36215;&#20316;&#29992;&#65292;&#29992;&amp;nbsp;&#25110;&#32773;br</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span> tag <span class=\"k\">==</span> <span class=\"s\">'p'</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>node<span class=\"k\">.</span>children<span class=\"k\">.</span>length<span class=\"k\">)</span><span class=\"k\">{</span>","                        html <span class=\"k\">+=</span> browser<span class=\"k\">.</span>ie <span class=\"k\">?</span> <span class=\"s\">'&amp;nbsp;'</span> <span class=\"k\">:</span> <span class=\"s\">'&lt;br/&gt;'</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    html <span class=\"k\">+=</span> printChildren<span class=\"k\">(</span> node<span class=\"k\">,</span> pasteplain <span class=\"k\">);</span>","                    html <span class=\"k\">+=(</span>pasteplain <span class=\"k\">&amp;&amp;</span> clearTagName<span class=\"k\">[</span>tag<span class=\"k\">]</span> <span class=\"k\">?</span> <span class=\"s\">''</span> <span class=\"k\">:</span> <span class=\"s\">'&lt;/'</span> <span class=\"k\">+</span> <span class=\"k\">(</span>pasteplain <span class=\"k\">&amp;&amp;</span> transHtml<span class=\"k\">[</span>tag<span class=\"k\">]!==</span>undefined<span class=\"k\">?</span> transHtml<span class=\"k\">[</span>tag<span class=\"k\">]</span> <span class=\"k\">:</span> tag<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">'&gt;'</span><span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">return</span> html<span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">return</span> <span class=\"k\">function</span> <span class=\"k\">(</span> node<span class=\"k\">,</span> pasteplain <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span> node<span class=\"k\">.</span>type <span class=\"k\">==</span> <span class=\"s\">'fragment'</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> printChildren<span class=\"k\">(</span> node<span class=\"k\">,</span> pasteplain <span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> node<span class=\"k\">.</span>type <span class=\"k\">==</span> <span class=\"s\">'element'</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> printElement<span class=\"k\">(</span> node<span class=\"k\">,</span> pasteplain <span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> node<span class=\"k\">.</span>type <span class=\"k\">==</span> <span class=\"s\">'text'</span> <span class=\"k\">||</span> node<span class=\"k\">.</span>type <span class=\"k\">==</span> <span class=\"s\">'cdata'</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> printData<span class=\"k\">(</span> node<span class=\"k\">,</span> dtd<span class=\"k\">.</span>$notTransContent<span class=\"k\">[</span>node<span class=\"k\">.</span>parent<span class=\"k\">.</span>tag<span class=\"k\">]</span> <span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> node<span class=\"k\">.</span>type <span class=\"k\">==</span> <span class=\"s\">'comment'</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"s\">'&lt;!--'</span> <span class=\"k\">+</span> node<span class=\"k\">.</span>data <span class=\"k\">+</span> <span class=\"s\">'--&gt;'</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> <span class=\"s\">''</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">();</span>","","    <span class=\"k\">var</span> NODE_NAME_MAP <span class=\"k\">=</span> <span class=\"k\">{</span>","        <span class=\"s\">'text'</span><span class=\"k\">:</span> <span class=\"s\">'#text'</span><span class=\"k\">,</span>","        <span class=\"s\">'comment'</span><span class=\"k\">:</span> <span class=\"s\">'#comment'</span><span class=\"k\">,</span>","        <span class=\"s\">'cdata'</span><span class=\"k\">:</span> <span class=\"s\">'#cdata-section'</span><span class=\"k\">,</span>","        <span class=\"s\">'fragment'</span><span class=\"k\">:</span> <span class=\"s\">'#document-fragment'</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","","","    <span class=\"c\">//&#20889;&#20837;&#32534;&#36753;&#22120;&#26102;&#65292;&#35843;&#29992;&#65292;&#36827;&#34892;&#36716;&#25442;&#25805;&#20316;</span>","    <span class=\"k\">function</span> transNode<span class=\"k\">(</span> node<span class=\"k\">,</span> word_img_flag <span class=\"k\">)</span> <span class=\"k\">{</span>","","        <span class=\"k\">var</span> sizeMap <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">10</span><span class=\"k\">,</span> <span class=\"s\">12</span><span class=\"k\">,</span> <span class=\"s\">16</span><span class=\"k\">,</span> <span class=\"s\">18</span><span class=\"k\">,</span> <span class=\"s\">24</span><span class=\"k\">,</span> <span class=\"s\">32</span><span class=\"k\">,</span> <span class=\"s\">48</span><span class=\"k\">],</span>","            attr<span class=\"k\">,</span>","            indexOf <span class=\"k\">=</span> utils<span class=\"k\">.</span>indexOf<span class=\"k\">;</span>","        <span class=\"k\">switch</span> <span class=\"k\">(</span> node<span class=\"k\">.</span>tag <span class=\"k\">)</span> <span class=\"k\">{</span>","<span class=\"c\">//            case 'script':</span>","<span class=\"c\">//                node.tag = 'div';</span>","<span class=\"c\">//                node.attributes._ue_org_tagName = 'script';</span>","<span class=\"c\">//                node.attributes._ue_div_script = 1;</span>","<span class=\"c\">//                node.attributes._ue_script_data = node.children[0] ? encodeURIComponent(node.children[0].data)  : '';</span>","<span class=\"c\">//                node.attributes._ue_custom_node_ = 1;</span>","<span class=\"c\">//                node.children = [];</span>","<span class=\"c\">//                break;</span>","<span class=\"c\">//            case 'style':</span>","<span class=\"c\">//                node.tag = 'div';</span>","<span class=\"c\">//                node.attributes._ue_div_style = 1;</span>","<span class=\"c\">//                node.attributes._ue_org_tagName = 'style';</span>","<span class=\"c\">//                node.attributes._ue_style_data = node.children[0] ? encodeURIComponent(node.children[0].data)  : '';</span>","<span class=\"c\">//                node.attributes._ue_custom_node_ = 1;</span>","<span class=\"c\">//                node.children = [];</span>","<span class=\"c\">//                break;</span>","            <span class=\"k\">case</span> <span class=\"s\">'img'</span><span class=\"k\">:</span>","<span class=\"c\">//                //todo base64&#26242;&#26102;&#21435;&#25481;&#65292;&#21518;&#36793;&#20570;&#36828;&#31243;&#22270;&#29255;&#19978;&#20256;&#21518;&#65292;&#24178;&#25481;&#36825;&#20010;</span>","<span class=\"c\">//                if(node.attributes.src &amp;&amp; /^data:/.test(node.attributes.src)){</span>","<span class=\"c\">//                    return {</span>","<span class=\"c\">//                        type : 'fragment',</span>","<span class=\"c\">//                        children:[]</span>","<span class=\"c\">//                    }</span>","<span class=\"c\">//                }</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span> node<span class=\"k\">.</span>attributes<span class=\"k\">.</span>src <span class=\"k\">&amp;&amp;</span> <span class=\"s\">/^(?:file)/</span><span class=\"k\">.</span>test<span class=\"k\">(</span> node<span class=\"k\">.</span>attributes<span class=\"k\">.</span>src <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span><span class=\"s\">/(gif|bmp|png|jpg|jpeg)$/</span><span class=\"k\">.</span>test<span class=\"k\">(</span> node<span class=\"k\">.</span>attributes<span class=\"k\">.</span>src <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">return</span> <span class=\"k\">{</span>","                            type <span class=\"k\">:</span> <span class=\"s\">'fragment'</span><span class=\"k\">,</span>","                            children<span class=\"k\">:[]</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span>","                    node<span class=\"k\">.</span>attributes<span class=\"k\">.</span>word_img <span class=\"k\">=</span> node<span class=\"k\">.</span>attributes<span class=\"k\">.</span>src<span class=\"k\">;</span>","                    node<span class=\"k\">.</span>attributes<span class=\"k\">.</span>src <span class=\"k\">=</span> me<span class=\"k\">.</span>options<span class=\"k\">.</span>UEDITOR_HOME_URL <span class=\"k\">+</span> <span class=\"s\">'themes/default/images/spacer.gif'</span><span class=\"k\">;</span>","                    <span class=\"k\">var</span> flag <span class=\"k\">=</span> parseInt<span class=\"k\">(</span>node<span class=\"k\">.</span>attributes<span class=\"k\">.</span>width<span class=\"k\">)&lt;</span><span class=\"s\">128</span><span class=\"k\">||</span>parseInt<span class=\"k\">(</span>node<span class=\"k\">.</span>attributes<span class=\"k\">.</span>height<span class=\"k\">)&lt;</span><span class=\"s\">43</span><span class=\"k\">;</span>","                    node<span class=\"k\">.</span>attributes<span class=\"k\">.</span>style<span class=\"k\">=</span><span class=\"s\">\"background:url(\"</span> <span class=\"k\">+</span> <span class=\"k\">(</span>flag<span class=\"k\">?</span> me<span class=\"k\">.</span>options<span class=\"k\">.</span>themePath<span class=\"k\">+</span>me<span class=\"k\">.</span>options<span class=\"k\">.</span>theme <span class=\"k\">+</span><span class=\"s\">\"/images/word.gif\"</span><span class=\"k\">:</span>me<span class=\"k\">.</span>options<span class=\"k\">.</span>langPath<span class=\"k\">+</span>me<span class=\"k\">.</span>options<span class=\"k\">.</span>lang <span class=\"k\">+</span> <span class=\"s\">\"/images/localimage.png\"</span><span class=\"k\">)+</span><span class=\"s\">\") no-repeat center center;border:1px solid #ddd\"</span><span class=\"k\">;</span>","                    <span class=\"c\">//node.attributes.style = 'width:395px;height:173px;';</span>","                    word_img_flag <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>word_img_flag<span class=\"k\">.</span>flag <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">);</span>","                <span class=\"k\">}</span>","<span class=\"c\">//                if(browser.ie &amp;&amp; browser.version &lt; 7 )</span>","<span class=\"c\">//                    node.attributes.orgSrc = node.attributes.src;</span>","<span class=\"c\">//                node.attributes._src = node.attributes._src || node.attributes.src;</span>","                <span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"c\">//            case 'li':</span>","<span class=\"c\">//                var child = node.children[0];</span>","<span class=\"c\">//</span>","<span class=\"c\">//                if ( !child || child.type != 'element' || child.tag != 'p' &amp;&amp; dtd.p[child.tag] ) {</span>","<span class=\"c\">//                    var tmpPNode = {</span>","<span class=\"c\">//                        type: 'element',</span>","<span class=\"c\">//                        tag: 'p',</span>","<span class=\"c\">//                        attributes: {},</span>","<span class=\"c\">//</span>","<span class=\"c\">//                        parent : node</span>","<span class=\"c\">//                    };</span>","<span class=\"c\">//                    tmpPNode.children = child ? node.children :[</span>","<span class=\"c\">//                        browser.ie ? {</span>","<span class=\"c\">//                            type:'text',</span>","<span class=\"c\">//                            data:domUtils.fillChar,</span>","<span class=\"c\">//                            parent : tmpPNode</span>","<span class=\"c\">//</span>","<span class=\"c\">//                        }:</span>","<span class=\"c\">//                        {</span>","<span class=\"c\">//                            type : 'element',</span>","<span class=\"c\">//                            tag : 'br',</span>","<span class=\"c\">//                            attributes:{},</span>","<span class=\"c\">//                            closed: true,</span>","<span class=\"c\">//                            children: [],</span>","<span class=\"c\">//                            parent : tmpPNode</span>","<span class=\"c\">//                        }</span>","<span class=\"c\">//                    ];</span>","<span class=\"c\">//                    node.children =   [tmpPNode];</span>","<span class=\"c\">//                }</span>","<span class=\"c\">//                break;</span>","<span class=\"c\">//            case 'table':</span>","<span class=\"c\">//            case 'td':</span>","<span class=\"c\">//                optStyle( node );</span>","<span class=\"c\">//                break;</span>","<span class=\"c\">//            case 'a'://&#38170;&#28857;&#65292;a==&gt;img</span>","<span class=\"c\">////                if ( node.attributes['anchorname'] ) {</span>","<span class=\"c\">////                    node.tag = 'img';</span>","<span class=\"c\">////                    node.attributes = {</span>","<span class=\"c\">////                        'class' : 'anchorclass',</span>","<span class=\"c\">////                        'anchorname':node.attributes['name']</span>","<span class=\"c\">////                    };</span>","<span class=\"c\">////                    node.closed = 1;</span>","<span class=\"c\">////                }</span>","<span class=\"c\">//                node.attributes.href &amp;&amp; (node.attributes._src = node.attributes.href);</span>","<span class=\"c\">//                break;</span>","<span class=\"c\">//            case 'b':</span>","<span class=\"c\">//                node.tag = node.name = 'strong';</span>","<span class=\"c\">//                break;</span>","<span class=\"c\">//            case 'i':</span>","<span class=\"c\">//                node.tag = node.name = 'em';</span>","<span class=\"c\">//                break;</span>","<span class=\"c\">//            case 'u':</span>","<span class=\"c\">//                node.tag = node.name = 'span';</span>","<span class=\"c\">//                node.attributes.style = (node.attributes.style || '') + ';text-decoration:underline;';</span>","<span class=\"c\">//                break;</span>","<span class=\"c\">//            case 's':</span>","<span class=\"c\">//            case 'del':</span>","<span class=\"c\">//                node.tag = node.name = 'span';</span>","<span class=\"c\">//                node.attributes.style = (node.attributes.style || '') + ';text-decoration:line-through;';</span>","<span class=\"c\">//                if ( node.children.length == 1 ) {</span>","<span class=\"c\">//                    child = node.children[0];</span>","<span class=\"c\">//                    if ( child.tag == node.tag ) {</span>","<span class=\"c\">//                        node.attributes.style += \";\" + child.attributes.style;</span>","<span class=\"c\">//                        node.children = child.children;</span>","<span class=\"c\">//</span>","<span class=\"c\">//                    }</span>","<span class=\"c\">//                }</span>","<span class=\"c\">//                break;</span>","            <span class=\"k\">case</span> <span class=\"s\">'span'</span><span class=\"k\">:</span>","","<span class=\"c\">//                var style = node.attributes.style;</span>","<span class=\"c\">//                if ( style ) {</span>","<span class=\"c\">//                    if ( !node.attributes.style  || browser.webkit &amp;&amp; style == \"white-space:nowrap;\") {</span>","<span class=\"c\">//                        delete node.attributes.style;</span>","<span class=\"c\">//                    }</span>","<span class=\"c\">//                }</span>","<span class=\"c\">//</span>","<span class=\"c\">//                //&#38024;&#23545;ff3.6span&#30340;&#26679;&#24335;&#19981;&#33021;&#27491;&#30830;&#32487;&#25215;&#30340;&#20462;&#22797;</span>","<span class=\"c\">//</span>","<span class=\"c\">//                if(browser.gecko &amp;&amp; browser.version &lt;= 10902 &amp;&amp; node.parent){</span>","<span class=\"c\">//                    var parent = node.parent;</span>","<span class=\"c\">//                    if(parent.tag == 'span' &amp;&amp; parent.attributes &amp;&amp; parent.attributes.style){</span>","<span class=\"c\">//                        node.attributes.style = parent.attributes.style + ';' + node.attributes.style;</span>","<span class=\"c\">//                    }</span>","<span class=\"c\">//                }</span>","<span class=\"c\">//                if ( utils.isEmptyObject( node.attributes ) &amp;&amp; autoClearEmptyNode) {</span>","<span class=\"c\">//                    node.type = 'fragment'</span>","<span class=\"c\">//                }</span>","<span class=\"c\">//                break;</span>","<span class=\"c\">//            case 'font':</span>","<span class=\"c\">//                node.tag = node.name = 'span';</span>","<span class=\"c\">//                attr = node.attributes;</span>","<span class=\"c\">//                node.attributes = {</span>","<span class=\"c\">//                    'style': (attr.size ? 'font-size:' + (sizeMap[attr.size] || 12) + 'px' : '')</span>","<span class=\"c\">//                        + ';' + (attr.color ? 'color:'+ attr.color : '')</span>","<span class=\"c\">//                        + ';' + (attr.face ? 'font-family:'+ attr.face : '')</span>","<span class=\"c\">//                        + ';' + (attr.style||'')</span>","<span class=\"c\">//                };</span>","<span class=\"c\">//</span>","<span class=\"c\">//                while(node.parent.tag == node.tag &amp;&amp; node.parent.children.length == 1){</span>","<span class=\"c\">//                    node.attributes.style &amp;&amp; (node.parent.attributes.style ? (node.parent.attributes.style += \";\" + node.attributes.style) : (node.parent.attributes.style = node.attributes.style));</span>","<span class=\"c\">//                    node.parent.children = node.children;</span>","<span class=\"c\">//                    node = node.parent;</span>","<span class=\"c\">//</span>","<span class=\"c\">//                }</span>","<span class=\"c\">//                break;</span>","<span class=\"c\">//            case 'p':</span>","<span class=\"c\">//                if ( node.attributes.align ) {</span>","<span class=\"c\">//                    node.attributes.style = (node.attributes.style || '') + ';text-align:' +</span>","<span class=\"c\">//                        node.attributes.align + ';';</span>","<span class=\"c\">//                    delete node.attributes.align;</span>","<span class=\"c\">//                }</span>","","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> node<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> optStyle<span class=\"k\">(</span> node <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span> ie <span class=\"k\">&amp;&amp;</span> node<span class=\"k\">.</span>attributes<span class=\"k\">.</span>style <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> style <span class=\"k\">=</span> node<span class=\"k\">.</span>attributes<span class=\"k\">.</span>style<span class=\"k\">;</span>","            node<span class=\"k\">.</span>attributes<span class=\"k\">.</span>style <span class=\"k\">=</span> style<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/;\\s*/g</span><span class=\"k\">,</span><span class=\"s\">';'</span><span class=\"k\">);</span>","            node<span class=\"k\">.</span>attributes<span class=\"k\">.</span>style <span class=\"k\">=</span> node<span class=\"k\">.</span>attributes<span class=\"k\">.</span>style<span class=\"k\">.</span>replace<span class=\"k\">(</span> <span class=\"s\">/^\\s*|\\s*$/</span><span class=\"k\">,</span> <span class=\"s\">''</span> <span class=\"k\">)</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"c\">//getContent&#35843;&#29992;&#36716;&#25442;</span>","    <span class=\"k\">function</span> transOutNode<span class=\"k\">(</span> node <span class=\"k\">)</span> <span class=\"k\">{</span>","","        <span class=\"k\">switch</span> <span class=\"k\">(</span> node<span class=\"k\">.</span>tag <span class=\"k\">)</span> <span class=\"k\">{</span>","<span class=\"c\">//            case 'div' :</span>","<span class=\"c\">//                if(node.attributes._ue_div_script){</span>","<span class=\"c\">//                    node.tag = 'script';</span>","<span class=\"c\">//                    node.children = [{type:'cdata',data:node.attributes._ue_script_data?decodeURIComponent(node.attributes._ue_script_data):'',parent:node}];</span>","<span class=\"c\">//                    delete node.attributes._ue_div_script;</span>","<span class=\"c\">//                    delete node.attributes._ue_script_data;</span>","<span class=\"c\">//                    delete node.attributes._ue_custom_node_;</span>","<span class=\"c\">//                    delete node.attributes._ue_org_tagName;</span>","<span class=\"c\">//</span>","<span class=\"c\">//                }</span>","<span class=\"c\">//                if(node.attributes._ue_div_style){</span>","<span class=\"c\">//                    node.tag = 'style';</span>","<span class=\"c\">//                    node.children = [{type:'cdata',data:node.attributes._ue_style_data?decodeURIComponent(node.attributes._ue_style_data):'',parent:node}];</span>","<span class=\"c\">//                    delete node.attributes._ue_div_style;</span>","<span class=\"c\">//                    delete node.attributes._ue_style_data;</span>","<span class=\"c\">//                    delete node.attributes._ue_custom_node_;</span>","<span class=\"c\">//                    delete node.attributes._ue_org_tagName;</span>","<span class=\"c\">//</span>","<span class=\"c\">//                }</span>","<span class=\"c\">//                break;</span>","<span class=\"c\">//            case 'table':</span>","<span class=\"c\">//                !node.attributes.style &amp;&amp; delete node.attributes.style;</span>","<span class=\"c\">//                if ( ie &amp;&amp; node.attributes.style ) {</span>","<span class=\"c\">//</span>","<span class=\"c\">//                    optStyle( node );</span>","<span class=\"c\">//                }</span>","<span class=\"c\">//                break;</span>","<span class=\"c\">//            case 'td':</span>","<span class=\"c\">//            case 'th':</span>","<span class=\"c\">//                if ( /display\\s*:\\s*none/i.test( node.attributes.style ) ) {</span>","<span class=\"c\">//                    return {</span>","<span class=\"c\">//                        type: 'fragment',</span>","<span class=\"c\">//                        children: []</span>","<span class=\"c\">//                    };</span>","<span class=\"c\">//                }</span>","<span class=\"c\">//                if ( ie &amp;&amp; !node.children.length ) {</span>","<span class=\"c\">//                    var txtNode = {</span>","<span class=\"c\">//                        type: 'text',</span>","<span class=\"c\">//                        data:domUtils.fillChar,</span>","<span class=\"c\">//                        parent : node</span>","<span class=\"c\">//                    };</span>","<span class=\"c\">//                    node.children[0] = txtNode;</span>","<span class=\"c\">//                }</span>","<span class=\"c\">//                if ( ie &amp;&amp; node.attributes.style ) {</span>","<span class=\"c\">//                    optStyle( node );</span>","<span class=\"c\">//                }</span>","<span class=\"c\">//                break;</span>","<span class=\"c\">//            case 'img'://&#38170;&#28857;&#65292;img==&gt;a</span>","<span class=\"c\">//                if ( node.attributes.anchorname ) {</span>","<span class=\"c\">////                    node.tag = 'a';</span>","<span class=\"c\">////                    node.attributes = {</span>","<span class=\"c\">////                        name : node.attributes.anchorname,</span>","<span class=\"c\">////                        anchorname : 1</span>","<span class=\"c\">////                    };</span>","<span class=\"c\">////                    node.closed = null;</span>","<span class=\"c\">//                }else{</span>","<span class=\"c\">////                    if(node.attributes._src){</span>","<span class=\"c\">////                        node.attributes.src = node.attributes._src;</span>","<span class=\"c\">////                        delete node.attributes._src;</span>","<span class=\"c\">////                    }</span>","<span class=\"c\">//                }</span>","<span class=\"c\">//                break;</span>","<span class=\"c\">//</span>","<span class=\"c\">//            case 'a':</span>","<span class=\"c\">//                if(node.attributes._src){</span>","<span class=\"c\">//                    node.attributes.href = node.attributes._src;</span>","<span class=\"c\">//                    delete node.attributes._src;</span>","<span class=\"c\">//                }</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">return</span> node<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> childrenAccept<span class=\"k\">(</span> node<span class=\"k\">,</span> visit<span class=\"k\">,</span> ctx <span class=\"k\">)</span> <span class=\"k\">{</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>node<span class=\"k\">.</span>children <span class=\"k\">||</span> <span class=\"k\">!</span>node<span class=\"k\">.</span>children<span class=\"k\">.</span>length <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> node<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">var</span> children <span class=\"k\">=</span> node<span class=\"k\">.</span>children<span class=\"k\">;</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span> <span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> children<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> newNode <span class=\"k\">=</span> visit<span class=\"k\">(</span> children<span class=\"k\">[</span>i<span class=\"k\">],</span> ctx <span class=\"k\">);</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span> newNode<span class=\"k\">.</span>type <span class=\"k\">==</span> <span class=\"s\">'fragment'</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> args <span class=\"k\">=</span> <span class=\"k\">[</span>i<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">];</span>","                args<span class=\"k\">.</span>push<span class=\"k\">.</span>apply<span class=\"k\">(</span> args<span class=\"k\">,</span> newNode<span class=\"k\">.</span>children <span class=\"k\">);</span>","                children<span class=\"k\">.</span>splice<span class=\"k\">.</span>apply<span class=\"k\">(</span> children<span class=\"k\">,</span> args <span class=\"k\">);</span>","                <span class=\"c\">//&#33410;&#28857;&#20026;&#31354;&#30340;&#23601;&#24178;&#25481;&#65292;&#19981;&#28982;&#21518;&#36793;&#30340;&#34917;&#20840;&#25805;&#20316;&#20250;&#28155;&#21152;&#22810;&#20313;&#30340;&#33410;&#28857;</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>children<span class=\"k\">.</span>length <span class=\"k\">)</span> <span class=\"k\">{</span>","                    node <span class=\"k\">=</span> <span class=\"k\">{</span>","                        type<span class=\"k\">:</span> <span class=\"s\">'fragment'</span><span class=\"k\">,</span>","                        children<span class=\"k\">:</span> <span class=\"k\">[]</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                i <span class=\"k\">--;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                children<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">=</span> newNode<span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> node<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> Serialize<span class=\"k\">(</span> rules <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>rules <span class=\"k\">=</span> rules<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","","    Serialize<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","        <span class=\"c\">// NOTE: selector&#30446;&#21069;&#21482;&#25903;&#25345;tagName</span>","        rules<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","        <span class=\"c\">// NOTE: node&#24517;&#39035;&#26159;fragment</span>","        filter<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span> node<span class=\"k\">,</span> rules<span class=\"k\">,</span> modify <span class=\"k\">)</span> <span class=\"k\">{</span>","            rules <span class=\"k\">=</span> rules <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>rules<span class=\"k\">;</span>","            <span class=\"k\">var</span> whiteList <span class=\"k\">=</span> rules <span class=\"k\">&amp;&amp;</span> rules<span class=\"k\">.</span>whiteList<span class=\"k\">;</span>","            <span class=\"k\">var</span> blackList <span class=\"k\">=</span> rules <span class=\"k\">&amp;&amp;</span> rules<span class=\"k\">.</span>blackList<span class=\"k\">;</span>","","            <span class=\"k\">function</span> visitNode<span class=\"k\">(</span> node<span class=\"k\">,</span> parent <span class=\"k\">)</span> <span class=\"k\">{</span>","                node<span class=\"k\">.</span>name <span class=\"k\">=</span> node<span class=\"k\">.</span>type <span class=\"k\">==</span> <span class=\"s\">'element'</span> <span class=\"k\">?</span>","                    node<span class=\"k\">.</span>tag <span class=\"k\">:</span> NODE_NAME_MAP<span class=\"k\">[</span>node<span class=\"k\">.</span>type<span class=\"k\">];</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span> parent <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> childrenAccept<span class=\"k\">(</span> node<span class=\"k\">,</span> visitNode<span class=\"k\">,</span> node <span class=\"k\">);</span>","                <span class=\"k\">}</span>","","                <span class=\"k\">if</span> <span class=\"k\">(</span> blackList <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>blackList<span class=\"k\">[</span>node<span class=\"k\">.</span>name<span class=\"k\">]||</span> <span class=\"k\">(</span>node<span class=\"k\">.</span>attributes <span class=\"k\">&amp;&amp;</span> node<span class=\"k\">.</span>attributes<span class=\"k\">.</span>_ue_org_tagName <span class=\"k\">&amp;&amp;</span> blackList<span class=\"k\">[</span>node<span class=\"k\">.</span>attributes<span class=\"k\">.</span>_ue_org_tagName<span class=\"k\">])))</span> <span class=\"k\">{</span>","                    modify <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>modify<span class=\"k\">.</span>flag <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">);</span>","                    <span class=\"k\">return</span> <span class=\"k\">{</span>","                        type<span class=\"k\">:</span> <span class=\"s\">'fragment'</span><span class=\"k\">,</span>","                        children<span class=\"k\">:</span> <span class=\"k\">[]</span>","                    <span class=\"k\">}</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span> whiteList <span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span> node<span class=\"k\">.</span>type <span class=\"k\">==</span> <span class=\"s\">'element'</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span> parent<span class=\"k\">.</span>type <span class=\"k\">==</span> <span class=\"s\">'fragment'</span> <span class=\"k\">?</span> whiteList<span class=\"k\">[</span>node<span class=\"k\">.</span>name<span class=\"k\">]</span> <span class=\"k\">:</span> whiteList<span class=\"k\">[</span>node<span class=\"k\">.</span>name<span class=\"k\">]</span> <span class=\"k\">&amp;&amp;</span> whiteList<span class=\"k\">[</span>parent<span class=\"k\">.</span>name<span class=\"k\">][</span>node<span class=\"k\">.</span>name<span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","","                            <span class=\"k\">var</span> props<span class=\"k\">;</span>","                            <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">(</span>props <span class=\"k\">=</span> whiteList<span class=\"k\">[</span>node<span class=\"k\">.</span>name<span class=\"k\">].</span>$<span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                                <span class=\"k\">var</span> oldAttrs <span class=\"k\">=</span> node<span class=\"k\">.</span>attributes<span class=\"k\">;</span>","                                <span class=\"k\">var</span> newAttrs <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","                                <span class=\"k\">for</span> <span class=\"k\">(</span> <span class=\"k\">var</span> k <span class=\"k\">in</span> props <span class=\"k\">)</span> <span class=\"k\">{</span>","                                    <span class=\"k\">if</span> <span class=\"k\">(</span> oldAttrs<span class=\"k\">[</span>k<span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                                        newAttrs<span class=\"k\">[</span>k<span class=\"k\">]</span> <span class=\"k\">=</span> oldAttrs<span class=\"k\">[</span>k<span class=\"k\">];</span>","                                    <span class=\"k\">}</span>","                                <span class=\"k\">}</span>","                                node<span class=\"k\">.</span>attributes <span class=\"k\">=</span> newAttrs<span class=\"k\">;</span>","                            <span class=\"k\">}</span>","","","                        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                            modify <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>modify<span class=\"k\">.</span>flag <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">);</span>","                            node<span class=\"k\">.</span>type <span class=\"k\">=</span> <span class=\"s\">'fragment'</span><span class=\"k\">;</span>","                            <span class=\"c\">// NOTE: &#36825;&#37324;&#31639;&#26159;&#19968;&#20010;hack</span>","                            node<span class=\"k\">.</span>name <span class=\"k\">=</span> parent<span class=\"k\">.</span>name<span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        <span class=\"c\">// NOTE: &#25991;&#26412;&#40664;&#35748;&#20801;&#35768;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span> blackList <span class=\"k\">||</span> whiteList <span class=\"k\">)</span> <span class=\"k\">{</span>","                    childrenAccept<span class=\"k\">(</span> node<span class=\"k\">,</span> visitNode<span class=\"k\">,</span> node <span class=\"k\">);</span>","                <span class=\"k\">}</span>","                <span class=\"k\">return</span> node<span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">return</span> visitNode<span class=\"k\">(</span> node<span class=\"k\">,</span> <span class=\"k\">null</span> <span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        transformInput<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span> node<span class=\"k\">,</span> word_img_flag <span class=\"k\">)</span> <span class=\"k\">{</span>","","            <span class=\"k\">function</span> visitNode<span class=\"k\">(</span> node <span class=\"k\">)</span> <span class=\"k\">{</span>","                node <span class=\"k\">=</span> transNode<span class=\"k\">(</span> node<span class=\"k\">,</span> word_img_flag <span class=\"k\">);</span>","","                node <span class=\"k\">=</span> childrenAccept<span class=\"k\">(</span> node<span class=\"k\">,</span> visitNode<span class=\"k\">,</span> node <span class=\"k\">);</span>","","                <span class=\"k\">if</span> <span class=\"k\">(</span> node<span class=\"k\">.</span>tag <span class=\"k\">==</span> <span class=\"s\">'section'</span>  <span class=\"k\">)</span> <span class=\"k\">{</span>","","                    node<span class=\"k\">.</span>type <span class=\"k\">=</span> <span class=\"s\">'element'</span><span class=\"k\">;</span>","                    node<span class=\"k\">.</span>name <span class=\"k\">=</span> node<span class=\"k\">.</span>tag <span class=\"k\">=</span> <span class=\"s\">'hr'</span><span class=\"k\">;</span>","","                    <span class=\"k\">delete</span> node<span class=\"k\">.</span>data<span class=\"k\">;</span>","                    node<span class=\"k\">.</span>attributes <span class=\"k\">=</span> <span class=\"k\">{</span>","                        <span class=\"s\">'class'</span> <span class=\"k\">:</span> <span class=\"s\">'pagebreak'</span><span class=\"k\">,</span>","                        noshade<span class=\"k\">:</span><span class=\"s\">\"noshade\"</span><span class=\"k\">,</span>","                        size<span class=\"k\">:</span><span class=\"s\">\"5\"</span><span class=\"k\">,</span>","                        <span class=\"s\">'unselectable'</span> <span class=\"k\">:</span> <span class=\"s\">'on'</span><span class=\"k\">,</span>","                        <span class=\"s\">'style'</span> <span class=\"k\">:</span> <span class=\"s\">'moz-user-select:none;-khtml-user-select: none;'</span>","                    <span class=\"k\">}</span><span class=\"k\">;</span>","","                    node<span class=\"k\">.</span>children <span class=\"k\">=</span> <span class=\"k\">[];</span>","","                <span class=\"k\">}</span>","                <span class=\"c\">//&#21435;&#25481;&#22810;&#20313;&#30340;&#31354;&#26684;&#21644;&#25442;&#34892;</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>node<span class=\"k\">.</span>type <span class=\"k\">==</span> <span class=\"s\">'text'</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>dtd<span class=\"k\">.</span>$notTransContent<span class=\"k\">[</span>node<span class=\"k\">.</span>parent<span class=\"k\">.</span>tag<span class=\"k\">])</span><span class=\"k\">{</span>","                    node<span class=\"k\">.</span>data <span class=\"k\">=</span> node<span class=\"k\">.</span>data<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/[\\r\\t\\n]*/g</span><span class=\"k\">,</span><span class=\"s\">''</span><span class=\"k\">)</span><span class=\"c\">//.replace(/[ ]*$/g,'')</span>","                <span class=\"k\">}</span>","                <span class=\"k\">return</span> node<span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">return</span> visitNode<span class=\"k\">(</span> node <span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        transformOutput<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span> node <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">function</span> visitNode<span class=\"k\">(</span> node <span class=\"k\">)</span> <span class=\"k\">{</span>","","                <span class=\"k\">if</span> <span class=\"k\">(</span> node<span class=\"k\">.</span>tag <span class=\"k\">==</span> <span class=\"s\">'hr'</span> <span class=\"k\">&amp;&amp;</span> node<span class=\"k\">.</span>attributes<span class=\"k\">[</span><span class=\"s\">'class'</span><span class=\"k\">]</span> <span class=\"k\">==</span> <span class=\"s\">'pagebreak'</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                    node<span class=\"k\">.</span>tag <span class=\"k\">=</span> <span class=\"s\">'section'</span>","","                    node<span class=\"k\">.</span>attributes <span class=\"k\">=</span><span class=\"k\">{</span><span class=\"s\">'class'</span><span class=\"k\">:</span><span class=\"s\">'CTRL-PAGE-SEPARATOR'</span><span class=\"k\">}</span>","                    <span class=\"c\">//node.data = me.options.pageBreakTag;</span>","                    <span class=\"c\">//delete node.children;</span>","","                <span class=\"k\">}</span>","                node <span class=\"k\">=</span> transOutNode<span class=\"k\">(</span> node <span class=\"k\">);</span>","                node <span class=\"k\">=</span> childrenAccept<span class=\"k\">(</span> node<span class=\"k\">,</span> visitNode<span class=\"k\">,</span> node <span class=\"k\">);</span>","                <span class=\"k\">return</span> node<span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">return</span> visitNode<span class=\"k\">(</span> node <span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        toHTML<span class=\"k\">:</span> toHTML<span class=\"k\">,</span>","        parseHTML<span class=\"k\">:</span> parseHTML<span class=\"k\">,</span>","        word<span class=\"k\">:</span> UE<span class=\"k\">.</span>filterWord","    <span class=\"k\">}</span><span class=\"k\">;</span>","    me<span class=\"k\">.</span>serialize <span class=\"k\">=</span> <span class=\"k\">new</span> Serialize<span class=\"k\">(</span> me<span class=\"k\">.</span>options<span class=\"k\">.</span>serialize <span class=\"k\">||</span> <span class=\"k\">{}</span><span class=\"k\">);</span>","    UE<span class=\"k\">.</span>serialize <span class=\"k\">=</span> <span class=\"k\">new</span> Serialize<span class=\"k\">(</span> <span class=\"k\">{}</span> <span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">;</span>"];
_$jscoverage['plugins/serialize.js'][5]++;
UE.plugins.serialize = (function () {
  _$jscoverage['plugins/serialize.js'][6]++;
  var ie = browser.ie, version = browser.version;
  _$jscoverage['plugins/serialize.js'][9]++;
  function ptToPx(value) {
    _$jscoverage['plugins/serialize.js'][10]++;
    return (/pt/.test(value)? value.replace(/([\d.]+)pt/g, (function (str) {
  _$jscoverage['plugins/serialize.js'][11]++;
  return (Math.round(((parseFloat(str) * 96) / 72)) + "px");
})): value);
}
  _$jscoverage['plugins/serialize.js'][14]++;
  var me = this, autoClearEmptyNode = me.options.autoClearEmptyNode, EMPTY_TAG = dtd.$empty, parseHTML = (function () {
  _$jscoverage['plugins/serialize.js'][18]++;
  var RE_PART = /<(?:(?:\/([^>]+)>)|(?:!--([\S|\s]*?)-->)|(?:([^\s\/>]+)\s*((?:(?:"[^"]*")|(?:'[^']*')|[^"'<>])*)\/?>))/g, RE_ATTR = /([\w\-:.]+)(?:(?:\s*=\s*(?:(?:"([^"]*)")|(?:'([^']*)')|([^\s>]+)))|(?=\s|$))/g, EMPTY_ATTR = {checked: 1, compact: 1, declare: 1, defer: 1, disabled: 1, ismap: 1, multiple: 1, nohref: 1, noresize: 1, noshade: 1, nowrap: 1, readonly: 1, selected: 1}, CDATA_TAG = {script: 1, style: 1}, NEED_PARENT_TAG = {"li": {"$": "ul", "ul": 1, "ol": 1}, "dd": {"$": "dl", "dl": 1}, "dt": {"$": "dl", "dl": 1}, "option": {"$": "select", "select": 1}, "td": {"$": "tr", "tr": 1}, "th": {"$": "tr", "tr": 1}, "tr": {"$": "tbody", "tbody": 1, "thead": 1, "tfoot": 1, "table": 1}, "tbody": {"$": "table", "table": 1, "colgroup": 1}, "thead": {"$": "table", "table": 1}, "tfoot": {"$": "table", "table": 1}, "col": {"$": "colgroup", "colgroup": 1}};
  _$jscoverage['plugins/serialize.js'][35]++;
  var NEED_CHILD_TAG = {"table": "td", "tbody": "td", "thead": "td", "tfoot": "td", "colgroup": "col", "ul": "li", "ol": "li", "dl": "dd", "select": "option"};
  _$jscoverage['plugins/serialize.js'][43]++;
  function parse(html, callbacks) {
    _$jscoverage['plugins/serialize.js'][45]++;
    var match, nextIndex = 0, tagName, cdata;
    _$jscoverage['plugins/serialize.js'][49]++;
    RE_PART.exec("");
    _$jscoverage['plugins/serialize.js'][50]++;
    while ((match = RE_PART.exec(html))) {
      _$jscoverage['plugins/serialize.js'][52]++;
      var tagIndex = match.index;
      _$jscoverage['plugins/serialize.js'][53]++;
      if ((tagIndex > nextIndex)) {
        _$jscoverage['plugins/serialize.js'][54]++;
        var text = html.slice(nextIndex, tagIndex);
        _$jscoverage['plugins/serialize.js'][55]++;
        if (cdata) {
          _$jscoverage['plugins/serialize.js'][56]++;
          cdata.push(text);
        }
        else {
          _$jscoverage['plugins/serialize.js'][58]++;
          callbacks.onText(text);
        }
      }
      _$jscoverage['plugins/serialize.js'][61]++;
      nextIndex = RE_PART.lastIndex;
      _$jscoverage['plugins/serialize.js'][62]++;
      if ((tagName = match[1])) {
        _$jscoverage['plugins/serialize.js'][63]++;
        tagName = tagName.toLowerCase();
        _$jscoverage['plugins/serialize.js'][64]++;
        if ((cdata && (tagName == cdata._tag_name))) {
          _$jscoverage['plugins/serialize.js'][65]++;
          callbacks.onCDATA(cdata.join(""));
          _$jscoverage['plugins/serialize.js'][66]++;
          cdata = null;
        }
        _$jscoverage['plugins/serialize.js'][68]++;
        if ((! cdata)) {
          _$jscoverage['plugins/serialize.js'][69]++;
          callbacks.onTagClose(tagName);
          _$jscoverage['plugins/serialize.js'][70]++;
          continue;
        }
      }
      _$jscoverage['plugins/serialize.js'][73]++;
      if (cdata) {
        _$jscoverage['plugins/serialize.js'][74]++;
        cdata.push(match[0]);
        _$jscoverage['plugins/serialize.js'][75]++;
        continue;
      }
      _$jscoverage['plugins/serialize.js'][77]++;
      if ((tagName = match[3])) {
        _$jscoverage['plugins/serialize.js'][78]++;
        if (/="/.test(tagName)) {
          _$jscoverage['plugins/serialize.js'][79]++;
          continue;
        }
        _$jscoverage['plugins/serialize.js'][81]++;
        tagName = tagName.toLowerCase();
        _$jscoverage['plugins/serialize.js'][82]++;
        var attrPart = match[4], attrMatch, attrMap = {}, selfClosing = (attrPart && (attrPart.slice(-1) == "/"));
        _$jscoverage['plugins/serialize.js'][86]++;
        if (attrPart) {
          _$jscoverage['plugins/serialize.js'][87]++;
          RE_ATTR.exec("");
          _$jscoverage['plugins/serialize.js'][88]++;
          while ((attrMatch = RE_ATTR.exec(attrPart))) {
            _$jscoverage['plugins/serialize.js'][89]++;
            var attrName = attrMatch[1].toLowerCase(), attrValue = (attrMatch[2] || attrMatch[3] || attrMatch[4] || "");
            _$jscoverage['plugins/serialize.js'][91]++;
            if (((! attrValue) && EMPTY_ATTR[attrName])) {
              _$jscoverage['plugins/serialize.js'][92]++;
              attrValue = attrName;
            }
            _$jscoverage['plugins/serialize.js'][94]++;
            if ((attrName == "style")) {
              _$jscoverage['plugins/serialize.js'][95]++;
              if ((ie && (version <= 6))) {
                _$jscoverage['plugins/serialize.js'][96]++;
                attrValue = attrValue.replace(/(?!;)\s*([\w-]+):/g, (function (m, p1) {
  _$jscoverage['plugins/serialize.js'][97]++;
  return (p1.toLowerCase() + ":");
}));
              }
            }
            _$jscoverage['plugins/serialize.js'][102]++;
            if (attrValue) {
              _$jscoverage['plugins/serialize.js'][103]++;
              attrMap[attrName] = attrValue.replace(/:\s*/g, ":");
            }
}
        }
        _$jscoverage['plugins/serialize.js'][108]++;
        callbacks.onTagOpen(tagName, attrMap, selfClosing);
        _$jscoverage['plugins/serialize.js'][109]++;
        if (((! cdata) && CDATA_TAG[tagName])) {
          _$jscoverage['plugins/serialize.js'][110]++;
          cdata = [];
          _$jscoverage['plugins/serialize.js'][111]++;
          cdata._tag_name = tagName;
        }
        _$jscoverage['plugins/serialize.js'][113]++;
        continue;
      }
      _$jscoverage['plugins/serialize.js'][115]++;
      if ((tagName = match[2])) {
        _$jscoverage['plugins/serialize.js'][116]++;
        callbacks.onComment(tagName);
      }
}
    _$jscoverage['plugins/serialize.js'][119]++;
    if ((html.length > nextIndex)) {
      _$jscoverage['plugins/serialize.js'][120]++;
      callbacks.onText(html.slice(nextIndex, html.length));
    }
}
  _$jscoverage['plugins/serialize.js'][124]++;
  return (function (html, forceDtd) {
  _$jscoverage['plugins/serialize.js'][126]++;
  var fragment = {type: "fragment", parent: null, children: []};
  _$jscoverage['plugins/serialize.js'][131]++;
  var currentNode = fragment;
  _$jscoverage['plugins/serialize.js'][133]++;
  function addChild(node) {
    _$jscoverage['plugins/serialize.js'][134]++;
    node.parent = currentNode;
    _$jscoverage['plugins/serialize.js'][135]++;
    currentNode.children.push(node);
}
  _$jscoverage['plugins/serialize.js'][138]++;
  function addElement(element, open) {
    _$jscoverage['plugins/serialize.js'][139]++;
    var node = element;
    _$jscoverage['plugins/serialize.js'][141]++;
    if (NEED_PARENT_TAG[node.tag]) {
      _$jscoverage['plugins/serialize.js'][144]++;
      while ((NEED_PARENT_TAG[currentNode.tag] && NEED_PARENT_TAG[currentNode.tag][node.tag])) {
        _$jscoverage['plugins/serialize.js'][145]++;
        currentNode = currentNode.parent;
}
      _$jscoverage['plugins/serialize.js'][149]++;
      if ((currentNode.tag == node.tag)) {
        _$jscoverage['plugins/serialize.js'][150]++;
        currentNode = currentNode.parent;
      }
      _$jscoverage['plugins/serialize.js'][153]++;
      while (NEED_PARENT_TAG[node.tag]) {
        _$jscoverage['plugins/serialize.js'][154]++;
        if (NEED_PARENT_TAG[node.tag][currentNode.tag]) {
          _$jscoverage['plugins/serialize.js'][154]++;
          break;
        }
        _$jscoverage['plugins/serialize.js'][155]++;
        node = (node.parent = {type: "element", tag: NEED_PARENT_TAG[node.tag].$, attributes: {}, children: [node]});
}
    }
    _$jscoverage['plugins/serialize.js'][163]++;
    if (forceDtd) {
      _$jscoverage['plugins/serialize.js'][165]++;
      while ((dtd[node.tag] && (! ((currentNode.tag == "span")? utils.extend(dtd.strong, {"a": 1, "A": 1}): (dtd[currentNode.tag] || dtd.div))[node.tag]))) {
        _$jscoverage['plugins/serialize.js'][166]++;
        if (tagEnd(currentNode)) {
          _$jscoverage['plugins/serialize.js'][166]++;
          continue;
        }
        _$jscoverage['plugins/serialize.js'][167]++;
        if ((! currentNode.parent)) {
          _$jscoverage['plugins/serialize.js'][167]++;
          break;
        }
        _$jscoverage['plugins/serialize.js'][168]++;
        currentNode = currentNode.parent;
}
    }
    _$jscoverage['plugins/serialize.js'][171]++;
    node.parent = currentNode;
    _$jscoverage['plugins/serialize.js'][172]++;
    currentNode.children.push(node);
    _$jscoverage['plugins/serialize.js'][173]++;
    if (open) {
      _$jscoverage['plugins/serialize.js'][174]++;
      currentNode = element;
    }
    _$jscoverage['plugins/serialize.js'][176]++;
    if (element.attributes.style) {
      _$jscoverage['plugins/serialize.js'][177]++;
      element.attributes.style = element.attributes.style.toLowerCase();
    }
    _$jscoverage['plugins/serialize.js'][179]++;
    return element;
}
  _$jscoverage['plugins/serialize.js'][184]++;
  function tagEnd(node) {
    _$jscoverage['plugins/serialize.js'][185]++;
    var needTag;
    _$jscoverage['plugins/serialize.js'][186]++;
    if (((! node.children.length) && (needTag = NEED_CHILD_TAG[node.tag]))) {
      _$jscoverage['plugins/serialize.js'][187]++;
      addElement({type: "element", tag: needTag, attributes: {}, children: []}, true);
      _$jscoverage['plugins/serialize.js'][193]++;
      return true;
    }
    _$jscoverage['plugins/serialize.js'][195]++;
    return false;
}
  _$jscoverage['plugins/serialize.js'][198]++;
  parse(html, {onText: (function (text) {
  _$jscoverage['plugins/serialize.js'][201]++;
  while ((! (dtd[currentNode.tag] || dtd.div)["#"])) {
    _$jscoverage['plugins/serialize.js'][206]++;
    if (tagEnd(currentNode)) {
      _$jscoverage['plugins/serialize.js'][206]++;
      continue;
    }
    _$jscoverage['plugins/serialize.js'][207]++;
    currentNode = currentNode.parent;
}
  _$jscoverage['plugins/serialize.js'][210]++;
  addChild({type: "text", data: text});
}), onComment: (function (text) {
  _$jscoverage['plugins/serialize.js'][217]++;
  addChild({type: "comment", data: text});
}), onCDATA: (function (text) {
  _$jscoverage['plugins/serialize.js'][223]++;
  while ((! (dtd[currentNode.tag] || dtd.div)["#"])) {
    _$jscoverage['plugins/serialize.js'][224]++;
    if (tagEnd(currentNode)) {
      _$jscoverage['plugins/serialize.js'][224]++;
      continue;
    }
    _$jscoverage['plugins/serialize.js'][225]++;
    currentNode = currentNode.parent;
}
  _$jscoverage['plugins/serialize.js'][227]++;
  addChild({type: "cdata", data: text});
}), onTagOpen: (function (tag, attrs, closed) {
  _$jscoverage['plugins/serialize.js'][233]++;
  closed = (closed || EMPTY_TAG[tag]);
  _$jscoverage['plugins/serialize.js'][234]++;
  addElement({type: "element", tag: tag, attributes: attrs, closed: closed, children: []}, (! closed));
}), onTagClose: (function (tag) {
  _$jscoverage['plugins/serialize.js'][243]++;
  var node = currentNode;
  _$jscoverage['plugins/serialize.js'][245]++;
  while ((node && (tag != node.tag))) {
    _$jscoverage['plugins/serialize.js'][246]++;
    node = node.parent;
}
  _$jscoverage['plugins/serialize.js'][248]++;
  if (node) {
    _$jscoverage['plugins/serialize.js'][250]++;
    for (var tnode = currentNode; (tnode !== node.parent); (tnode = tnode.parent)) {
      _$jscoverage['plugins/serialize.js'][251]++;
      tagEnd(tnode);
}
    _$jscoverage['plugins/serialize.js'][260]++;
    currentNode = node.parent;
  }
  else {
    _$jscoverage['plugins/serialize.js'][265]++;
    if ((! (dtd.$removeEmpty[tag] || dtd.$removeEmptyBlock[tag] || (tag == "embed")))) {
      _$jscoverage['plugins/serialize.js'][266]++;
      node = {type: "element", tag: tag, attributes: {}, children: []};
      _$jscoverage['plugins/serialize.js'][272]++;
      addElement(node, true);
      _$jscoverage['plugins/serialize.js'][273]++;
      tagEnd(node);
      _$jscoverage['plugins/serialize.js'][274]++;
      currentNode = node.parent;
    }
  }
})});
  _$jscoverage['plugins/serialize.js'][283]++;
  while ((currentNode !== fragment)) {
    _$jscoverage['plugins/serialize.js'][284]++;
    tagEnd(currentNode);
    _$jscoverage['plugins/serialize.js'][285]++;
    currentNode = currentNode.parent;
}
  _$jscoverage['plugins/serialize.js'][287]++;
  return fragment;
});
})();
  _$jscoverage['plugins/serialize.js'][290]++;
  var unhtml1 = (function () {
  _$jscoverage['plugins/serialize.js'][291]++;
  var map = {"<": "&lt;", ">": "&gt;", "\"": "&quot;", "'": "&#39;"};
  _$jscoverage['plugins/serialize.js'][293]++;
  function rep(m) {
    _$jscoverage['plugins/serialize.js'][294]++;
    return map[m];
}
  _$jscoverage['plugins/serialize.js'][297]++;
  return (function (str) {
  _$jscoverage['plugins/serialize.js'][298]++;
  str = (str + "");
  _$jscoverage['plugins/serialize.js'][299]++;
  return (str? str.replace(/[<>"']/g, rep): "");
});
})();
  _$jscoverage['plugins/serialize.js'][302]++;
  var toHTML = (function () {
  _$jscoverage['plugins/serialize.js'][303]++;
  function printChildren(node, pasteplain) {
    _$jscoverage['plugins/serialize.js'][304]++;
    var children = node.children;
    _$jscoverage['plugins/serialize.js'][306]++;
    var buff = [];
    _$jscoverage['plugins/serialize.js'][307]++;
    for (var i = 0, ci; (ci = children[i]); (i++)) {
      _$jscoverage['plugins/serialize.js'][309]++;
      buff.push(toHTML(ci, pasteplain));
}
    _$jscoverage['plugins/serialize.js'][311]++;
    return buff.join("");
}
  _$jscoverage['plugins/serialize.js'][314]++;
  function printAttrs(attrs) {
    _$jscoverage['plugins/serialize.js'][315]++;
    var buff = [];
    _$jscoverage['plugins/serialize.js'][316]++;
    for (var k in attrs) {
      _$jscoverage['plugins/serialize.js'][317]++;
      var value = attrs[k];
      _$jscoverage['plugins/serialize.js'][319]++;
      if ((k == "style")) {
        _$jscoverage['plugins/serialize.js'][322]++;
        value = ptToPx(value);
        _$jscoverage['plugins/serialize.js'][324]++;
        if (/rgba?\s*\([^)]*\)/.test(value)) {
          _$jscoverage['plugins/serialize.js'][325]++;
          value = value.replace(/rgba?\s*\(([^)]*)\)/g, (function (str) {
  _$jscoverage['plugins/serialize.js'][326]++;
  return utils.fixColor("color", str);
}));
        }
        _$jscoverage['plugins/serialize.js'][331]++;
        attrs[k] = utils.optCss(value.replace(/windowtext/g, "#000")).replace(/white-space[^;]+;/g, "");
        _$jscoverage['plugins/serialize.js'][333]++;
        if ((! attrs[k])) {
          _$jscoverage['plugins/serialize.js'][334]++;
          continue;
        }
      }
      _$jscoverage['plugins/serialize.js'][338]++;
      buff.push((k + "=\"" + unhtml1(attrs[k]) + "\""));
}
    _$jscoverage['plugins/serialize.js'][340]++;
    return buff.join(" ");
}
  _$jscoverage['plugins/serialize.js'][343]++;
  function printData(node, notTrans) {
    _$jscoverage['plugins/serialize.js'][346]++;
    return (notTrans? node.data.replace(/&nbsp;/g, " "): unhtml1(node.data).replace(/ /g, "&nbsp;"));
}
  _$jscoverage['plugins/serialize.js'][350]++;
  var transHtml = {"li": "p", "h1": "p", "h2": "p", "h3": "p", "h4": "p", "h5": "p", "h6": "p", "tr": "p", "br": "br", "div": "p", "p": "p"};
  _$jscoverage['plugins/serialize.js'][358]++;
  var clearTagName = {"table": 1, "tbody": 1, "ol": 1, "ul": 1, "dt": 1};
  _$jscoverage['plugins/serialize.js'][365]++;
  function printElement(node, pasteplain) {
    _$jscoverage['plugins/serialize.js'][366]++;
    if (((node.type == "element") && (! node.children.length) && dtd.$removeEmpty[node.tag] && (node.tag != "a") && utils.isEmptyObject(node.attributes) && autoClearEmptyNode)) {
      _$jscoverage['plugins/serialize.js'][367]++;
      return html;
    }
    _$jscoverage['plugins/serialize.js'][369]++;
    var tag = node.tag;
    _$jscoverage['plugins/serialize.js'][370]++;
    if ((pasteplain && (tag == "td"))) {
      _$jscoverage['plugins/serialize.js'][371]++;
      if ((! html)) {
        _$jscoverage['plugins/serialize.js'][371]++;
        html = "";
      }
      _$jscoverage['plugins/serialize.js'][372]++;
      html += (printChildren(node, pasteplain) + "&nbsp;&nbsp;&nbsp;");
    }
    else {
      _$jscoverage['plugins/serialize.js'][374]++;
      var attrs = printAttrs(node.attributes);
      _$jscoverage['plugins/serialize.js'][376]++;
      var html = ((pasteplain && clearTagName[tag])? "": ("<" + ((pasteplain && (transHtml[tag] !== undefined))? transHtml[tag]: tag) + (attrs? (" " + attrs): "") + (EMPTY_TAG[tag]? " />": ">")));
      _$jscoverage['plugins/serialize.js'][378]++;
      if ((! EMPTY_TAG[tag])) {
        _$jscoverage['plugins/serialize.js'][381]++;
        if (((tag == "p") && (! node.children.length))) {
          _$jscoverage['plugins/serialize.js'][382]++;
          html += (browser.ie? "&nbsp;": "<br/>");
        }
        _$jscoverage['plugins/serialize.js'][384]++;
        html += printChildren(node, pasteplain);
        _$jscoverage['plugins/serialize.js'][385]++;
        html += ((pasteplain && clearTagName[tag])? "": ("</" + ((pasteplain && (transHtml[tag] !== undefined))? transHtml[tag]: tag) + ">"));
      }
    }
    _$jscoverage['plugins/serialize.js'][389]++;
    return html;
}
  _$jscoverage['plugins/serialize.js'][392]++;
  return (function (node, pasteplain) {
  _$jscoverage['plugins/serialize.js'][393]++;
  if ((node.type == "fragment")) {
    _$jscoverage['plugins/serialize.js'][394]++;
    return printChildren(node, pasteplain);
  }
  else {
    _$jscoverage['plugins/serialize.js'][395]++;
    if ((node.type == "element")) {
      _$jscoverage['plugins/serialize.js'][396]++;
      return printElement(node, pasteplain);
    }
    else {
      _$jscoverage['plugins/serialize.js'][397]++;
      if (((node.type == "text") || (node.type == "cdata"))) {
        _$jscoverage['plugins/serialize.js'][398]++;
        return printData(node, dtd.$notTransContent[node.parent.tag]);
      }
      else {
        _$jscoverage['plugins/serialize.js'][399]++;
        if ((node.type == "comment")) {
          _$jscoverage['plugins/serialize.js'][400]++;
          return ("<!--" + node.data + "-->");
        }
      }
    }
  }
  _$jscoverage['plugins/serialize.js'][402]++;
  return "";
});
})();
  _$jscoverage['plugins/serialize.js'][406]++;
  var NODE_NAME_MAP = {"text": "#text", "comment": "#comment", "cdata": "#cdata-section", "fragment": "#document-fragment"};
  _$jscoverage['plugins/serialize.js'][415]++;
  function transNode(node, word_img_flag) {
    _$jscoverage['plugins/serialize.js'][417]++;
    var sizeMap = [0, 10, 12, 16, 18, 24, 32, 48], attr, indexOf = utils.indexOf;
    _$jscoverage['plugins/serialize.js'][420]++;
    switch (node.tag) {
    case "img":
      _$jscoverage['plugins/serialize.js'][445]++;
      if ((node.attributes.src && /^(?:file)/.test(node.attributes.src))) {
        _$jscoverage['plugins/serialize.js'][446]++;
        if ((! /(gif|bmp|png|jpg|jpeg)$/.test(node.attributes.src))) {
          _$jscoverage['plugins/serialize.js'][447]++;
          return ({type: "fragment", children: []});
        }
        _$jscoverage['plugins/serialize.js'][452]++;
        node.attributes.word_img = node.attributes.src;
        _$jscoverage['plugins/serialize.js'][453]++;
        node.attributes.src = (me.options.UEDITOR_HOME_URL + "themes/default/images/spacer.gif");
        _$jscoverage['plugins/serialize.js'][454]++;
        var flag = ((parseInt(node.attributes.width) < 128) || (parseInt(node.attributes.height) < 43));
        _$jscoverage['plugins/serialize.js'][455]++;
        node.attributes.style = ("background:url(" + (flag? (me.options.themePath + me.options.theme + "/images/word.gif"): (me.options.langPath + me.options.lang + "/images/localimage.png")) + ") no-repeat center center;border:1px solid #ddd");
        _$jscoverage['plugins/serialize.js'][457]++;
        (word_img_flag && (word_img_flag.flag = 1));
      }
      _$jscoverage['plugins/serialize.js'][462]++;
      break;
    case "span":
    }
    _$jscoverage['plugins/serialize.js'][577]++;
    return node;
}
  _$jscoverage['plugins/serialize.js'][580]++;
  function optStyle(node) {
    _$jscoverage['plugins/serialize.js'][581]++;
    if ((ie && node.attributes.style)) {
      _$jscoverage['plugins/serialize.js'][582]++;
      var style = node.attributes.style;
      _$jscoverage['plugins/serialize.js'][583]++;
      node.attributes.style = style.replace(/;\s*/g, ";");
      _$jscoverage['plugins/serialize.js'][584]++;
      node.attributes.style = node.attributes.style.replace(/^\s*|\s*$/, "");
    }
}
  _$jscoverage['plugins/serialize.js'][588]++;
  function transOutNode(node) {
    _$jscoverage['plugins/serialize.js'][590]++;
    switch (node.tag) {
    }
    _$jscoverage['plugins/serialize.js'][661]++;
    return node;
}
  _$jscoverage['plugins/serialize.js'][664]++;
  function childrenAccept(node, visit, ctx) {
    _$jscoverage['plugins/serialize.js'][666]++;
    if (((! node.children) || (! node.children.length))) {
      _$jscoverage['plugins/serialize.js'][667]++;
      return node;
    }
    _$jscoverage['plugins/serialize.js'][669]++;
    var children = node.children;
    _$jscoverage['plugins/serialize.js'][670]++;
    for (var i = 0; (i < children.length); (i++)) {
      _$jscoverage['plugins/serialize.js'][671]++;
      var newNode = visit(children[i], ctx);
      _$jscoverage['plugins/serialize.js'][672]++;
      if ((newNode.type == "fragment")) {
        _$jscoverage['plugins/serialize.js'][673]++;
        var args = [i, 1];
        _$jscoverage['plugins/serialize.js'][674]++;
        args.push.apply(args, newNode.children);
        _$jscoverage['plugins/serialize.js'][675]++;
        children.splice.apply(children, args);
        _$jscoverage['plugins/serialize.js'][677]++;
        if ((! children.length)) {
          _$jscoverage['plugins/serialize.js'][678]++;
          node = {type: "fragment", children: []};
        }
        _$jscoverage['plugins/serialize.js'][683]++;
        (i--);
      }
      else {
        _$jscoverage['plugins/serialize.js'][685]++;
        children[i] = newNode;
      }
}
    _$jscoverage['plugins/serialize.js'][688]++;
    return node;
}
  _$jscoverage['plugins/serialize.js'][691]++;
  function Serialize(rules) {
    _$jscoverage['plugins/serialize.js'][692]++;
    this.rules = rules;
}
  _$jscoverage['plugins/serialize.js'][696]++;
  Serialize.prototype = {rules: null, filter: (function (node, rules, modify) {
  _$jscoverage['plugins/serialize.js'][701]++;
  rules = (rules || this.rules);
  _$jscoverage['plugins/serialize.js'][702]++;
  var whiteList = (rules && rules.whiteList);
  _$jscoverage['plugins/serialize.js'][703]++;
  var blackList = (rules && rules.blackList);
  _$jscoverage['plugins/serialize.js'][705]++;
  function visitNode(node, parent) {
    _$jscoverage['plugins/serialize.js'][706]++;
    node.name = ((node.type == "element")? node.tag: NODE_NAME_MAP[node.type]);
    _$jscoverage['plugins/serialize.js'][708]++;
    if ((parent == null)) {
      _$jscoverage['plugins/serialize.js'][709]++;
      return childrenAccept(node, visitNode, node);
    }
    _$jscoverage['plugins/serialize.js'][712]++;
    if ((blackList && (blackList[node.name] || (node.attributes && node.attributes._ue_org_tagName && blackList[node.attributes._ue_org_tagName])))) {
      _$jscoverage['plugins/serialize.js'][713]++;
      (modify && (modify.flag = 1));
      _$jscoverage['plugins/serialize.js'][714]++;
      return ({type: "fragment", children: []});
    }
    _$jscoverage['plugins/serialize.js'][719]++;
    if (whiteList) {
      _$jscoverage['plugins/serialize.js'][720]++;
      if ((node.type == "element")) {
        _$jscoverage['plugins/serialize.js'][721]++;
        if (((parent.type == "fragment")? whiteList[node.name]: (whiteList[node.name] && whiteList[parent.name][node.name]))) {
          _$jscoverage['plugins/serialize.js'][723]++;
          var props;
          _$jscoverage['plugins/serialize.js'][724]++;
          if ((props = whiteList[node.name].$)) {
            _$jscoverage['plugins/serialize.js'][725]++;
            var oldAttrs = node.attributes;
            _$jscoverage['plugins/serialize.js'][726]++;
            var newAttrs = {};
            _$jscoverage['plugins/serialize.js'][727]++;
            for (var k in props) {
              _$jscoverage['plugins/serialize.js'][728]++;
              if (oldAttrs[k]) {
                _$jscoverage['plugins/serialize.js'][729]++;
                newAttrs[k] = oldAttrs[k];
              }
}
            _$jscoverage['plugins/serialize.js'][732]++;
            node.attributes = newAttrs;
          }
        }
        else {
          _$jscoverage['plugins/serialize.js'][737]++;
          (modify && (modify.flag = 1));
          _$jscoverage['plugins/serialize.js'][738]++;
          node.type = "fragment";
          _$jscoverage['plugins/serialize.js'][740]++;
          node.name = parent.name;
        }
      }
      else {
      }
    }
    _$jscoverage['plugins/serialize.js'][746]++;
    if ((blackList || whiteList)) {
      _$jscoverage['plugins/serialize.js'][747]++;
      childrenAccept(node, visitNode, node);
    }
    _$jscoverage['plugins/serialize.js'][749]++;
    return node;
}
  _$jscoverage['plugins/serialize.js'][752]++;
  return visitNode(node, null);
}), transformInput: (function (node, word_img_flag) {
  _$jscoverage['plugins/serialize.js'][756]++;
  function visitNode(node) {
    _$jscoverage['plugins/serialize.js'][757]++;
    node = transNode(node, word_img_flag);
    _$jscoverage['plugins/serialize.js'][759]++;
    node = childrenAccept(node, visitNode, node);
    _$jscoverage['plugins/serialize.js'][761]++;
    if ((node.tag == "section")) {
      _$jscoverage['plugins/serialize.js'][763]++;
      node.type = "element";
      _$jscoverage['plugins/serialize.js'][764]++;
      node.name = (node.tag = "hr");
      _$jscoverage['plugins/serialize.js'][766]++;
      (delete node.data);
      _$jscoverage['plugins/serialize.js'][767]++;
      node.attributes = {"class": "pagebreak", noshade: "noshade", size: "5", "unselectable": "on", "style": "moz-user-select:none;-khtml-user-select: none;"};
      _$jscoverage['plugins/serialize.js'][775]++;
      node.children = [];
    }
    _$jscoverage['plugins/serialize.js'][779]++;
    if (((node.type == "text") && (! dtd.$notTransContent[node.parent.tag]))) {
      _$jscoverage['plugins/serialize.js'][780]++;
      node.data = node.data.replace(/[\r\t\n]*/g, "");
    }
    _$jscoverage['plugins/serialize.js'][782]++;
    return node;
}
  _$jscoverage['plugins/serialize.js'][785]++;
  return visitNode(node);
}), transformOutput: (function (node) {
  _$jscoverage['plugins/serialize.js'][788]++;
  function visitNode(node) {
    _$jscoverage['plugins/serialize.js'][790]++;
    if (((node.tag == "hr") && (node.attributes["class"] == "pagebreak"))) {
      _$jscoverage['plugins/serialize.js'][791]++;
      node.tag = "section";
      _$jscoverage['plugins/serialize.js'][793]++;
      node.attributes = {"class": "CTRL-PAGE-SEPARATOR"};
    }
    _$jscoverage['plugins/serialize.js'][798]++;
    node = transOutNode(node);
    _$jscoverage['plugins/serialize.js'][799]++;
    node = childrenAccept(node, visitNode, node);
    _$jscoverage['plugins/serialize.js'][800]++;
    return node;
}
  _$jscoverage['plugins/serialize.js'][803]++;
  return visitNode(node);
}), toHTML: toHTML, parseHTML: parseHTML, word: UE.filterWord};
  _$jscoverage['plugins/serialize.js'][809]++;
  me.serialize = new Serialize((me.options.serialize || {}));
  _$jscoverage['plugins/serialize.js'][810]++;
  UE.serialize = new Serialize({});
});
